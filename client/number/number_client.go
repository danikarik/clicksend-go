// Code generated by go-swagger; DO NOT EDIT.

package number

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new number API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for number API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NumbersBuyByDedicatedNumberPost buys dedicated number

Buy dedicated number
*/
func (a *Client) NumbersBuyByDedicatedNumberPost(params *NumbersBuyByDedicatedNumberPostParams, authInfo runtime.ClientAuthInfoWriter) (*NumbersBuyByDedicatedNumberPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNumbersBuyByDedicatedNumberPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NumbersBuyByDedicatedNumberPost",
		Method:             "POST",
		PathPattern:        "/numbers/buy/{dedicated_number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NumbersBuyByDedicatedNumberPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NumbersBuyByDedicatedNumberPostOK), nil

}

/*
NumbersGet gets all availible dedicated numbers

Get all availible dedicated numbers
*/
func (a *Client) NumbersGet(params *NumbersGetParams, authInfo runtime.ClientAuthInfoWriter) (*NumbersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNumbersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NumbersGet",
		Method:             "GET",
		PathPattern:        "/numbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NumbersGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NumbersGetOK), nil

}

/*
NumbersSearchByCountryGet gets all dedicated numbers by country

Get all dedicated numbers by country
*/
func (a *Client) NumbersSearchByCountryGet(params *NumbersSearchByCountryGetParams, authInfo runtime.ClientAuthInfoWriter) (*NumbersSearchByCountryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNumbersSearchByCountryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NumbersSearchByCountryGet",
		Method:             "GET",
		PathPattern:        "/numbers/search/{country}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NumbersSearchByCountryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NumbersSearchByCountryGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
