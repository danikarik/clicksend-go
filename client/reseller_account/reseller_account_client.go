// Code generated by go-swagger; DO NOT EDIT.

package reseller_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new reseller account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reseller account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ResellerAccountsByClientUserIDGet gets reseller clients account

Get Reseller clients Account
*/
func (a *Client) ResellerAccountsByClientUserIDGet(params *ResellerAccountsByClientUserIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*ResellerAccountsByClientUserIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResellerAccountsByClientUserIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResellerAccountsByClientUserIdGet",
		Method:             "GET",
		PathPattern:        "/reseller/accounts/{client_user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResellerAccountsByClientUserIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResellerAccountsByClientUserIDGetOK), nil

}

/*
ResellerAccountsByClientUserIDPut updates reseller clients account

Update Reseller clients Account
*/
func (a *Client) ResellerAccountsByClientUserIDPut(params *ResellerAccountsByClientUserIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*ResellerAccountsByClientUserIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResellerAccountsByClientUserIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResellerAccountsByClientUserIdPut",
		Method:             "PUT",
		PathPattern:        "/reseller/accounts/{client_user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResellerAccountsByClientUserIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResellerAccountsByClientUserIDPutOK), nil

}

/*
ResellerAccountsGet gets list of reseller accounts

Get list of reseller accounts
*/
func (a *Client) ResellerAccountsGet(params *ResellerAccountsGetParams, authInfo runtime.ClientAuthInfoWriter) (*ResellerAccountsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResellerAccountsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResellerAccountsGet",
		Method:             "GET",
		PathPattern:        "/reseller/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResellerAccountsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResellerAccountsGetOK), nil

}

/*
ResellerAccountsPost creates reseller account

Create reseller account
*/
func (a *Client) ResellerAccountsPost(params *ResellerAccountsPostParams, authInfo runtime.ClientAuthInfoWriter) (*ResellerAccountsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResellerAccountsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResellerAccountsPost",
		Method:             "POST",
		PathPattern:        "/reseller/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResellerAccountsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResellerAccountsPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
