// Code generated by go-swagger; DO NOT EDIT.

package master_email_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new master email templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for master email templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MasterEmailTemplateCategoriesGet gets all master email template categories

Get all master email template categories
*/
func (a *Client) MasterEmailTemplateCategoriesGet(params *MasterEmailTemplateCategoriesGetParams, authInfo runtime.ClientAuthInfoWriter) (*MasterEmailTemplateCategoriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMasterEmailTemplateCategoriesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MasterEmailTemplateCategoriesGet",
		Method:             "GET",
		PathPattern:        "/email/master-templates-categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MasterEmailTemplateCategoriesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MasterEmailTemplateCategoriesGetOK), nil

}

/*
MasterEmailTemplateCategoryGet gets specific master email template category

Get specific master email template category
*/
func (a *Client) MasterEmailTemplateCategoryGet(params *MasterEmailTemplateCategoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*MasterEmailTemplateCategoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMasterEmailTemplateCategoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MasterEmailTemplateCategoryGet",
		Method:             "GET",
		PathPattern:        "/email/master-templates-categories/{category_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MasterEmailTemplateCategoryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MasterEmailTemplateCategoryGetOK), nil

}

/*
MasterEmailTemplateGet gets specific master email template

Get specific master email template
*/
func (a *Client) MasterEmailTemplateGet(params *MasterEmailTemplateGetParams, authInfo runtime.ClientAuthInfoWriter) (*MasterEmailTemplateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMasterEmailTemplateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MasterEmailTemplateGet",
		Method:             "GET",
		PathPattern:        "/email/master-templates/{template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MasterEmailTemplateGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MasterEmailTemplateGetOK), nil

}

/*
MasterEmailTemplatesGet gets all master email templates

Get all master email templates
*/
func (a *Client) MasterEmailTemplatesGet(params *MasterEmailTemplatesGetParams, authInfo runtime.ClientAuthInfoWriter) (*MasterEmailTemplatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMasterEmailTemplatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MasterEmailTemplatesGet",
		Method:             "GET",
		PathPattern:        "/email/master-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MasterEmailTemplatesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MasterEmailTemplatesGetOK), nil

}

/*
MasterEmailTemplatesInCategoryGet gets all master email templates in a category

Get all master email templates in a category
*/
func (a *Client) MasterEmailTemplatesInCategoryGet(params *MasterEmailTemplatesInCategoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*MasterEmailTemplatesInCategoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMasterEmailTemplatesInCategoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MasterEmailTemplatesInCategoryGet",
		Method:             "GET",
		PathPattern:        "/email/master-templates-categories/{category_id}/master-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MasterEmailTemplatesInCategoryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MasterEmailTemplatesInCategoryGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
