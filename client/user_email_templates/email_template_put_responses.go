// Code generated by go-swagger; DO NOT EDIT.

package user_email_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// EmailTemplatePutReader is a Reader for the EmailTemplatePut structure.
type EmailTemplatePutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EmailTemplatePutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEmailTemplatePutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewEmailTemplatePutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewEmailTemplatePutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewEmailTemplatePutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewEmailTemplatePutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewEmailTemplatePutMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewEmailTemplatePutTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewEmailTemplatePutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEmailTemplatePutOK creates a EmailTemplatePutOK with default headers values
func NewEmailTemplatePutOK() *EmailTemplatePutOK {
	return &EmailTemplatePutOK{}
}

/*EmailTemplatePutOK handles this case with default header values.

SUCCESS
*/
type EmailTemplatePutOK struct {
	Payload interface{}
}

func (o *EmailTemplatePutOK) Error() string {
	return fmt.Sprintf("[PUT /email/templates/{template_id}][%d] emailTemplatePutOK  %+v", 200, o.Payload)
}

func (o *EmailTemplatePutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailTemplatePutBadRequest creates a EmailTemplatePutBadRequest with default headers values
func NewEmailTemplatePutBadRequest() *EmailTemplatePutBadRequest {
	return &EmailTemplatePutBadRequest{}
}

/*EmailTemplatePutBadRequest handles this case with default header values.

BAD_REQUEST
*/
type EmailTemplatePutBadRequest struct {
	Payload interface{}
}

func (o *EmailTemplatePutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /email/templates/{template_id}][%d] emailTemplatePutBadRequest  %+v", 400, o.Payload)
}

func (o *EmailTemplatePutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailTemplatePutUnauthorized creates a EmailTemplatePutUnauthorized with default headers values
func NewEmailTemplatePutUnauthorized() *EmailTemplatePutUnauthorized {
	return &EmailTemplatePutUnauthorized{}
}

/*EmailTemplatePutUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type EmailTemplatePutUnauthorized struct {
	Payload interface{}
}

func (o *EmailTemplatePutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /email/templates/{template_id}][%d] emailTemplatePutUnauthorized  %+v", 401, o.Payload)
}

func (o *EmailTemplatePutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailTemplatePutForbidden creates a EmailTemplatePutForbidden with default headers values
func NewEmailTemplatePutForbidden() *EmailTemplatePutForbidden {
	return &EmailTemplatePutForbidden{}
}

/*EmailTemplatePutForbidden handles this case with default header values.

FORBIDDEN
*/
type EmailTemplatePutForbidden struct {
	Payload interface{}
}

func (o *EmailTemplatePutForbidden) Error() string {
	return fmt.Sprintf("[PUT /email/templates/{template_id}][%d] emailTemplatePutForbidden  %+v", 403, o.Payload)
}

func (o *EmailTemplatePutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailTemplatePutNotFound creates a EmailTemplatePutNotFound with default headers values
func NewEmailTemplatePutNotFound() *EmailTemplatePutNotFound {
	return &EmailTemplatePutNotFound{}
}

/*EmailTemplatePutNotFound handles this case with default header values.

NOT_FOUND
*/
type EmailTemplatePutNotFound struct {
	Payload interface{}
}

func (o *EmailTemplatePutNotFound) Error() string {
	return fmt.Sprintf("[PUT /email/templates/{template_id}][%d] emailTemplatePutNotFound  %+v", 404, o.Payload)
}

func (o *EmailTemplatePutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailTemplatePutMethodNotAllowed creates a EmailTemplatePutMethodNotAllowed with default headers values
func NewEmailTemplatePutMethodNotAllowed() *EmailTemplatePutMethodNotAllowed {
	return &EmailTemplatePutMethodNotAllowed{}
}

/*EmailTemplatePutMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type EmailTemplatePutMethodNotAllowed struct {
	Payload interface{}
}

func (o *EmailTemplatePutMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /email/templates/{template_id}][%d] emailTemplatePutMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *EmailTemplatePutMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailTemplatePutTooManyRequests creates a EmailTemplatePutTooManyRequests with default headers values
func NewEmailTemplatePutTooManyRequests() *EmailTemplatePutTooManyRequests {
	return &EmailTemplatePutTooManyRequests{}
}

/*EmailTemplatePutTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type EmailTemplatePutTooManyRequests struct {
	Payload interface{}
}

func (o *EmailTemplatePutTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /email/templates/{template_id}][%d] emailTemplatePutTooManyRequests  %+v", 429, o.Payload)
}

func (o *EmailTemplatePutTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailTemplatePutDefault creates a EmailTemplatePutDefault with default headers values
func NewEmailTemplatePutDefault(code int) *EmailTemplatePutDefault {
	return &EmailTemplatePutDefault{
		_statusCode: code,
	}
}

/*EmailTemplatePutDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type EmailTemplatePutDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the email template put default response
func (o *EmailTemplatePutDefault) Code() int {
	return o._statusCode
}

func (o *EmailTemplatePutDefault) Error() string {
	return fmt.Sprintf("[PUT /email/templates/{template_id}][%d] EmailTemplatePut default  %+v", o._statusCode, o.Payload)
}

func (o *EmailTemplatePutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
