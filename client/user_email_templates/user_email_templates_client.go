// Code generated by go-swagger; DO NOT EDIT.

package user_email_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user email templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user email templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmailTemplateDelete deletes user email template

Delete user email template
*/
func (a *Client) EmailTemplateDelete(params *EmailTemplateDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*EmailTemplateDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailTemplateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailTemplateDelete",
		Method:             "DELETE",
		PathPattern:        "/email/templates/{template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailTemplateDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailTemplateDeleteOK), nil

}

/*
EmailTemplateGet gets specific user email template

Get specific user email templates
*/
func (a *Client) EmailTemplateGet(params *EmailTemplateGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmailTemplateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailTemplateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailTemplateGet",
		Method:             "GET",
		PathPattern:        "/email/templates/{template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailTemplateGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailTemplateGetOK), nil

}

/*
EmailTemplatePost creates email template

Create email template
*/
func (a *Client) EmailTemplatePost(params *EmailTemplatePostParams, authInfo runtime.ClientAuthInfoWriter) (*EmailTemplatePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailTemplatePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailTemplatePost",
		Method:             "POST",
		PathPattern:        "/email/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailTemplatePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailTemplatePostOK), nil

}

/*
EmailTemplatePut updates email template

Update email template
*/
func (a *Client) EmailTemplatePut(params *EmailTemplatePutParams, authInfo runtime.ClientAuthInfoWriter) (*EmailTemplatePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailTemplatePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailTemplatePut",
		Method:             "PUT",
		PathPattern:        "/email/templates/{template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailTemplatePutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailTemplatePutOK), nil

}

/*
EmailTemplatesGet gets all user email templates

Get all user email templates
*/
func (a *Client) EmailTemplatesGet(params *EmailTemplatesGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmailTemplatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailTemplatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailTemplatesGet",
		Method:             "GET",
		PathPattern:        "/email/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailTemplatesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailTemplatesGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
