// Code generated by go-swagger; DO NOT EDIT.

package user_email_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/danikarik/clicksend-go/models"
)

// NewEmailTemplatePutParams creates a new EmailTemplatePutParams object
// with the default values initialized.
func NewEmailTemplatePutParams() *EmailTemplatePutParams {
	var ()
	return &EmailTemplatePutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmailTemplatePutParamsWithTimeout creates a new EmailTemplatePutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmailTemplatePutParamsWithTimeout(timeout time.Duration) *EmailTemplatePutParams {
	var ()
	return &EmailTemplatePutParams{

		timeout: timeout,
	}
}

// NewEmailTemplatePutParamsWithContext creates a new EmailTemplatePutParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmailTemplatePutParamsWithContext(ctx context.Context) *EmailTemplatePutParams {
	var ()
	return &EmailTemplatePutParams{

		Context: ctx,
	}
}

// NewEmailTemplatePutParamsWithHTTPClient creates a new EmailTemplatePutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmailTemplatePutParamsWithHTTPClient(client *http.Client) *EmailTemplatePutParams {
	var ()
	return &EmailTemplatePutParams{
		HTTPClient: client,
	}
}

/*EmailTemplatePutParams contains all the parameters to send to the API endpoint
for the email template put operation typically these are written to a http.Request
*/
type EmailTemplatePutParams struct {

	/*EmailTemplate
	  Email template model

	*/
	EmailTemplate models.EmailTemplateUpdate
	/*TemplateID
	  Email template id

	*/
	TemplateID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the email template put params
func (o *EmailTemplatePutParams) WithTimeout(timeout time.Duration) *EmailTemplatePutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the email template put params
func (o *EmailTemplatePutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the email template put params
func (o *EmailTemplatePutParams) WithContext(ctx context.Context) *EmailTemplatePutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the email template put params
func (o *EmailTemplatePutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the email template put params
func (o *EmailTemplatePutParams) WithHTTPClient(client *http.Client) *EmailTemplatePutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the email template put params
func (o *EmailTemplatePutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmailTemplate adds the emailTemplate to the email template put params
func (o *EmailTemplatePutParams) WithEmailTemplate(emailTemplate models.EmailTemplateUpdate) *EmailTemplatePutParams {
	o.SetEmailTemplate(emailTemplate)
	return o
}

// SetEmailTemplate adds the emailTemplate to the email template put params
func (o *EmailTemplatePutParams) SetEmailTemplate(emailTemplate models.EmailTemplateUpdate) {
	o.EmailTemplate = emailTemplate
}

// WithTemplateID adds the templateID to the email template put params
func (o *EmailTemplatePutParams) WithTemplateID(templateID int32) *EmailTemplatePutParams {
	o.SetTemplateID(templateID)
	return o
}

// SetTemplateID adds the templateId to the email template put params
func (o *EmailTemplatePutParams) SetTemplateID(templateID int32) {
	o.TemplateID = templateID
}

// WriteToRequest writes these params to a swagger request
func (o *EmailTemplatePutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.EmailTemplate); err != nil {
		return err
	}

	// path param template_id
	if err := r.SetPathParam("template_id", swag.FormatInt32(o.TemplateID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
