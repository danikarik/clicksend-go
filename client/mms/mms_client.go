// Code generated by go-swagger; DO NOT EDIT.

package mms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new mms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MMSPricePost gets price for MMS sent

Get Price for MMS sent
*/
func (a *Client) MMSPricePost(params *MMSPricePostParams, authInfo runtime.ClientAuthInfoWriter) (*MMSPricePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSPricePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsPricePost",
		Method:             "POST",
		PathPattern:        "/mms/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSPricePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSPricePostOK), nil

}

/*
MMSReceiptsGet gets all delivery receipts

Get all delivery receipts
*/
func (a *Client) MMSReceiptsGet(params *MMSReceiptsGetParams, authInfo runtime.ClientAuthInfoWriter) (*MMSReceiptsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSReceiptsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsReceiptsGet",
		Method:             "GET",
		PathPattern:        "/mms/receipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSReceiptsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSReceiptsGetOK), nil

}

/*
MMSReceiptsReadPut marks delivery receipts as read

Mark delivery receipts as read
*/
func (a *Client) MMSReceiptsReadPut(params *MMSReceiptsReadPutParams, authInfo runtime.ClientAuthInfoWriter) (*MMSReceiptsReadPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSReceiptsReadPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsReceiptsReadPut",
		Method:             "PUT",
		PathPattern:        "/mms/receipts-read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSReceiptsReadPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSReceiptsReadPutOK), nil

}

/*
MMSSendPost sends MMS

Send MMS
*/
func (a *Client) MMSSendPost(params *MMSSendPostParams, authInfo runtime.ClientAuthInfoWriter) (*MMSSendPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSSendPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsSendPost",
		Method:             "POST",
		PathPattern:        "/mms/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSSendPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSSendPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
