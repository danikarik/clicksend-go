// Code generated by go-swagger; DO NOT EDIT.

package mms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// MMSPricePostReader is a Reader for the MMSPricePost structure.
type MMSPricePostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MMSPricePostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewMMSPricePostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMMSPricePostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewMMSPricePostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewMMSPricePostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewMMSPricePostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewMMSPricePostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewMMSPricePostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewMMSPricePostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewMMSPricePostOK creates a MMSPricePostOK with default headers values
func NewMMSPricePostOK() *MMSPricePostOK {
	return &MMSPricePostOK{}
}

/*MMSPricePostOK handles this case with default header values.

SUCCESS
*/
type MMSPricePostOK struct {
	Payload interface{}
}

func (o *MMSPricePostOK) Error() string {
	return fmt.Sprintf("[POST /mms/price][%d] mmsPricePostOK  %+v", 200, o.Payload)
}

func (o *MMSPricePostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMMSPricePostBadRequest creates a MMSPricePostBadRequest with default headers values
func NewMMSPricePostBadRequest() *MMSPricePostBadRequest {
	return &MMSPricePostBadRequest{}
}

/*MMSPricePostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type MMSPricePostBadRequest struct {
	Payload interface{}
}

func (o *MMSPricePostBadRequest) Error() string {
	return fmt.Sprintf("[POST /mms/price][%d] mmsPricePostBadRequest  %+v", 400, o.Payload)
}

func (o *MMSPricePostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMMSPricePostUnauthorized creates a MMSPricePostUnauthorized with default headers values
func NewMMSPricePostUnauthorized() *MMSPricePostUnauthorized {
	return &MMSPricePostUnauthorized{}
}

/*MMSPricePostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type MMSPricePostUnauthorized struct {
	Payload interface{}
}

func (o *MMSPricePostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /mms/price][%d] mmsPricePostUnauthorized  %+v", 401, o.Payload)
}

func (o *MMSPricePostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMMSPricePostForbidden creates a MMSPricePostForbidden with default headers values
func NewMMSPricePostForbidden() *MMSPricePostForbidden {
	return &MMSPricePostForbidden{}
}

/*MMSPricePostForbidden handles this case with default header values.

FORBIDDEN
*/
type MMSPricePostForbidden struct {
	Payload interface{}
}

func (o *MMSPricePostForbidden) Error() string {
	return fmt.Sprintf("[POST /mms/price][%d] mmsPricePostForbidden  %+v", 403, o.Payload)
}

func (o *MMSPricePostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMMSPricePostNotFound creates a MMSPricePostNotFound with default headers values
func NewMMSPricePostNotFound() *MMSPricePostNotFound {
	return &MMSPricePostNotFound{}
}

/*MMSPricePostNotFound handles this case with default header values.

NOT_FOUND
*/
type MMSPricePostNotFound struct {
	Payload interface{}
}

func (o *MMSPricePostNotFound) Error() string {
	return fmt.Sprintf("[POST /mms/price][%d] mmsPricePostNotFound  %+v", 404, o.Payload)
}

func (o *MMSPricePostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMMSPricePostMethodNotAllowed creates a MMSPricePostMethodNotAllowed with default headers values
func NewMMSPricePostMethodNotAllowed() *MMSPricePostMethodNotAllowed {
	return &MMSPricePostMethodNotAllowed{}
}

/*MMSPricePostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type MMSPricePostMethodNotAllowed struct {
	Payload interface{}
}

func (o *MMSPricePostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /mms/price][%d] mmsPricePostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *MMSPricePostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMMSPricePostTooManyRequests creates a MMSPricePostTooManyRequests with default headers values
func NewMMSPricePostTooManyRequests() *MMSPricePostTooManyRequests {
	return &MMSPricePostTooManyRequests{}
}

/*MMSPricePostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type MMSPricePostTooManyRequests struct {
	Payload interface{}
}

func (o *MMSPricePostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /mms/price][%d] mmsPricePostTooManyRequests  %+v", 429, o.Payload)
}

func (o *MMSPricePostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMMSPricePostDefault creates a MMSPricePostDefault with default headers values
func NewMMSPricePostDefault(code int) *MMSPricePostDefault {
	return &MMSPricePostDefault{
		_statusCode: code,
	}
}

/*MMSPricePostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type MMSPricePostDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the Mms price post default response
func (o *MMSPricePostDefault) Code() int {
	return o._statusCode
}

func (o *MMSPricePostDefault) Error() string {
	return fmt.Sprintf("[POST /mms/price][%d] MmsPricePost default  %+v", o._statusCode, o.Payload)
}

func (o *MMSPricePostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
