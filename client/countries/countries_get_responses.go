// Code generated by go-swagger; DO NOT EDIT.

package countries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// CountriesGetReader is a Reader for the CountriesGet structure.
type CountriesGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CountriesGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCountriesGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCountriesGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCountriesGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCountriesGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCountriesGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewCountriesGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewCountriesGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCountriesGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCountriesGetOK creates a CountriesGetOK with default headers values
func NewCountriesGetOK() *CountriesGetOK {
	return &CountriesGetOK{}
}

/*CountriesGetOK handles this case with default header values.

SUCCESS
*/
type CountriesGetOK struct {
	Payload string
}

func (o *CountriesGetOK) Error() string {
	return fmt.Sprintf("[GET /countries][%d] countriesGetOK  %+v", 200, o.Payload)
}

func (o *CountriesGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountriesGetBadRequest creates a CountriesGetBadRequest with default headers values
func NewCountriesGetBadRequest() *CountriesGetBadRequest {
	return &CountriesGetBadRequest{}
}

/*CountriesGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type CountriesGetBadRequest struct {
	Payload string
}

func (o *CountriesGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /countries][%d] countriesGetBadRequest  %+v", 400, o.Payload)
}

func (o *CountriesGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountriesGetUnauthorized creates a CountriesGetUnauthorized with default headers values
func NewCountriesGetUnauthorized() *CountriesGetUnauthorized {
	return &CountriesGetUnauthorized{}
}

/*CountriesGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type CountriesGetUnauthorized struct {
	Payload string
}

func (o *CountriesGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /countries][%d] countriesGetUnauthorized  %+v", 401, o.Payload)
}

func (o *CountriesGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountriesGetForbidden creates a CountriesGetForbidden with default headers values
func NewCountriesGetForbidden() *CountriesGetForbidden {
	return &CountriesGetForbidden{}
}

/*CountriesGetForbidden handles this case with default header values.

FORBIDDEN
*/
type CountriesGetForbidden struct {
	Payload string
}

func (o *CountriesGetForbidden) Error() string {
	return fmt.Sprintf("[GET /countries][%d] countriesGetForbidden  %+v", 403, o.Payload)
}

func (o *CountriesGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountriesGetNotFound creates a CountriesGetNotFound with default headers values
func NewCountriesGetNotFound() *CountriesGetNotFound {
	return &CountriesGetNotFound{}
}

/*CountriesGetNotFound handles this case with default header values.

NOT_FOUND
*/
type CountriesGetNotFound struct {
	Payload string
}

func (o *CountriesGetNotFound) Error() string {
	return fmt.Sprintf("[GET /countries][%d] countriesGetNotFound  %+v", 404, o.Payload)
}

func (o *CountriesGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountriesGetMethodNotAllowed creates a CountriesGetMethodNotAllowed with default headers values
func NewCountriesGetMethodNotAllowed() *CountriesGetMethodNotAllowed {
	return &CountriesGetMethodNotAllowed{}
}

/*CountriesGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type CountriesGetMethodNotAllowed struct {
	Payload string
}

func (o *CountriesGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /countries][%d] countriesGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *CountriesGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountriesGetTooManyRequests creates a CountriesGetTooManyRequests with default headers values
func NewCountriesGetTooManyRequests() *CountriesGetTooManyRequests {
	return &CountriesGetTooManyRequests{}
}

/*CountriesGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type CountriesGetTooManyRequests struct {
	Payload string
}

func (o *CountriesGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /countries][%d] countriesGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *CountriesGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCountriesGetDefault creates a CountriesGetDefault with default headers values
func NewCountriesGetDefault(code int) *CountriesGetDefault {
	return &CountriesGetDefault{
		_statusCode: code,
	}
}

/*CountriesGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type CountriesGetDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the countries get default response
func (o *CountriesGetDefault) Code() int {
	return o._statusCode
}

func (o *CountriesGetDefault) Error() string {
	return fmt.Sprintf("[GET /countries][%d] CountriesGet default  %+v", o._statusCode, o.Payload)
}

func (o *CountriesGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
