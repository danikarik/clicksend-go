// Code generated by go-swagger; DO NOT EDIT.

package fax

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// FAXReceiptsReadPutReader is a Reader for the FAXReceiptsReadPut structure.
type FAXReceiptsReadPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FAXReceiptsReadPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFAXReceiptsReadPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewFAXReceiptsReadPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewFAXReceiptsReadPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFAXReceiptsReadPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFAXReceiptsReadPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewFAXReceiptsReadPutMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewFAXReceiptsReadPutTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewFAXReceiptsReadPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFAXReceiptsReadPutOK creates a FAXReceiptsReadPutOK with default headers values
func NewFAXReceiptsReadPutOK() *FAXReceiptsReadPutOK {
	return &FAXReceiptsReadPutOK{}
}

/*FAXReceiptsReadPutOK handles this case with default header values.

SUCCESS
*/
type FAXReceiptsReadPutOK struct {
	Payload interface{}
}

func (o *FAXReceiptsReadPutOK) Error() string {
	return fmt.Sprintf("[PUT /fax/receipts-read][%d] faxReceiptsReadPutOK  %+v", 200, o.Payload)
}

func (o *FAXReceiptsReadPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXReceiptsReadPutBadRequest creates a FAXReceiptsReadPutBadRequest with default headers values
func NewFAXReceiptsReadPutBadRequest() *FAXReceiptsReadPutBadRequest {
	return &FAXReceiptsReadPutBadRequest{}
}

/*FAXReceiptsReadPutBadRequest handles this case with default header values.

BAD_REQUEST
*/
type FAXReceiptsReadPutBadRequest struct {
	Payload interface{}
}

func (o *FAXReceiptsReadPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /fax/receipts-read][%d] faxReceiptsReadPutBadRequest  %+v", 400, o.Payload)
}

func (o *FAXReceiptsReadPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXReceiptsReadPutUnauthorized creates a FAXReceiptsReadPutUnauthorized with default headers values
func NewFAXReceiptsReadPutUnauthorized() *FAXReceiptsReadPutUnauthorized {
	return &FAXReceiptsReadPutUnauthorized{}
}

/*FAXReceiptsReadPutUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type FAXReceiptsReadPutUnauthorized struct {
	Payload interface{}
}

func (o *FAXReceiptsReadPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /fax/receipts-read][%d] faxReceiptsReadPutUnauthorized  %+v", 401, o.Payload)
}

func (o *FAXReceiptsReadPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXReceiptsReadPutForbidden creates a FAXReceiptsReadPutForbidden with default headers values
func NewFAXReceiptsReadPutForbidden() *FAXReceiptsReadPutForbidden {
	return &FAXReceiptsReadPutForbidden{}
}

/*FAXReceiptsReadPutForbidden handles this case with default header values.

FORBIDDEN
*/
type FAXReceiptsReadPutForbidden struct {
	Payload interface{}
}

func (o *FAXReceiptsReadPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /fax/receipts-read][%d] faxReceiptsReadPutForbidden  %+v", 403, o.Payload)
}

func (o *FAXReceiptsReadPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXReceiptsReadPutNotFound creates a FAXReceiptsReadPutNotFound with default headers values
func NewFAXReceiptsReadPutNotFound() *FAXReceiptsReadPutNotFound {
	return &FAXReceiptsReadPutNotFound{}
}

/*FAXReceiptsReadPutNotFound handles this case with default header values.

NOT_FOUND
*/
type FAXReceiptsReadPutNotFound struct {
	Payload interface{}
}

func (o *FAXReceiptsReadPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /fax/receipts-read][%d] faxReceiptsReadPutNotFound  %+v", 404, o.Payload)
}

func (o *FAXReceiptsReadPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXReceiptsReadPutMethodNotAllowed creates a FAXReceiptsReadPutMethodNotAllowed with default headers values
func NewFAXReceiptsReadPutMethodNotAllowed() *FAXReceiptsReadPutMethodNotAllowed {
	return &FAXReceiptsReadPutMethodNotAllowed{}
}

/*FAXReceiptsReadPutMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type FAXReceiptsReadPutMethodNotAllowed struct {
	Payload interface{}
}

func (o *FAXReceiptsReadPutMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /fax/receipts-read][%d] faxReceiptsReadPutMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *FAXReceiptsReadPutMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXReceiptsReadPutTooManyRequests creates a FAXReceiptsReadPutTooManyRequests with default headers values
func NewFAXReceiptsReadPutTooManyRequests() *FAXReceiptsReadPutTooManyRequests {
	return &FAXReceiptsReadPutTooManyRequests{}
}

/*FAXReceiptsReadPutTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type FAXReceiptsReadPutTooManyRequests struct {
	Payload interface{}
}

func (o *FAXReceiptsReadPutTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /fax/receipts-read][%d] faxReceiptsReadPutTooManyRequests  %+v", 429, o.Payload)
}

func (o *FAXReceiptsReadPutTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXReceiptsReadPutDefault creates a FAXReceiptsReadPutDefault with default headers values
func NewFAXReceiptsReadPutDefault(code int) *FAXReceiptsReadPutDefault {
	return &FAXReceiptsReadPutDefault{
		_statusCode: code,
	}
}

/*FAXReceiptsReadPutDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type FAXReceiptsReadPutDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the Fax receipts read put default response
func (o *FAXReceiptsReadPutDefault) Code() int {
	return o._statusCode
}

func (o *FAXReceiptsReadPutDefault) Error() string {
	return fmt.Sprintf("[PUT /fax/receipts-read][%d] FaxReceiptsReadPut default  %+v", o._statusCode, o.Payload)
}

func (o *FAXReceiptsReadPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
