// Code generated by go-swagger; DO NOT EDIT.

package fax

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFAXHistoryGetParams creates a new FAXHistoryGetParams object
// with the default values initialized.
func NewFAXHistoryGetParams() *FAXHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &FAXHistoryGetParams{
		Limit: &limitDefault,
		Page:  &pageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewFAXHistoryGetParamsWithTimeout creates a new FAXHistoryGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFAXHistoryGetParamsWithTimeout(timeout time.Duration) *FAXHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &FAXHistoryGetParams{
		Limit: &limitDefault,
		Page:  &pageDefault,

		timeout: timeout,
	}
}

// NewFAXHistoryGetParamsWithContext creates a new FAXHistoryGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewFAXHistoryGetParamsWithContext(ctx context.Context) *FAXHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &FAXHistoryGetParams{
		Limit: &limitDefault,
		Page:  &pageDefault,

		Context: ctx,
	}
}

// NewFAXHistoryGetParamsWithHTTPClient creates a new FAXHistoryGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFAXHistoryGetParamsWithHTTPClient(client *http.Client) *FAXHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &FAXHistoryGetParams{
		Limit:      &limitDefault,
		Page:       &pageDefault,
		HTTPClient: client,
	}
}

/*FAXHistoryGetParams contains all the parameters to send to the API endpoint
for the Fax history get operation typically these are written to a http.Request
*/
type FAXHistoryGetParams struct {

	/*DateFrom
	  Customize result by setting from date (timestsamp) Example: 1457572619.

	*/
	DateFrom *int32
	/*DateTo
	  Customize result by setting to date (timestamp) Example: 1457573000.

	*/
	DateTo *int32
	/*Limit
	  Number of records per page

	*/
	Limit *int32
	/*Order
	  Order result by Example: date_added:desc,list_id:desc.

	*/
	Order *string
	/*Page
	  Page number

	*/
	Page *int32
	/*Q
	  Custom query Example: status:Sent,status_code:201.

	*/
	Q *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the Fax history get params
func (o *FAXHistoryGetParams) WithTimeout(timeout time.Duration) *FAXHistoryGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the Fax history get params
func (o *FAXHistoryGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the Fax history get params
func (o *FAXHistoryGetParams) WithContext(ctx context.Context) *FAXHistoryGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the Fax history get params
func (o *FAXHistoryGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the Fax history get params
func (o *FAXHistoryGetParams) WithHTTPClient(client *http.Client) *FAXHistoryGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the Fax history get params
func (o *FAXHistoryGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateFrom adds the dateFrom to the Fax history get params
func (o *FAXHistoryGetParams) WithDateFrom(dateFrom *int32) *FAXHistoryGetParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the Fax history get params
func (o *FAXHistoryGetParams) SetDateFrom(dateFrom *int32) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the Fax history get params
func (o *FAXHistoryGetParams) WithDateTo(dateTo *int32) *FAXHistoryGetParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the Fax history get params
func (o *FAXHistoryGetParams) SetDateTo(dateTo *int32) {
	o.DateTo = dateTo
}

// WithLimit adds the limit to the Fax history get params
func (o *FAXHistoryGetParams) WithLimit(limit *int32) *FAXHistoryGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the Fax history get params
func (o *FAXHistoryGetParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOrder adds the order to the Fax history get params
func (o *FAXHistoryGetParams) WithOrder(order *string) *FAXHistoryGetParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the Fax history get params
func (o *FAXHistoryGetParams) SetOrder(order *string) {
	o.Order = order
}

// WithPage adds the page to the Fax history get params
func (o *FAXHistoryGetParams) WithPage(page *int32) *FAXHistoryGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the Fax history get params
func (o *FAXHistoryGetParams) SetPage(page *int32) {
	o.Page = page
}

// WithQ adds the q to the Fax history get params
func (o *FAXHistoryGetParams) WithQ(q *string) *FAXHistoryGetParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the Fax history get params
func (o *FAXHistoryGetParams) SetQ(q *string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *FAXHistoryGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateFrom != nil {

		// query param date_from
		var qrDateFrom int32
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := swag.FormatInt32(qrDateFrom)
		if qDateFrom != "" {
			if err := r.SetQueryParam("date_from", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param date_to
		var qrDateTo int32
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := swag.FormatInt32(qrDateTo)
		if qDateTo != "" {
			if err := r.SetQueryParam("date_to", qDateTo); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
