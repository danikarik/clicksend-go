// Code generated by go-swagger; DO NOT EDIT.

package fax

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// FAXHistoryGetReader is a Reader for the FAXHistoryGet structure.
type FAXHistoryGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FAXHistoryGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFAXHistoryGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewFAXHistoryGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewFAXHistoryGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFAXHistoryGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFAXHistoryGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewFAXHistoryGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewFAXHistoryGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewFAXHistoryGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFAXHistoryGetOK creates a FAXHistoryGetOK with default headers values
func NewFAXHistoryGetOK() *FAXHistoryGetOK {
	return &FAXHistoryGetOK{}
}

/*FAXHistoryGetOK handles this case with default header values.

SUCCESS
*/
type FAXHistoryGetOK struct {
	Payload string
}

func (o *FAXHistoryGetOK) Error() string {
	return fmt.Sprintf("[GET /fax/history][%d] faxHistoryGetOK  %+v", 200, o.Payload)
}

func (o *FAXHistoryGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXHistoryGetBadRequest creates a FAXHistoryGetBadRequest with default headers values
func NewFAXHistoryGetBadRequest() *FAXHistoryGetBadRequest {
	return &FAXHistoryGetBadRequest{}
}

/*FAXHistoryGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type FAXHistoryGetBadRequest struct {
	Payload string
}

func (o *FAXHistoryGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /fax/history][%d] faxHistoryGetBadRequest  %+v", 400, o.Payload)
}

func (o *FAXHistoryGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXHistoryGetUnauthorized creates a FAXHistoryGetUnauthorized with default headers values
func NewFAXHistoryGetUnauthorized() *FAXHistoryGetUnauthorized {
	return &FAXHistoryGetUnauthorized{}
}

/*FAXHistoryGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type FAXHistoryGetUnauthorized struct {
	Payload string
}

func (o *FAXHistoryGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fax/history][%d] faxHistoryGetUnauthorized  %+v", 401, o.Payload)
}

func (o *FAXHistoryGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXHistoryGetForbidden creates a FAXHistoryGetForbidden with default headers values
func NewFAXHistoryGetForbidden() *FAXHistoryGetForbidden {
	return &FAXHistoryGetForbidden{}
}

/*FAXHistoryGetForbidden handles this case with default header values.

FORBIDDEN
*/
type FAXHistoryGetForbidden struct {
	Payload string
}

func (o *FAXHistoryGetForbidden) Error() string {
	return fmt.Sprintf("[GET /fax/history][%d] faxHistoryGetForbidden  %+v", 403, o.Payload)
}

func (o *FAXHistoryGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXHistoryGetNotFound creates a FAXHistoryGetNotFound with default headers values
func NewFAXHistoryGetNotFound() *FAXHistoryGetNotFound {
	return &FAXHistoryGetNotFound{}
}

/*FAXHistoryGetNotFound handles this case with default header values.

NOT_FOUND
*/
type FAXHistoryGetNotFound struct {
	Payload string
}

func (o *FAXHistoryGetNotFound) Error() string {
	return fmt.Sprintf("[GET /fax/history][%d] faxHistoryGetNotFound  %+v", 404, o.Payload)
}

func (o *FAXHistoryGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXHistoryGetMethodNotAllowed creates a FAXHistoryGetMethodNotAllowed with default headers values
func NewFAXHistoryGetMethodNotAllowed() *FAXHistoryGetMethodNotAllowed {
	return &FAXHistoryGetMethodNotAllowed{}
}

/*FAXHistoryGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type FAXHistoryGetMethodNotAllowed struct {
	Payload string
}

func (o *FAXHistoryGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /fax/history][%d] faxHistoryGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *FAXHistoryGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXHistoryGetTooManyRequests creates a FAXHistoryGetTooManyRequests with default headers values
func NewFAXHistoryGetTooManyRequests() *FAXHistoryGetTooManyRequests {
	return &FAXHistoryGetTooManyRequests{}
}

/*FAXHistoryGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type FAXHistoryGetTooManyRequests struct {
	Payload string
}

func (o *FAXHistoryGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fax/history][%d] faxHistoryGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *FAXHistoryGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXHistoryGetDefault creates a FAXHistoryGetDefault with default headers values
func NewFAXHistoryGetDefault(code int) *FAXHistoryGetDefault {
	return &FAXHistoryGetDefault{
		_statusCode: code,
	}
}

/*FAXHistoryGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type FAXHistoryGetDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the Fax history get default response
func (o *FAXHistoryGetDefault) Code() int {
	return o._statusCode
}

func (o *FAXHistoryGetDefault) Error() string {
	return fmt.Sprintf("[GET /fax/history][%d] FaxHistoryGet default  %+v", o._statusCode, o.Payload)
}

func (o *FAXHistoryGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
