// Code generated by go-swagger; DO NOT EDIT.

package fax

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fax API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fax API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
FAXHistoryGet gets a list of Fax history

Get a list of Fax History.
*/
func (a *Client) FAXHistoryGet(params *FAXHistoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*FAXHistoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXHistoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxHistoryGet",
		Method:             "GET",
		PathPattern:        "/fax/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXHistoryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXHistoryGetOK), nil

}

/*
FAXPricePost calculates total price for Fax messages sent

Calculate Total Price for Fax Messages sent
*/
func (a *Client) FAXPricePost(params *FAXPricePostParams, authInfo runtime.ClientAuthInfoWriter) (*FAXPricePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXPricePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxPricePost",
		Method:             "POST",
		PathPattern:        "/fax/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXPricePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXPricePostOK), nil

}

/*
FAXReceiptsByMessageIDGet gets a single fax receipt based on message id

Get a single fax receipt based on message id.
*/
func (a *Client) FAXReceiptsByMessageIDGet(params *FAXReceiptsByMessageIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*FAXReceiptsByMessageIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXReceiptsByMessageIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxReceiptsByMessageIdGet",
		Method:             "GET",
		PathPattern:        "/fax/receipts/{message_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXReceiptsByMessageIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXReceiptsByMessageIDGetOK), nil

}

/*
FAXReceiptsGet gets all delivery receipts

Get all delivery receipts
*/
func (a *Client) FAXReceiptsGet(params *FAXReceiptsGetParams, authInfo runtime.ClientAuthInfoWriter) (*FAXReceiptsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXReceiptsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxReceiptsGet",
		Method:             "GET",
		PathPattern:        "/fax/receipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXReceiptsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXReceiptsGetOK), nil

}

/*
FAXReceiptsPost adds a delivery receipt

Add a delivery receipt
*/
func (a *Client) FAXReceiptsPost(params *FAXReceiptsPostParams, authInfo runtime.ClientAuthInfoWriter) (*FAXReceiptsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXReceiptsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxReceiptsPost",
		Method:             "POST",
		PathPattern:        "/fax/receipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXReceiptsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXReceiptsPostOK), nil

}

/*
FAXReceiptsReadPut marks delivery receipts as read

Mark delivery receipts as read
*/
func (a *Client) FAXReceiptsReadPut(params *FAXReceiptsReadPutParams, authInfo runtime.ClientAuthInfoWriter) (*FAXReceiptsReadPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXReceiptsReadPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxReceiptsReadPut",
		Method:             "PUT",
		PathPattern:        "/fax/receipts-read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXReceiptsReadPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXReceiptsReadPutOK), nil

}

/*
FAXSendPost sends a fax using supplied supported file types

Send a fax using supplied supported file-types.
*/
func (a *Client) FAXSendPost(params *FAXSendPostParams, authInfo runtime.ClientAuthInfoWriter) (*FAXSendPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXSendPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxSendPost",
		Method:             "POST",
		PathPattern:        "/fax/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXSendPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXSendPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
