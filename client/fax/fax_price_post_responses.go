// Code generated by go-swagger; DO NOT EDIT.

package fax

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// FAXPricePostReader is a Reader for the FAXPricePost structure.
type FAXPricePostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FAXPricePostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFAXPricePostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewFAXPricePostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewFAXPricePostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFAXPricePostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFAXPricePostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewFAXPricePostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewFAXPricePostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewFAXPricePostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFAXPricePostOK creates a FAXPricePostOK with default headers values
func NewFAXPricePostOK() *FAXPricePostOK {
	return &FAXPricePostOK{}
}

/*FAXPricePostOK handles this case with default header values.

SUCCESS
*/
type FAXPricePostOK struct {
	Payload interface{}
}

func (o *FAXPricePostOK) Error() string {
	return fmt.Sprintf("[POST /fax/price][%d] faxPricePostOK  %+v", 200, o.Payload)
}

func (o *FAXPricePostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXPricePostBadRequest creates a FAXPricePostBadRequest with default headers values
func NewFAXPricePostBadRequest() *FAXPricePostBadRequest {
	return &FAXPricePostBadRequest{}
}

/*FAXPricePostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type FAXPricePostBadRequest struct {
	Payload interface{}
}

func (o *FAXPricePostBadRequest) Error() string {
	return fmt.Sprintf("[POST /fax/price][%d] faxPricePostBadRequest  %+v", 400, o.Payload)
}

func (o *FAXPricePostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXPricePostUnauthorized creates a FAXPricePostUnauthorized with default headers values
func NewFAXPricePostUnauthorized() *FAXPricePostUnauthorized {
	return &FAXPricePostUnauthorized{}
}

/*FAXPricePostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type FAXPricePostUnauthorized struct {
	Payload interface{}
}

func (o *FAXPricePostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fax/price][%d] faxPricePostUnauthorized  %+v", 401, o.Payload)
}

func (o *FAXPricePostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXPricePostForbidden creates a FAXPricePostForbidden with default headers values
func NewFAXPricePostForbidden() *FAXPricePostForbidden {
	return &FAXPricePostForbidden{}
}

/*FAXPricePostForbidden handles this case with default header values.

FORBIDDEN
*/
type FAXPricePostForbidden struct {
	Payload interface{}
}

func (o *FAXPricePostForbidden) Error() string {
	return fmt.Sprintf("[POST /fax/price][%d] faxPricePostForbidden  %+v", 403, o.Payload)
}

func (o *FAXPricePostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXPricePostNotFound creates a FAXPricePostNotFound with default headers values
func NewFAXPricePostNotFound() *FAXPricePostNotFound {
	return &FAXPricePostNotFound{}
}

/*FAXPricePostNotFound handles this case with default header values.

NOT_FOUND
*/
type FAXPricePostNotFound struct {
	Payload interface{}
}

func (o *FAXPricePostNotFound) Error() string {
	return fmt.Sprintf("[POST /fax/price][%d] faxPricePostNotFound  %+v", 404, o.Payload)
}

func (o *FAXPricePostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXPricePostMethodNotAllowed creates a FAXPricePostMethodNotAllowed with default headers values
func NewFAXPricePostMethodNotAllowed() *FAXPricePostMethodNotAllowed {
	return &FAXPricePostMethodNotAllowed{}
}

/*FAXPricePostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type FAXPricePostMethodNotAllowed struct {
	Payload interface{}
}

func (o *FAXPricePostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /fax/price][%d] faxPricePostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *FAXPricePostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXPricePostTooManyRequests creates a FAXPricePostTooManyRequests with default headers values
func NewFAXPricePostTooManyRequests() *FAXPricePostTooManyRequests {
	return &FAXPricePostTooManyRequests{}
}

/*FAXPricePostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type FAXPricePostTooManyRequests struct {
	Payload interface{}
}

func (o *FAXPricePostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fax/price][%d] faxPricePostTooManyRequests  %+v", 429, o.Payload)
}

func (o *FAXPricePostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXPricePostDefault creates a FAXPricePostDefault with default headers values
func NewFAXPricePostDefault(code int) *FAXPricePostDefault {
	return &FAXPricePostDefault{
		_statusCode: code,
	}
}

/*FAXPricePostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type FAXPricePostDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the Fax price post default response
func (o *FAXPricePostDefault) Code() int {
	return o._statusCode
}

func (o *FAXPricePostDefault) Error() string {
	return fmt.Sprintf("[POST /fax/price][%d] FaxPricePost default  %+v", o._statusCode, o.Payload)
}

func (o *FAXPricePostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
