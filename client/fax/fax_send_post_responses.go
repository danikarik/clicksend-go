// Code generated by go-swagger; DO NOT EDIT.

package fax

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// FAXSendPostReader is a Reader for the FAXSendPost structure.
type FAXSendPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FAXSendPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFAXSendPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewFAXSendPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewFAXSendPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFAXSendPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFAXSendPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewFAXSendPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewFAXSendPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewFAXSendPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFAXSendPostOK creates a FAXSendPostOK with default headers values
func NewFAXSendPostOK() *FAXSendPostOK {
	return &FAXSendPostOK{}
}

/*FAXSendPostOK handles this case with default header values.

SUCCESS
*/
type FAXSendPostOK struct {
	Payload interface{}
}

func (o *FAXSendPostOK) Error() string {
	return fmt.Sprintf("[POST /fax/send][%d] faxSendPostOK  %+v", 200, o.Payload)
}

func (o *FAXSendPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXSendPostBadRequest creates a FAXSendPostBadRequest with default headers values
func NewFAXSendPostBadRequest() *FAXSendPostBadRequest {
	return &FAXSendPostBadRequest{}
}

/*FAXSendPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type FAXSendPostBadRequest struct {
	Payload interface{}
}

func (o *FAXSendPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /fax/send][%d] faxSendPostBadRequest  %+v", 400, o.Payload)
}

func (o *FAXSendPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXSendPostUnauthorized creates a FAXSendPostUnauthorized with default headers values
func NewFAXSendPostUnauthorized() *FAXSendPostUnauthorized {
	return &FAXSendPostUnauthorized{}
}

/*FAXSendPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type FAXSendPostUnauthorized struct {
	Payload interface{}
}

func (o *FAXSendPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fax/send][%d] faxSendPostUnauthorized  %+v", 401, o.Payload)
}

func (o *FAXSendPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXSendPostForbidden creates a FAXSendPostForbidden with default headers values
func NewFAXSendPostForbidden() *FAXSendPostForbidden {
	return &FAXSendPostForbidden{}
}

/*FAXSendPostForbidden handles this case with default header values.

FORBIDDEN
*/
type FAXSendPostForbidden struct {
	Payload interface{}
}

func (o *FAXSendPostForbidden) Error() string {
	return fmt.Sprintf("[POST /fax/send][%d] faxSendPostForbidden  %+v", 403, o.Payload)
}

func (o *FAXSendPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXSendPostNotFound creates a FAXSendPostNotFound with default headers values
func NewFAXSendPostNotFound() *FAXSendPostNotFound {
	return &FAXSendPostNotFound{}
}

/*FAXSendPostNotFound handles this case with default header values.

NOT_FOUND
*/
type FAXSendPostNotFound struct {
	Payload interface{}
}

func (o *FAXSendPostNotFound) Error() string {
	return fmt.Sprintf("[POST /fax/send][%d] faxSendPostNotFound  %+v", 404, o.Payload)
}

func (o *FAXSendPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXSendPostMethodNotAllowed creates a FAXSendPostMethodNotAllowed with default headers values
func NewFAXSendPostMethodNotAllowed() *FAXSendPostMethodNotAllowed {
	return &FAXSendPostMethodNotAllowed{}
}

/*FAXSendPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type FAXSendPostMethodNotAllowed struct {
	Payload interface{}
}

func (o *FAXSendPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /fax/send][%d] faxSendPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *FAXSendPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXSendPostTooManyRequests creates a FAXSendPostTooManyRequests with default headers values
func NewFAXSendPostTooManyRequests() *FAXSendPostTooManyRequests {
	return &FAXSendPostTooManyRequests{}
}

/*FAXSendPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type FAXSendPostTooManyRequests struct {
	Payload interface{}
}

func (o *FAXSendPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fax/send][%d] faxSendPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *FAXSendPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXSendPostDefault creates a FAXSendPostDefault with default headers values
func NewFAXSendPostDefault(code int) *FAXSendPostDefault {
	return &FAXSendPostDefault{
		_statusCode: code,
	}
}

/*FAXSendPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type FAXSendPostDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the Fax send post default response
func (o *FAXSendPostDefault) Code() int {
	return o._statusCode
}

func (o *FAXSendPostDefault) Error() string {
	return fmt.Sprintf("[POST /fax/send][%d] FaxSendPost default  %+v", o._statusCode, o.Payload)
}

func (o *FAXSendPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
