// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SMSHistoryGetReader is a Reader for the SMSHistoryGet structure.
type SMSHistoryGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SMSHistoryGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSMSHistoryGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSMSHistoryGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSMSHistoryGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSMSHistoryGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSMSHistoryGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSMSHistoryGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSMSHistoryGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSMSHistoryGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSMSHistoryGetOK creates a SMSHistoryGetOK with default headers values
func NewSMSHistoryGetOK() *SMSHistoryGetOK {
	return &SMSHistoryGetOK{}
}

/*SMSHistoryGetOK handles this case with default header values.

SUCCESS
*/
type SMSHistoryGetOK struct {
	Payload interface{}
}

func (o *SMSHistoryGetOK) Error() string {
	return fmt.Sprintf("[GET /sms/history][%d] smsHistoryGetOK  %+v", 200, o.Payload)
}

func (o *SMSHistoryGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSHistoryGetBadRequest creates a SMSHistoryGetBadRequest with default headers values
func NewSMSHistoryGetBadRequest() *SMSHistoryGetBadRequest {
	return &SMSHistoryGetBadRequest{}
}

/*SMSHistoryGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SMSHistoryGetBadRequest struct {
	Payload interface{}
}

func (o *SMSHistoryGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /sms/history][%d] smsHistoryGetBadRequest  %+v", 400, o.Payload)
}

func (o *SMSHistoryGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSHistoryGetUnauthorized creates a SMSHistoryGetUnauthorized with default headers values
func NewSMSHistoryGetUnauthorized() *SMSHistoryGetUnauthorized {
	return &SMSHistoryGetUnauthorized{}
}

/*SMSHistoryGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SMSHistoryGetUnauthorized struct {
	Payload interface{}
}

func (o *SMSHistoryGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sms/history][%d] smsHistoryGetUnauthorized  %+v", 401, o.Payload)
}

func (o *SMSHistoryGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSHistoryGetForbidden creates a SMSHistoryGetForbidden with default headers values
func NewSMSHistoryGetForbidden() *SMSHistoryGetForbidden {
	return &SMSHistoryGetForbidden{}
}

/*SMSHistoryGetForbidden handles this case with default header values.

FORBIDDEN
*/
type SMSHistoryGetForbidden struct {
	Payload interface{}
}

func (o *SMSHistoryGetForbidden) Error() string {
	return fmt.Sprintf("[GET /sms/history][%d] smsHistoryGetForbidden  %+v", 403, o.Payload)
}

func (o *SMSHistoryGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSHistoryGetNotFound creates a SMSHistoryGetNotFound with default headers values
func NewSMSHistoryGetNotFound() *SMSHistoryGetNotFound {
	return &SMSHistoryGetNotFound{}
}

/*SMSHistoryGetNotFound handles this case with default header values.

NOT_FOUND
*/
type SMSHistoryGetNotFound struct {
	Payload interface{}
}

func (o *SMSHistoryGetNotFound) Error() string {
	return fmt.Sprintf("[GET /sms/history][%d] smsHistoryGetNotFound  %+v", 404, o.Payload)
}

func (o *SMSHistoryGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSHistoryGetMethodNotAllowed creates a SMSHistoryGetMethodNotAllowed with default headers values
func NewSMSHistoryGetMethodNotAllowed() *SMSHistoryGetMethodNotAllowed {
	return &SMSHistoryGetMethodNotAllowed{}
}

/*SMSHistoryGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SMSHistoryGetMethodNotAllowed struct {
	Payload interface{}
}

func (o *SMSHistoryGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /sms/history][%d] smsHistoryGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SMSHistoryGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSHistoryGetTooManyRequests creates a SMSHistoryGetTooManyRequests with default headers values
func NewSMSHistoryGetTooManyRequests() *SMSHistoryGetTooManyRequests {
	return &SMSHistoryGetTooManyRequests{}
}

/*SMSHistoryGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SMSHistoryGetTooManyRequests struct {
	Payload interface{}
}

func (o *SMSHistoryGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sms/history][%d] smsHistoryGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *SMSHistoryGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSHistoryGetDefault creates a SMSHistoryGetDefault with default headers values
func NewSMSHistoryGetDefault(code int) *SMSHistoryGetDefault {
	return &SMSHistoryGetDefault{
		_statusCode: code,
	}
}

/*SMSHistoryGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SMSHistoryGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the Sms history get default response
func (o *SMSHistoryGetDefault) Code() int {
	return o._statusCode
}

func (o *SMSHistoryGetDefault) Error() string {
	return fmt.Sprintf("[GET /sms/history][%d] SmsHistoryGet default  %+v", o._statusCode, o.Payload)
}

func (o *SMSHistoryGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
