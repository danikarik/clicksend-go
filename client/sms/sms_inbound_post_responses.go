// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SMSInboundPostReader is a Reader for the SMSInboundPost structure.
type SMSInboundPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SMSInboundPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSMSInboundPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSMSInboundPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSMSInboundPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSMSInboundPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSMSInboundPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSMSInboundPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSMSInboundPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSMSInboundPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSMSInboundPostOK creates a SMSInboundPostOK with default headers values
func NewSMSInboundPostOK() *SMSInboundPostOK {
	return &SMSInboundPostOK{}
}

/*SMSInboundPostOK handles this case with default header values.

SUCCESS
*/
type SMSInboundPostOK struct {
	Payload string
}

func (o *SMSInboundPostOK) Error() string {
	return fmt.Sprintf("[POST /sms/inbound][%d] smsInboundPostOK  %+v", 200, o.Payload)
}

func (o *SMSInboundPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundPostBadRequest creates a SMSInboundPostBadRequest with default headers values
func NewSMSInboundPostBadRequest() *SMSInboundPostBadRequest {
	return &SMSInboundPostBadRequest{}
}

/*SMSInboundPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SMSInboundPostBadRequest struct {
	Payload string
}

func (o *SMSInboundPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /sms/inbound][%d] smsInboundPostBadRequest  %+v", 400, o.Payload)
}

func (o *SMSInboundPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundPostUnauthorized creates a SMSInboundPostUnauthorized with default headers values
func NewSMSInboundPostUnauthorized() *SMSInboundPostUnauthorized {
	return &SMSInboundPostUnauthorized{}
}

/*SMSInboundPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SMSInboundPostUnauthorized struct {
	Payload string
}

func (o *SMSInboundPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /sms/inbound][%d] smsInboundPostUnauthorized  %+v", 401, o.Payload)
}

func (o *SMSInboundPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundPostForbidden creates a SMSInboundPostForbidden with default headers values
func NewSMSInboundPostForbidden() *SMSInboundPostForbidden {
	return &SMSInboundPostForbidden{}
}

/*SMSInboundPostForbidden handles this case with default header values.

FORBIDDEN
*/
type SMSInboundPostForbidden struct {
	Payload string
}

func (o *SMSInboundPostForbidden) Error() string {
	return fmt.Sprintf("[POST /sms/inbound][%d] smsInboundPostForbidden  %+v", 403, o.Payload)
}

func (o *SMSInboundPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundPostNotFound creates a SMSInboundPostNotFound with default headers values
func NewSMSInboundPostNotFound() *SMSInboundPostNotFound {
	return &SMSInboundPostNotFound{}
}

/*SMSInboundPostNotFound handles this case with default header values.

NOT_FOUND
*/
type SMSInboundPostNotFound struct {
	Payload string
}

func (o *SMSInboundPostNotFound) Error() string {
	return fmt.Sprintf("[POST /sms/inbound][%d] smsInboundPostNotFound  %+v", 404, o.Payload)
}

func (o *SMSInboundPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundPostMethodNotAllowed creates a SMSInboundPostMethodNotAllowed with default headers values
func NewSMSInboundPostMethodNotAllowed() *SMSInboundPostMethodNotAllowed {
	return &SMSInboundPostMethodNotAllowed{}
}

/*SMSInboundPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SMSInboundPostMethodNotAllowed struct {
	Payload string
}

func (o *SMSInboundPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /sms/inbound][%d] smsInboundPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SMSInboundPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundPostTooManyRequests creates a SMSInboundPostTooManyRequests with default headers values
func NewSMSInboundPostTooManyRequests() *SMSInboundPostTooManyRequests {
	return &SMSInboundPostTooManyRequests{}
}

/*SMSInboundPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SMSInboundPostTooManyRequests struct {
	Payload string
}

func (o *SMSInboundPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /sms/inbound][%d] smsInboundPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *SMSInboundPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundPostDefault creates a SMSInboundPostDefault with default headers values
func NewSMSInboundPostDefault(code int) *SMSInboundPostDefault {
	return &SMSInboundPostDefault{
		_statusCode: code,
	}
}

/*SMSInboundPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SMSInboundPostDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the Sms inbound post default response
func (o *SMSInboundPostDefault) Code() int {
	return o._statusCode
}

func (o *SMSInboundPostDefault) Error() string {
	return fmt.Sprintf("[POST /sms/inbound][%d] SmsInboundPost default  %+v", o._statusCode, o.Payload)
}

func (o *SMSInboundPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
