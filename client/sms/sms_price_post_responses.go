// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SMSPricePostReader is a Reader for the SMSPricePost structure.
type SMSPricePostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SMSPricePostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSMSPricePostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSMSPricePostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSMSPricePostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSMSPricePostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSMSPricePostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSMSPricePostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSMSPricePostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSMSPricePostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSMSPricePostOK creates a SMSPricePostOK with default headers values
func NewSMSPricePostOK() *SMSPricePostOK {
	return &SMSPricePostOK{}
}

/*SMSPricePostOK handles this case with default header values.

SUCCESS
*/
type SMSPricePostOK struct {
	Payload interface{}
}

func (o *SMSPricePostOK) Error() string {
	return fmt.Sprintf("[POST /sms/price][%d] smsPricePostOK  %+v", 200, o.Payload)
}

func (o *SMSPricePostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSPricePostBadRequest creates a SMSPricePostBadRequest with default headers values
func NewSMSPricePostBadRequest() *SMSPricePostBadRequest {
	return &SMSPricePostBadRequest{}
}

/*SMSPricePostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SMSPricePostBadRequest struct {
	Payload interface{}
}

func (o *SMSPricePostBadRequest) Error() string {
	return fmt.Sprintf("[POST /sms/price][%d] smsPricePostBadRequest  %+v", 400, o.Payload)
}

func (o *SMSPricePostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSPricePostUnauthorized creates a SMSPricePostUnauthorized with default headers values
func NewSMSPricePostUnauthorized() *SMSPricePostUnauthorized {
	return &SMSPricePostUnauthorized{}
}

/*SMSPricePostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SMSPricePostUnauthorized struct {
	Payload interface{}
}

func (o *SMSPricePostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /sms/price][%d] smsPricePostUnauthorized  %+v", 401, o.Payload)
}

func (o *SMSPricePostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSPricePostForbidden creates a SMSPricePostForbidden with default headers values
func NewSMSPricePostForbidden() *SMSPricePostForbidden {
	return &SMSPricePostForbidden{}
}

/*SMSPricePostForbidden handles this case with default header values.

FORBIDDEN
*/
type SMSPricePostForbidden struct {
	Payload interface{}
}

func (o *SMSPricePostForbidden) Error() string {
	return fmt.Sprintf("[POST /sms/price][%d] smsPricePostForbidden  %+v", 403, o.Payload)
}

func (o *SMSPricePostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSPricePostNotFound creates a SMSPricePostNotFound with default headers values
func NewSMSPricePostNotFound() *SMSPricePostNotFound {
	return &SMSPricePostNotFound{}
}

/*SMSPricePostNotFound handles this case with default header values.

NOT_FOUND
*/
type SMSPricePostNotFound struct {
	Payload interface{}
}

func (o *SMSPricePostNotFound) Error() string {
	return fmt.Sprintf("[POST /sms/price][%d] smsPricePostNotFound  %+v", 404, o.Payload)
}

func (o *SMSPricePostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSPricePostMethodNotAllowed creates a SMSPricePostMethodNotAllowed with default headers values
func NewSMSPricePostMethodNotAllowed() *SMSPricePostMethodNotAllowed {
	return &SMSPricePostMethodNotAllowed{}
}

/*SMSPricePostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SMSPricePostMethodNotAllowed struct {
	Payload interface{}
}

func (o *SMSPricePostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /sms/price][%d] smsPricePostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SMSPricePostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSPricePostTooManyRequests creates a SMSPricePostTooManyRequests with default headers values
func NewSMSPricePostTooManyRequests() *SMSPricePostTooManyRequests {
	return &SMSPricePostTooManyRequests{}
}

/*SMSPricePostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SMSPricePostTooManyRequests struct {
	Payload interface{}
}

func (o *SMSPricePostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /sms/price][%d] smsPricePostTooManyRequests  %+v", 429, o.Payload)
}

func (o *SMSPricePostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSPricePostDefault creates a SMSPricePostDefault with default headers values
func NewSMSPricePostDefault(code int) *SMSPricePostDefault {
	return &SMSPricePostDefault{
		_statusCode: code,
	}
}

/*SMSPricePostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SMSPricePostDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the Sms price post default response
func (o *SMSPricePostDefault) Code() int {
	return o._statusCode
}

func (o *SMSPricePostDefault) Error() string {
	return fmt.Sprintf("[POST /sms/price][%d] SmsPricePost default  %+v", o._statusCode, o.Payload)
}

func (o *SMSPricePostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
