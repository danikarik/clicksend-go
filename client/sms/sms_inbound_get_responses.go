// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SMSInboundGetReader is a Reader for the SMSInboundGet structure.
type SMSInboundGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SMSInboundGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSMSInboundGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSMSInboundGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSMSInboundGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSMSInboundGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSMSInboundGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSMSInboundGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSMSInboundGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSMSInboundGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSMSInboundGetOK creates a SMSInboundGetOK with default headers values
func NewSMSInboundGetOK() *SMSInboundGetOK {
	return &SMSInboundGetOK{}
}

/*SMSInboundGetOK handles this case with default header values.

SUCCESS
*/
type SMSInboundGetOK struct {
	Payload string
}

func (o *SMSInboundGetOK) Error() string {
	return fmt.Sprintf("[GET /sms/inbound][%d] smsInboundGetOK  %+v", 200, o.Payload)
}

func (o *SMSInboundGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundGetBadRequest creates a SMSInboundGetBadRequest with default headers values
func NewSMSInboundGetBadRequest() *SMSInboundGetBadRequest {
	return &SMSInboundGetBadRequest{}
}

/*SMSInboundGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SMSInboundGetBadRequest struct {
	Payload string
}

func (o *SMSInboundGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /sms/inbound][%d] smsInboundGetBadRequest  %+v", 400, o.Payload)
}

func (o *SMSInboundGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundGetUnauthorized creates a SMSInboundGetUnauthorized with default headers values
func NewSMSInboundGetUnauthorized() *SMSInboundGetUnauthorized {
	return &SMSInboundGetUnauthorized{}
}

/*SMSInboundGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SMSInboundGetUnauthorized struct {
	Payload string
}

func (o *SMSInboundGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sms/inbound][%d] smsInboundGetUnauthorized  %+v", 401, o.Payload)
}

func (o *SMSInboundGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundGetForbidden creates a SMSInboundGetForbidden with default headers values
func NewSMSInboundGetForbidden() *SMSInboundGetForbidden {
	return &SMSInboundGetForbidden{}
}

/*SMSInboundGetForbidden handles this case with default header values.

FORBIDDEN
*/
type SMSInboundGetForbidden struct {
	Payload string
}

func (o *SMSInboundGetForbidden) Error() string {
	return fmt.Sprintf("[GET /sms/inbound][%d] smsInboundGetForbidden  %+v", 403, o.Payload)
}

func (o *SMSInboundGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundGetNotFound creates a SMSInboundGetNotFound with default headers values
func NewSMSInboundGetNotFound() *SMSInboundGetNotFound {
	return &SMSInboundGetNotFound{}
}

/*SMSInboundGetNotFound handles this case with default header values.

NOT_FOUND
*/
type SMSInboundGetNotFound struct {
	Payload string
}

func (o *SMSInboundGetNotFound) Error() string {
	return fmt.Sprintf("[GET /sms/inbound][%d] smsInboundGetNotFound  %+v", 404, o.Payload)
}

func (o *SMSInboundGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundGetMethodNotAllowed creates a SMSInboundGetMethodNotAllowed with default headers values
func NewSMSInboundGetMethodNotAllowed() *SMSInboundGetMethodNotAllowed {
	return &SMSInboundGetMethodNotAllowed{}
}

/*SMSInboundGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SMSInboundGetMethodNotAllowed struct {
	Payload string
}

func (o *SMSInboundGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /sms/inbound][%d] smsInboundGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SMSInboundGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundGetTooManyRequests creates a SMSInboundGetTooManyRequests with default headers values
func NewSMSInboundGetTooManyRequests() *SMSInboundGetTooManyRequests {
	return &SMSInboundGetTooManyRequests{}
}

/*SMSInboundGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SMSInboundGetTooManyRequests struct {
	Payload string
}

func (o *SMSInboundGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sms/inbound][%d] smsInboundGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *SMSInboundGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSInboundGetDefault creates a SMSInboundGetDefault with default headers values
func NewSMSInboundGetDefault(code int) *SMSInboundGetDefault {
	return &SMSInboundGetDefault{
		_statusCode: code,
	}
}

/*SMSInboundGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SMSInboundGetDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the Sms inbound get default response
func (o *SMSInboundGetDefault) Code() int {
	return o._statusCode
}

func (o *SMSInboundGetDefault) Error() string {
	return fmt.Sprintf("[GET /sms/inbound][%d] SmsInboundGet default  %+v", o._statusCode, o.Payload)
}

func (o *SMSInboundGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
