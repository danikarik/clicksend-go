// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SMSCancelAllPutReader is a Reader for the SMSCancelAllPut structure.
type SMSCancelAllPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SMSCancelAllPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSMSCancelAllPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSMSCancelAllPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSMSCancelAllPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSMSCancelAllPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSMSCancelAllPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSMSCancelAllPutMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSMSCancelAllPutTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSMSCancelAllPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSMSCancelAllPutOK creates a SMSCancelAllPutOK with default headers values
func NewSMSCancelAllPutOK() *SMSCancelAllPutOK {
	return &SMSCancelAllPutOK{}
}

/*SMSCancelAllPutOK handles this case with default header values.

SUCCESS
*/
type SMSCancelAllPutOK struct {
	Payload interface{}
}

func (o *SMSCancelAllPutOK) Error() string {
	return fmt.Sprintf("[PUT /sms/cancel-all][%d] smsCancelAllPutOK  %+v", 200, o.Payload)
}

func (o *SMSCancelAllPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSCancelAllPutBadRequest creates a SMSCancelAllPutBadRequest with default headers values
func NewSMSCancelAllPutBadRequest() *SMSCancelAllPutBadRequest {
	return &SMSCancelAllPutBadRequest{}
}

/*SMSCancelAllPutBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SMSCancelAllPutBadRequest struct {
	Payload interface{}
}

func (o *SMSCancelAllPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /sms/cancel-all][%d] smsCancelAllPutBadRequest  %+v", 400, o.Payload)
}

func (o *SMSCancelAllPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSCancelAllPutUnauthorized creates a SMSCancelAllPutUnauthorized with default headers values
func NewSMSCancelAllPutUnauthorized() *SMSCancelAllPutUnauthorized {
	return &SMSCancelAllPutUnauthorized{}
}

/*SMSCancelAllPutUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SMSCancelAllPutUnauthorized struct {
	Payload interface{}
}

func (o *SMSCancelAllPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /sms/cancel-all][%d] smsCancelAllPutUnauthorized  %+v", 401, o.Payload)
}

func (o *SMSCancelAllPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSCancelAllPutForbidden creates a SMSCancelAllPutForbidden with default headers values
func NewSMSCancelAllPutForbidden() *SMSCancelAllPutForbidden {
	return &SMSCancelAllPutForbidden{}
}

/*SMSCancelAllPutForbidden handles this case with default header values.

FORBIDDEN
*/
type SMSCancelAllPutForbidden struct {
	Payload interface{}
}

func (o *SMSCancelAllPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /sms/cancel-all][%d] smsCancelAllPutForbidden  %+v", 403, o.Payload)
}

func (o *SMSCancelAllPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSCancelAllPutNotFound creates a SMSCancelAllPutNotFound with default headers values
func NewSMSCancelAllPutNotFound() *SMSCancelAllPutNotFound {
	return &SMSCancelAllPutNotFound{}
}

/*SMSCancelAllPutNotFound handles this case with default header values.

NOT_FOUND
*/
type SMSCancelAllPutNotFound struct {
	Payload interface{}
}

func (o *SMSCancelAllPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /sms/cancel-all][%d] smsCancelAllPutNotFound  %+v", 404, o.Payload)
}

func (o *SMSCancelAllPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSCancelAllPutMethodNotAllowed creates a SMSCancelAllPutMethodNotAllowed with default headers values
func NewSMSCancelAllPutMethodNotAllowed() *SMSCancelAllPutMethodNotAllowed {
	return &SMSCancelAllPutMethodNotAllowed{}
}

/*SMSCancelAllPutMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SMSCancelAllPutMethodNotAllowed struct {
	Payload interface{}
}

func (o *SMSCancelAllPutMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /sms/cancel-all][%d] smsCancelAllPutMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SMSCancelAllPutMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSCancelAllPutTooManyRequests creates a SMSCancelAllPutTooManyRequests with default headers values
func NewSMSCancelAllPutTooManyRequests() *SMSCancelAllPutTooManyRequests {
	return &SMSCancelAllPutTooManyRequests{}
}

/*SMSCancelAllPutTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SMSCancelAllPutTooManyRequests struct {
	Payload interface{}
}

func (o *SMSCancelAllPutTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /sms/cancel-all][%d] smsCancelAllPutTooManyRequests  %+v", 429, o.Payload)
}

func (o *SMSCancelAllPutTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSCancelAllPutDefault creates a SMSCancelAllPutDefault with default headers values
func NewSMSCancelAllPutDefault(code int) *SMSCancelAllPutDefault {
	return &SMSCancelAllPutDefault{
		_statusCode: code,
	}
}

/*SMSCancelAllPutDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SMSCancelAllPutDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the Sms cancel all put default response
func (o *SMSCancelAllPutDefault) Code() int {
	return o._statusCode
}

func (o *SMSCancelAllPutDefault) Error() string {
	return fmt.Sprintf("[PUT /sms/cancel-all][%d] SmsCancelAllPut default  %+v", o._statusCode, o.Payload)
}

func (o *SMSCancelAllPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
