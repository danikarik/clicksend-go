// Code generated by go-swagger; DO NOT EDIT.

package timezones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// TimezonesGetReader is a Reader for the TimezonesGet structure.
type TimezonesGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TimezonesGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTimezonesGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewTimezonesGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewTimezonesGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTimezonesGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewTimezonesGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewTimezonesGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewTimezonesGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewTimezonesGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTimezonesGetOK creates a TimezonesGetOK with default headers values
func NewTimezonesGetOK() *TimezonesGetOK {
	return &TimezonesGetOK{}
}

/*TimezonesGetOK handles this case with default header values.

SUCCESS
*/
type TimezonesGetOK struct {
	Payload interface{}
}

func (o *TimezonesGetOK) Error() string {
	return fmt.Sprintf("[GET /timezones][%d] timezonesGetOK  %+v", 200, o.Payload)
}

func (o *TimezonesGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimezonesGetBadRequest creates a TimezonesGetBadRequest with default headers values
func NewTimezonesGetBadRequest() *TimezonesGetBadRequest {
	return &TimezonesGetBadRequest{}
}

/*TimezonesGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type TimezonesGetBadRequest struct {
	Payload interface{}
}

func (o *TimezonesGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /timezones][%d] timezonesGetBadRequest  %+v", 400, o.Payload)
}

func (o *TimezonesGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimezonesGetUnauthorized creates a TimezonesGetUnauthorized with default headers values
func NewTimezonesGetUnauthorized() *TimezonesGetUnauthorized {
	return &TimezonesGetUnauthorized{}
}

/*TimezonesGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type TimezonesGetUnauthorized struct {
	Payload interface{}
}

func (o *TimezonesGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /timezones][%d] timezonesGetUnauthorized  %+v", 401, o.Payload)
}

func (o *TimezonesGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimezonesGetForbidden creates a TimezonesGetForbidden with default headers values
func NewTimezonesGetForbidden() *TimezonesGetForbidden {
	return &TimezonesGetForbidden{}
}

/*TimezonesGetForbidden handles this case with default header values.

FORBIDDEN
*/
type TimezonesGetForbidden struct {
	Payload interface{}
}

func (o *TimezonesGetForbidden) Error() string {
	return fmt.Sprintf("[GET /timezones][%d] timezonesGetForbidden  %+v", 403, o.Payload)
}

func (o *TimezonesGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimezonesGetNotFound creates a TimezonesGetNotFound with default headers values
func NewTimezonesGetNotFound() *TimezonesGetNotFound {
	return &TimezonesGetNotFound{}
}

/*TimezonesGetNotFound handles this case with default header values.

NOT_FOUND
*/
type TimezonesGetNotFound struct {
	Payload interface{}
}

func (o *TimezonesGetNotFound) Error() string {
	return fmt.Sprintf("[GET /timezones][%d] timezonesGetNotFound  %+v", 404, o.Payload)
}

func (o *TimezonesGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimezonesGetMethodNotAllowed creates a TimezonesGetMethodNotAllowed with default headers values
func NewTimezonesGetMethodNotAllowed() *TimezonesGetMethodNotAllowed {
	return &TimezonesGetMethodNotAllowed{}
}

/*TimezonesGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type TimezonesGetMethodNotAllowed struct {
	Payload interface{}
}

func (o *TimezonesGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /timezones][%d] timezonesGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *TimezonesGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimezonesGetTooManyRequests creates a TimezonesGetTooManyRequests with default headers values
func NewTimezonesGetTooManyRequests() *TimezonesGetTooManyRequests {
	return &TimezonesGetTooManyRequests{}
}

/*TimezonesGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type TimezonesGetTooManyRequests struct {
	Payload interface{}
}

func (o *TimezonesGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /timezones][%d] timezonesGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *TimezonesGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTimezonesGetDefault creates a TimezonesGetDefault with default headers values
func NewTimezonesGetDefault(code int) *TimezonesGetDefault {
	return &TimezonesGetDefault{
		_statusCode: code,
	}
}

/*TimezonesGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type TimezonesGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the timezones get default response
func (o *TimezonesGetDefault) Code() int {
	return o._statusCode
}

func (o *TimezonesGetDefault) Error() string {
	return fmt.Sprintf("[GET /timezones][%d] TimezonesGet default  %+v", o._statusCode, o.Payload)
}

func (o *TimezonesGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
