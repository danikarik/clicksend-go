// Code generated by go-swagger; DO NOT EDIT.

package fax_delivery_receipt_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// FAXDeliveryReceiptAutomationPostReader is a Reader for the FAXDeliveryReceiptAutomationPost structure.
type FAXDeliveryReceiptAutomationPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FAXDeliveryReceiptAutomationPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFAXDeliveryReceiptAutomationPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewFAXDeliveryReceiptAutomationPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewFAXDeliveryReceiptAutomationPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFAXDeliveryReceiptAutomationPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFAXDeliveryReceiptAutomationPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewFAXDeliveryReceiptAutomationPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewFAXDeliveryReceiptAutomationPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewFAXDeliveryReceiptAutomationPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFAXDeliveryReceiptAutomationPostOK creates a FAXDeliveryReceiptAutomationPostOK with default headers values
func NewFAXDeliveryReceiptAutomationPostOK() *FAXDeliveryReceiptAutomationPostOK {
	return &FAXDeliveryReceiptAutomationPostOK{}
}

/*FAXDeliveryReceiptAutomationPostOK handles this case with default header values.

SUCCESS
*/
type FAXDeliveryReceiptAutomationPostOK struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationPostOK) Error() string {
	return fmt.Sprintf("[POST /automations/fax/receipts][%d] faxDeliveryReceiptAutomationPostOK  %+v", 200, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationPostBadRequest creates a FAXDeliveryReceiptAutomationPostBadRequest with default headers values
func NewFAXDeliveryReceiptAutomationPostBadRequest() *FAXDeliveryReceiptAutomationPostBadRequest {
	return &FAXDeliveryReceiptAutomationPostBadRequest{}
}

/*FAXDeliveryReceiptAutomationPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type FAXDeliveryReceiptAutomationPostBadRequest struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /automations/fax/receipts][%d] faxDeliveryReceiptAutomationPostBadRequest  %+v", 400, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationPostUnauthorized creates a FAXDeliveryReceiptAutomationPostUnauthorized with default headers values
func NewFAXDeliveryReceiptAutomationPostUnauthorized() *FAXDeliveryReceiptAutomationPostUnauthorized {
	return &FAXDeliveryReceiptAutomationPostUnauthorized{}
}

/*FAXDeliveryReceiptAutomationPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type FAXDeliveryReceiptAutomationPostUnauthorized struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /automations/fax/receipts][%d] faxDeliveryReceiptAutomationPostUnauthorized  %+v", 401, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationPostForbidden creates a FAXDeliveryReceiptAutomationPostForbidden with default headers values
func NewFAXDeliveryReceiptAutomationPostForbidden() *FAXDeliveryReceiptAutomationPostForbidden {
	return &FAXDeliveryReceiptAutomationPostForbidden{}
}

/*FAXDeliveryReceiptAutomationPostForbidden handles this case with default header values.

FORBIDDEN
*/
type FAXDeliveryReceiptAutomationPostForbidden struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationPostForbidden) Error() string {
	return fmt.Sprintf("[POST /automations/fax/receipts][%d] faxDeliveryReceiptAutomationPostForbidden  %+v", 403, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationPostNotFound creates a FAXDeliveryReceiptAutomationPostNotFound with default headers values
func NewFAXDeliveryReceiptAutomationPostNotFound() *FAXDeliveryReceiptAutomationPostNotFound {
	return &FAXDeliveryReceiptAutomationPostNotFound{}
}

/*FAXDeliveryReceiptAutomationPostNotFound handles this case with default header values.

NOT_FOUND
*/
type FAXDeliveryReceiptAutomationPostNotFound struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationPostNotFound) Error() string {
	return fmt.Sprintf("[POST /automations/fax/receipts][%d] faxDeliveryReceiptAutomationPostNotFound  %+v", 404, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationPostMethodNotAllowed creates a FAXDeliveryReceiptAutomationPostMethodNotAllowed with default headers values
func NewFAXDeliveryReceiptAutomationPostMethodNotAllowed() *FAXDeliveryReceiptAutomationPostMethodNotAllowed {
	return &FAXDeliveryReceiptAutomationPostMethodNotAllowed{}
}

/*FAXDeliveryReceiptAutomationPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type FAXDeliveryReceiptAutomationPostMethodNotAllowed struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /automations/fax/receipts][%d] faxDeliveryReceiptAutomationPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationPostTooManyRequests creates a FAXDeliveryReceiptAutomationPostTooManyRequests with default headers values
func NewFAXDeliveryReceiptAutomationPostTooManyRequests() *FAXDeliveryReceiptAutomationPostTooManyRequests {
	return &FAXDeliveryReceiptAutomationPostTooManyRequests{}
}

/*FAXDeliveryReceiptAutomationPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type FAXDeliveryReceiptAutomationPostTooManyRequests struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /automations/fax/receipts][%d] faxDeliveryReceiptAutomationPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationPostDefault creates a FAXDeliveryReceiptAutomationPostDefault with default headers values
func NewFAXDeliveryReceiptAutomationPostDefault(code int) *FAXDeliveryReceiptAutomationPostDefault {
	return &FAXDeliveryReceiptAutomationPostDefault{
		_statusCode: code,
	}
}

/*FAXDeliveryReceiptAutomationPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type FAXDeliveryReceiptAutomationPostDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the Fax delivery receipt automation post default response
func (o *FAXDeliveryReceiptAutomationPostDefault) Code() int {
	return o._statusCode
}

func (o *FAXDeliveryReceiptAutomationPostDefault) Error() string {
	return fmt.Sprintf("[POST /automations/fax/receipts][%d] FaxDeliveryReceiptAutomationPost default  %+v", o._statusCode, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
