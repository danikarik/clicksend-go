// Code generated by go-swagger; DO NOT EDIT.

package fax_delivery_receipt_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// FAXDeliveryReceiptAutomationGetReader is a Reader for the FAXDeliveryReceiptAutomationGet structure.
type FAXDeliveryReceiptAutomationGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FAXDeliveryReceiptAutomationGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFAXDeliveryReceiptAutomationGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewFAXDeliveryReceiptAutomationGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewFAXDeliveryReceiptAutomationGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewFAXDeliveryReceiptAutomationGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFAXDeliveryReceiptAutomationGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewFAXDeliveryReceiptAutomationGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewFAXDeliveryReceiptAutomationGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewFAXDeliveryReceiptAutomationGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFAXDeliveryReceiptAutomationGetOK creates a FAXDeliveryReceiptAutomationGetOK with default headers values
func NewFAXDeliveryReceiptAutomationGetOK() *FAXDeliveryReceiptAutomationGetOK {
	return &FAXDeliveryReceiptAutomationGetOK{}
}

/*FAXDeliveryReceiptAutomationGetOK handles this case with default header values.

SUCCESS
*/
type FAXDeliveryReceiptAutomationGetOK struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationGetOK) Error() string {
	return fmt.Sprintf("[GET /automations/fax/receipts/{receipt_rule_id}][%d] faxDeliveryReceiptAutomationGetOK  %+v", 200, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationGetBadRequest creates a FAXDeliveryReceiptAutomationGetBadRequest with default headers values
func NewFAXDeliveryReceiptAutomationGetBadRequest() *FAXDeliveryReceiptAutomationGetBadRequest {
	return &FAXDeliveryReceiptAutomationGetBadRequest{}
}

/*FAXDeliveryReceiptAutomationGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type FAXDeliveryReceiptAutomationGetBadRequest struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /automations/fax/receipts/{receipt_rule_id}][%d] faxDeliveryReceiptAutomationGetBadRequest  %+v", 400, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationGetUnauthorized creates a FAXDeliveryReceiptAutomationGetUnauthorized with default headers values
func NewFAXDeliveryReceiptAutomationGetUnauthorized() *FAXDeliveryReceiptAutomationGetUnauthorized {
	return &FAXDeliveryReceiptAutomationGetUnauthorized{}
}

/*FAXDeliveryReceiptAutomationGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type FAXDeliveryReceiptAutomationGetUnauthorized struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /automations/fax/receipts/{receipt_rule_id}][%d] faxDeliveryReceiptAutomationGetUnauthorized  %+v", 401, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationGetForbidden creates a FAXDeliveryReceiptAutomationGetForbidden with default headers values
func NewFAXDeliveryReceiptAutomationGetForbidden() *FAXDeliveryReceiptAutomationGetForbidden {
	return &FAXDeliveryReceiptAutomationGetForbidden{}
}

/*FAXDeliveryReceiptAutomationGetForbidden handles this case with default header values.

FORBIDDEN
*/
type FAXDeliveryReceiptAutomationGetForbidden struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationGetForbidden) Error() string {
	return fmt.Sprintf("[GET /automations/fax/receipts/{receipt_rule_id}][%d] faxDeliveryReceiptAutomationGetForbidden  %+v", 403, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationGetNotFound creates a FAXDeliveryReceiptAutomationGetNotFound with default headers values
func NewFAXDeliveryReceiptAutomationGetNotFound() *FAXDeliveryReceiptAutomationGetNotFound {
	return &FAXDeliveryReceiptAutomationGetNotFound{}
}

/*FAXDeliveryReceiptAutomationGetNotFound handles this case with default header values.

NOT_FOUND
*/
type FAXDeliveryReceiptAutomationGetNotFound struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationGetNotFound) Error() string {
	return fmt.Sprintf("[GET /automations/fax/receipts/{receipt_rule_id}][%d] faxDeliveryReceiptAutomationGetNotFound  %+v", 404, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationGetMethodNotAllowed creates a FAXDeliveryReceiptAutomationGetMethodNotAllowed with default headers values
func NewFAXDeliveryReceiptAutomationGetMethodNotAllowed() *FAXDeliveryReceiptAutomationGetMethodNotAllowed {
	return &FAXDeliveryReceiptAutomationGetMethodNotAllowed{}
}

/*FAXDeliveryReceiptAutomationGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type FAXDeliveryReceiptAutomationGetMethodNotAllowed struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /automations/fax/receipts/{receipt_rule_id}][%d] faxDeliveryReceiptAutomationGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationGetTooManyRequests creates a FAXDeliveryReceiptAutomationGetTooManyRequests with default headers values
func NewFAXDeliveryReceiptAutomationGetTooManyRequests() *FAXDeliveryReceiptAutomationGetTooManyRequests {
	return &FAXDeliveryReceiptAutomationGetTooManyRequests{}
}

/*FAXDeliveryReceiptAutomationGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type FAXDeliveryReceiptAutomationGetTooManyRequests struct {
	Payload string
}

func (o *FAXDeliveryReceiptAutomationGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /automations/fax/receipts/{receipt_rule_id}][%d] faxDeliveryReceiptAutomationGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFAXDeliveryReceiptAutomationGetDefault creates a FAXDeliveryReceiptAutomationGetDefault with default headers values
func NewFAXDeliveryReceiptAutomationGetDefault(code int) *FAXDeliveryReceiptAutomationGetDefault {
	return &FAXDeliveryReceiptAutomationGetDefault{
		_statusCode: code,
	}
}

/*FAXDeliveryReceiptAutomationGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type FAXDeliveryReceiptAutomationGetDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the Fax delivery receipt automation get default response
func (o *FAXDeliveryReceiptAutomationGetDefault) Code() int {
	return o._statusCode
}

func (o *FAXDeliveryReceiptAutomationGetDefault) Error() string {
	return fmt.Sprintf("[GET /automations/fax/receipts/{receipt_rule_id}][%d] FaxDeliveryReceiptAutomationGet default  %+v", o._statusCode, o.Payload)
}

func (o *FAXDeliveryReceiptAutomationGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
