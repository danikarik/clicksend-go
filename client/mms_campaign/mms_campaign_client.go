// Code generated by go-swagger; DO NOT EDIT.

package mms_campaign

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new mms campaign API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mms campaign API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MMSCampaignByMMSCampaignIDGet gets specific mms campaign

Get specific mms campaign
*/
func (a *Client) MMSCampaignByMMSCampaignIDGet(params *MMSCampaignByMMSCampaignIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*MMSCampaignByMMSCampaignIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSCampaignByMMSCampaignIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsCampaignByMmsCampaignIdGet",
		Method:             "GET",
		PathPattern:        "/mms-campaigns/{mms_campaign_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSCampaignByMMSCampaignIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSCampaignByMMSCampaignIDGetOK), nil

}

/*
MMSCampaignsByMMSCampaignIDPut updates mms campaign

Update mms campaign
*/
func (a *Client) MMSCampaignsByMMSCampaignIDPut(params *MMSCampaignsByMMSCampaignIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*MMSCampaignsByMMSCampaignIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSCampaignsByMMSCampaignIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsCampaignsByMmsCampaignIdPut",
		Method:             "PUT",
		PathPattern:        "/mms-campaigns/{mms_campaign_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSCampaignsByMMSCampaignIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSCampaignsByMMSCampaignIDPutOK), nil

}

/*
MMSCampaignsCancelByMMSCampaignIDPut cancels mms campaign

Cancel sms campaign
*/
func (a *Client) MMSCampaignsCancelByMMSCampaignIDPut(params *MMSCampaignsCancelByMMSCampaignIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*MMSCampaignsCancelByMMSCampaignIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSCampaignsCancelByMMSCampaignIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsCampaignsCancelByMmsCampaignIdPut",
		Method:             "PUT",
		PathPattern:        "/mms-campaigns/{mms_campaign_id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSCampaignsCancelByMMSCampaignIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSCampaignsCancelByMMSCampaignIDPutOK), nil

}

/*
MMSCampaignsGet gets list of mms campaigns

Get list of mms campaigns
*/
func (a *Client) MMSCampaignsGet(params *MMSCampaignsGetParams, authInfo runtime.ClientAuthInfoWriter) (*MMSCampaignsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSCampaignsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsCampaignsGet",
		Method:             "GET",
		PathPattern:        "/mms-campaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSCampaignsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSCampaignsGetOK), nil

}

/*
MMSCampaignsPricePost calculates price for mms campaign

Calculate price for sms campaign
*/
func (a *Client) MMSCampaignsPricePost(params *MMSCampaignsPricePostParams, authInfo runtime.ClientAuthInfoWriter) (*MMSCampaignsPricePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSCampaignsPricePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsCampaignsPricePost",
		Method:             "POST",
		PathPattern:        "/mms-campaigns/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSCampaignsPricePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSCampaignsPricePostOK), nil

}

/*
MMSCampaignsSendPost creates mms campaign

Create mms campaign
*/
func (a *Client) MMSCampaignsSendPost(params *MMSCampaignsSendPostParams, authInfo runtime.ClientAuthInfoWriter) (*MMSCampaignsSendPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMMSCampaignsSendPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MmsCampaignsSendPost",
		Method:             "POST",
		PathPattern:        "/mms-campaigns/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MMSCampaignsSendPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MMSCampaignsSendPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
