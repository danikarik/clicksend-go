// Code generated by go-swagger; DO NOT EDIT.

package post_letter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PostLettersHistoryGetReader is a Reader for the PostLettersHistoryGet structure.
type PostLettersHistoryGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLettersHistoryGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostLettersHistoryGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostLettersHistoryGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostLettersHistoryGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostLettersHistoryGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostLettersHistoryGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPostLettersHistoryGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPostLettersHistoryGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostLettersHistoryGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostLettersHistoryGetOK creates a PostLettersHistoryGetOK with default headers values
func NewPostLettersHistoryGetOK() *PostLettersHistoryGetOK {
	return &PostLettersHistoryGetOK{}
}

/*PostLettersHistoryGetOK handles this case with default header values.

SUCCESS
*/
type PostLettersHistoryGetOK struct {
	Payload string
}

func (o *PostLettersHistoryGetOK) Error() string {
	return fmt.Sprintf("[GET /post/letters/history][%d] postLettersHistoryGetOK  %+v", 200, o.Payload)
}

func (o *PostLettersHistoryGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLettersHistoryGetBadRequest creates a PostLettersHistoryGetBadRequest with default headers values
func NewPostLettersHistoryGetBadRequest() *PostLettersHistoryGetBadRequest {
	return &PostLettersHistoryGetBadRequest{}
}

/*PostLettersHistoryGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type PostLettersHistoryGetBadRequest struct {
	Payload string
}

func (o *PostLettersHistoryGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /post/letters/history][%d] postLettersHistoryGetBadRequest  %+v", 400, o.Payload)
}

func (o *PostLettersHistoryGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLettersHistoryGetUnauthorized creates a PostLettersHistoryGetUnauthorized with default headers values
func NewPostLettersHistoryGetUnauthorized() *PostLettersHistoryGetUnauthorized {
	return &PostLettersHistoryGetUnauthorized{}
}

/*PostLettersHistoryGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type PostLettersHistoryGetUnauthorized struct {
	Payload string
}

func (o *PostLettersHistoryGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /post/letters/history][%d] postLettersHistoryGetUnauthorized  %+v", 401, o.Payload)
}

func (o *PostLettersHistoryGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLettersHistoryGetForbidden creates a PostLettersHistoryGetForbidden with default headers values
func NewPostLettersHistoryGetForbidden() *PostLettersHistoryGetForbidden {
	return &PostLettersHistoryGetForbidden{}
}

/*PostLettersHistoryGetForbidden handles this case with default header values.

FORBIDDEN
*/
type PostLettersHistoryGetForbidden struct {
	Payload string
}

func (o *PostLettersHistoryGetForbidden) Error() string {
	return fmt.Sprintf("[GET /post/letters/history][%d] postLettersHistoryGetForbidden  %+v", 403, o.Payload)
}

func (o *PostLettersHistoryGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLettersHistoryGetNotFound creates a PostLettersHistoryGetNotFound with default headers values
func NewPostLettersHistoryGetNotFound() *PostLettersHistoryGetNotFound {
	return &PostLettersHistoryGetNotFound{}
}

/*PostLettersHistoryGetNotFound handles this case with default header values.

NOT_FOUND
*/
type PostLettersHistoryGetNotFound struct {
	Payload string
}

func (o *PostLettersHistoryGetNotFound) Error() string {
	return fmt.Sprintf("[GET /post/letters/history][%d] postLettersHistoryGetNotFound  %+v", 404, o.Payload)
}

func (o *PostLettersHistoryGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLettersHistoryGetMethodNotAllowed creates a PostLettersHistoryGetMethodNotAllowed with default headers values
func NewPostLettersHistoryGetMethodNotAllowed() *PostLettersHistoryGetMethodNotAllowed {
	return &PostLettersHistoryGetMethodNotAllowed{}
}

/*PostLettersHistoryGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type PostLettersHistoryGetMethodNotAllowed struct {
	Payload string
}

func (o *PostLettersHistoryGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /post/letters/history][%d] postLettersHistoryGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PostLettersHistoryGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLettersHistoryGetTooManyRequests creates a PostLettersHistoryGetTooManyRequests with default headers values
func NewPostLettersHistoryGetTooManyRequests() *PostLettersHistoryGetTooManyRequests {
	return &PostLettersHistoryGetTooManyRequests{}
}

/*PostLettersHistoryGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type PostLettersHistoryGetTooManyRequests struct {
	Payload string
}

func (o *PostLettersHistoryGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /post/letters/history][%d] postLettersHistoryGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostLettersHistoryGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLettersHistoryGetDefault creates a PostLettersHistoryGetDefault with default headers values
func NewPostLettersHistoryGetDefault(code int) *PostLettersHistoryGetDefault {
	return &PostLettersHistoryGetDefault{
		_statusCode: code,
	}
}

/*PostLettersHistoryGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type PostLettersHistoryGetDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the post letters history get default response
func (o *PostLettersHistoryGetDefault) Code() int {
	return o._statusCode
}

func (o *PostLettersHistoryGetDefault) Error() string {
	return fmt.Sprintf("[GET /post/letters/history][%d] PostLettersHistoryGet default  %+v", o._statusCode, o.Payload)
}

func (o *PostLettersHistoryGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
