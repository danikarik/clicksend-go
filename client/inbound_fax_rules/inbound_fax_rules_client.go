// Code generated by go-swagger; DO NOT EDIT.

package inbound_fax_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new inbound fax rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inbound fax rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
FAXInboundAutomationDelete deletes inbound fax automation

Delete inbound fax automation
*/
func (a *Client) FAXInboundAutomationDelete(params *FAXInboundAutomationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*FAXInboundAutomationDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXInboundAutomationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxInboundAutomationDelete",
		Method:             "DELETE",
		PathPattern:        "/automations/fax/inbound/{inbound_rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXInboundAutomationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXInboundAutomationDeleteOK), nil

}

/*
FAXInboundAutomationGet gets specific inbound fax automation

Get specific inbound fax automation
*/
func (a *Client) FAXInboundAutomationGet(params *FAXInboundAutomationGetParams, authInfo runtime.ClientAuthInfoWriter) (*FAXInboundAutomationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXInboundAutomationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxInboundAutomationGet",
		Method:             "GET",
		PathPattern:        "/automations/fax/inbound/{inbound_rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXInboundAutomationGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXInboundAutomationGetOK), nil

}

/*
FAXInboundAutomationPost creates new inbound fax automation

Create new inbound fax automation
*/
func (a *Client) FAXInboundAutomationPost(params *FAXInboundAutomationPostParams, authInfo runtime.ClientAuthInfoWriter) (*FAXInboundAutomationPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXInboundAutomationPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxInboundAutomationPost",
		Method:             "POST",
		PathPattern:        "/automations/fax/inbound",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXInboundAutomationPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXInboundAutomationPostOK), nil

}

/*
FAXInboundAutomationPut updates inbound fax automation

Update inbound fax automation
*/
func (a *Client) FAXInboundAutomationPut(params *FAXInboundAutomationPutParams, authInfo runtime.ClientAuthInfoWriter) (*FAXInboundAutomationPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXInboundAutomationPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxInboundAutomationPut",
		Method:             "PUT",
		PathPattern:        "/automations/fax/inbound/{inbound_rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXInboundAutomationPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXInboundAutomationPutOK), nil

}

/*
FAXInboundAutomationsGet gets all inbound fax automations

Get all inbound fax automations
*/
func (a *Client) FAXInboundAutomationsGet(params *FAXInboundAutomationsGetParams, authInfo runtime.ClientAuthInfoWriter) (*FAXInboundAutomationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFAXInboundAutomationsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxInboundAutomationsGet",
		Method:             "GET",
		PathPattern:        "/automations/fax/inbound",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FAXInboundAutomationsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FAXInboundAutomationsGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
