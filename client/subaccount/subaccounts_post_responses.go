// Code generated by go-swagger; DO NOT EDIT.

package subaccount

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SubaccountsPostReader is a Reader for the SubaccountsPost structure.
type SubaccountsPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubaccountsPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSubaccountsPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSubaccountsPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSubaccountsPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSubaccountsPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSubaccountsPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSubaccountsPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSubaccountsPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSubaccountsPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSubaccountsPostOK creates a SubaccountsPostOK with default headers values
func NewSubaccountsPostOK() *SubaccountsPostOK {
	return &SubaccountsPostOK{}
}

/*SubaccountsPostOK handles this case with default header values.

SUCCESS
*/
type SubaccountsPostOK struct {
	Payload string
}

func (o *SubaccountsPostOK) Error() string {
	return fmt.Sprintf("[POST /subaccounts][%d] subaccountsPostOK  %+v", 200, o.Payload)
}

func (o *SubaccountsPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsPostBadRequest creates a SubaccountsPostBadRequest with default headers values
func NewSubaccountsPostBadRequest() *SubaccountsPostBadRequest {
	return &SubaccountsPostBadRequest{}
}

/*SubaccountsPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SubaccountsPostBadRequest struct {
	Payload string
}

func (o *SubaccountsPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /subaccounts][%d] subaccountsPostBadRequest  %+v", 400, o.Payload)
}

func (o *SubaccountsPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsPostUnauthorized creates a SubaccountsPostUnauthorized with default headers values
func NewSubaccountsPostUnauthorized() *SubaccountsPostUnauthorized {
	return &SubaccountsPostUnauthorized{}
}

/*SubaccountsPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SubaccountsPostUnauthorized struct {
	Payload string
}

func (o *SubaccountsPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /subaccounts][%d] subaccountsPostUnauthorized  %+v", 401, o.Payload)
}

func (o *SubaccountsPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsPostForbidden creates a SubaccountsPostForbidden with default headers values
func NewSubaccountsPostForbidden() *SubaccountsPostForbidden {
	return &SubaccountsPostForbidden{}
}

/*SubaccountsPostForbidden handles this case with default header values.

FORBIDDEN
*/
type SubaccountsPostForbidden struct {
	Payload string
}

func (o *SubaccountsPostForbidden) Error() string {
	return fmt.Sprintf("[POST /subaccounts][%d] subaccountsPostForbidden  %+v", 403, o.Payload)
}

func (o *SubaccountsPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsPostNotFound creates a SubaccountsPostNotFound with default headers values
func NewSubaccountsPostNotFound() *SubaccountsPostNotFound {
	return &SubaccountsPostNotFound{}
}

/*SubaccountsPostNotFound handles this case with default header values.

NOT_FOUND
*/
type SubaccountsPostNotFound struct {
	Payload string
}

func (o *SubaccountsPostNotFound) Error() string {
	return fmt.Sprintf("[POST /subaccounts][%d] subaccountsPostNotFound  %+v", 404, o.Payload)
}

func (o *SubaccountsPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsPostMethodNotAllowed creates a SubaccountsPostMethodNotAllowed with default headers values
func NewSubaccountsPostMethodNotAllowed() *SubaccountsPostMethodNotAllowed {
	return &SubaccountsPostMethodNotAllowed{}
}

/*SubaccountsPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SubaccountsPostMethodNotAllowed struct {
	Payload string
}

func (o *SubaccountsPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /subaccounts][%d] subaccountsPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SubaccountsPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsPostTooManyRequests creates a SubaccountsPostTooManyRequests with default headers values
func NewSubaccountsPostTooManyRequests() *SubaccountsPostTooManyRequests {
	return &SubaccountsPostTooManyRequests{}
}

/*SubaccountsPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SubaccountsPostTooManyRequests struct {
	Payload string
}

func (o *SubaccountsPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /subaccounts][%d] subaccountsPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubaccountsPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsPostDefault creates a SubaccountsPostDefault with default headers values
func NewSubaccountsPostDefault(code int) *SubaccountsPostDefault {
	return &SubaccountsPostDefault{
		_statusCode: code,
	}
}

/*SubaccountsPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SubaccountsPostDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the subaccounts post default response
func (o *SubaccountsPostDefault) Code() int {
	return o._statusCode
}

func (o *SubaccountsPostDefault) Error() string {
	return fmt.Sprintf("[POST /subaccounts][%d] SubaccountsPost default  %+v", o._statusCode, o.Payload)
}

func (o *SubaccountsPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
