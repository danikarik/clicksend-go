// Code generated by go-swagger; DO NOT EDIT.

package subaccount

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSubaccountsBySubaccountIDGetParams creates a new SubaccountsBySubaccountIDGetParams object
// with the default values initialized.
func NewSubaccountsBySubaccountIDGetParams() *SubaccountsBySubaccountIDGetParams {
	var ()
	return &SubaccountsBySubaccountIDGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSubaccountsBySubaccountIDGetParamsWithTimeout creates a new SubaccountsBySubaccountIDGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSubaccountsBySubaccountIDGetParamsWithTimeout(timeout time.Duration) *SubaccountsBySubaccountIDGetParams {
	var ()
	return &SubaccountsBySubaccountIDGetParams{

		timeout: timeout,
	}
}

// NewSubaccountsBySubaccountIDGetParamsWithContext creates a new SubaccountsBySubaccountIDGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewSubaccountsBySubaccountIDGetParamsWithContext(ctx context.Context) *SubaccountsBySubaccountIDGetParams {
	var ()
	return &SubaccountsBySubaccountIDGetParams{

		Context: ctx,
	}
}

// NewSubaccountsBySubaccountIDGetParamsWithHTTPClient creates a new SubaccountsBySubaccountIDGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSubaccountsBySubaccountIDGetParamsWithHTTPClient(client *http.Client) *SubaccountsBySubaccountIDGetParams {
	var ()
	return &SubaccountsBySubaccountIDGetParams{
		HTTPClient: client,
	}
}

/*SubaccountsBySubaccountIDGetParams contains all the parameters to send to the API endpoint
for the subaccounts by subaccount Id get operation typically these are written to a http.Request
*/
type SubaccountsBySubaccountIDGetParams struct {

	/*SubaccountID
	  ID of subaccount to get

	*/
	SubaccountID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the subaccounts by subaccount Id get params
func (o *SubaccountsBySubaccountIDGetParams) WithTimeout(timeout time.Duration) *SubaccountsBySubaccountIDGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the subaccounts by subaccount Id get params
func (o *SubaccountsBySubaccountIDGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the subaccounts by subaccount Id get params
func (o *SubaccountsBySubaccountIDGetParams) WithContext(ctx context.Context) *SubaccountsBySubaccountIDGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the subaccounts by subaccount Id get params
func (o *SubaccountsBySubaccountIDGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the subaccounts by subaccount Id get params
func (o *SubaccountsBySubaccountIDGetParams) WithHTTPClient(client *http.Client) *SubaccountsBySubaccountIDGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the subaccounts by subaccount Id get params
func (o *SubaccountsBySubaccountIDGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubaccountID adds the subaccountID to the subaccounts by subaccount Id get params
func (o *SubaccountsBySubaccountIDGetParams) WithSubaccountID(subaccountID int32) *SubaccountsBySubaccountIDGetParams {
	o.SetSubaccountID(subaccountID)
	return o
}

// SetSubaccountID adds the subaccountId to the subaccounts by subaccount Id get params
func (o *SubaccountsBySubaccountIDGetParams) SetSubaccountID(subaccountID int32) {
	o.SubaccountID = subaccountID
}

// WriteToRequest writes these params to a swagger request
func (o *SubaccountsBySubaccountIDGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param subaccount_id
	if err := r.SetPathParam("subaccount_id", swag.FormatInt32(o.SubaccountID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
