// Code generated by go-swagger; DO NOT EDIT.

package subaccount

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/danikarik/clicksend-go/models"
)

// NewSubaccountsBySubaccountIDPutParams creates a new SubaccountsBySubaccountIDPutParams object
// with the default values initialized.
func NewSubaccountsBySubaccountIDPutParams() *SubaccountsBySubaccountIDPutParams {
	var ()
	return &SubaccountsBySubaccountIDPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSubaccountsBySubaccountIDPutParamsWithTimeout creates a new SubaccountsBySubaccountIDPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSubaccountsBySubaccountIDPutParamsWithTimeout(timeout time.Duration) *SubaccountsBySubaccountIDPutParams {
	var ()
	return &SubaccountsBySubaccountIDPutParams{

		timeout: timeout,
	}
}

// NewSubaccountsBySubaccountIDPutParamsWithContext creates a new SubaccountsBySubaccountIDPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewSubaccountsBySubaccountIDPutParamsWithContext(ctx context.Context) *SubaccountsBySubaccountIDPutParams {
	var ()
	return &SubaccountsBySubaccountIDPutParams{

		Context: ctx,
	}
}

// NewSubaccountsBySubaccountIDPutParamsWithHTTPClient creates a new SubaccountsBySubaccountIDPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSubaccountsBySubaccountIDPutParamsWithHTTPClient(client *http.Client) *SubaccountsBySubaccountIDPutParams {
	var ()
	return &SubaccountsBySubaccountIDPutParams{
		HTTPClient: client,
	}
}

/*SubaccountsBySubaccountIDPutParams contains all the parameters to send to the API endpoint
for the subaccounts by subaccount Id put operation typically these are written to a http.Request
*/
type SubaccountsBySubaccountIDPutParams struct {

	/*Subaccount
	  Subaccount model

	*/
	Subaccount models.Subaccount
	/*SubaccountID
	  ID of subaccount to update

	*/
	SubaccountID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) WithTimeout(timeout time.Duration) *SubaccountsBySubaccountIDPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) WithContext(ctx context.Context) *SubaccountsBySubaccountIDPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) WithHTTPClient(client *http.Client) *SubaccountsBySubaccountIDPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubaccount adds the subaccount to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) WithSubaccount(subaccount models.Subaccount) *SubaccountsBySubaccountIDPutParams {
	o.SetSubaccount(subaccount)
	return o
}

// SetSubaccount adds the subaccount to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) SetSubaccount(subaccount models.Subaccount) {
	o.Subaccount = subaccount
}

// WithSubaccountID adds the subaccountID to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) WithSubaccountID(subaccountID int32) *SubaccountsBySubaccountIDPutParams {
	o.SetSubaccountID(subaccountID)
	return o
}

// SetSubaccountID adds the subaccountId to the subaccounts by subaccount Id put params
func (o *SubaccountsBySubaccountIDPutParams) SetSubaccountID(subaccountID int32) {
	o.SubaccountID = subaccountID
}

// WriteToRequest writes these params to a swagger request
func (o *SubaccountsBySubaccountIDPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Subaccount); err != nil {
		return err
	}

	// path param subaccount_id
	if err := r.SetPathParam("subaccount_id", swag.FormatInt32(o.SubaccountID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
