// Code generated by go-swagger; DO NOT EDIT.

package subaccount

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SubaccountsGetReader is a Reader for the SubaccountsGet structure.
type SubaccountsGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubaccountsGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSubaccountsGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSubaccountsGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSubaccountsGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSubaccountsGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSubaccountsGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSubaccountsGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSubaccountsGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSubaccountsGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSubaccountsGetOK creates a SubaccountsGetOK with default headers values
func NewSubaccountsGetOK() *SubaccountsGetOK {
	return &SubaccountsGetOK{}
}

/*SubaccountsGetOK handles this case with default header values.

SUCCESS
*/
type SubaccountsGetOK struct {
	Payload interface{}
}

func (o *SubaccountsGetOK) Error() string {
	return fmt.Sprintf("[GET /subaccounts][%d] subaccountsGetOK  %+v", 200, o.Payload)
}

func (o *SubaccountsGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsGetBadRequest creates a SubaccountsGetBadRequest with default headers values
func NewSubaccountsGetBadRequest() *SubaccountsGetBadRequest {
	return &SubaccountsGetBadRequest{}
}

/*SubaccountsGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SubaccountsGetBadRequest struct {
	Payload interface{}
}

func (o *SubaccountsGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /subaccounts][%d] subaccountsGetBadRequest  %+v", 400, o.Payload)
}

func (o *SubaccountsGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsGetUnauthorized creates a SubaccountsGetUnauthorized with default headers values
func NewSubaccountsGetUnauthorized() *SubaccountsGetUnauthorized {
	return &SubaccountsGetUnauthorized{}
}

/*SubaccountsGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SubaccountsGetUnauthorized struct {
	Payload interface{}
}

func (o *SubaccountsGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /subaccounts][%d] subaccountsGetUnauthorized  %+v", 401, o.Payload)
}

func (o *SubaccountsGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsGetForbidden creates a SubaccountsGetForbidden with default headers values
func NewSubaccountsGetForbidden() *SubaccountsGetForbidden {
	return &SubaccountsGetForbidden{}
}

/*SubaccountsGetForbidden handles this case with default header values.

FORBIDDEN
*/
type SubaccountsGetForbidden struct {
	Payload interface{}
}

func (o *SubaccountsGetForbidden) Error() string {
	return fmt.Sprintf("[GET /subaccounts][%d] subaccountsGetForbidden  %+v", 403, o.Payload)
}

func (o *SubaccountsGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsGetNotFound creates a SubaccountsGetNotFound with default headers values
func NewSubaccountsGetNotFound() *SubaccountsGetNotFound {
	return &SubaccountsGetNotFound{}
}

/*SubaccountsGetNotFound handles this case with default header values.

NOT_FOUND
*/
type SubaccountsGetNotFound struct {
	Payload interface{}
}

func (o *SubaccountsGetNotFound) Error() string {
	return fmt.Sprintf("[GET /subaccounts][%d] subaccountsGetNotFound  %+v", 404, o.Payload)
}

func (o *SubaccountsGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsGetMethodNotAllowed creates a SubaccountsGetMethodNotAllowed with default headers values
func NewSubaccountsGetMethodNotAllowed() *SubaccountsGetMethodNotAllowed {
	return &SubaccountsGetMethodNotAllowed{}
}

/*SubaccountsGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SubaccountsGetMethodNotAllowed struct {
	Payload interface{}
}

func (o *SubaccountsGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /subaccounts][%d] subaccountsGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SubaccountsGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsGetTooManyRequests creates a SubaccountsGetTooManyRequests with default headers values
func NewSubaccountsGetTooManyRequests() *SubaccountsGetTooManyRequests {
	return &SubaccountsGetTooManyRequests{}
}

/*SubaccountsGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SubaccountsGetTooManyRequests struct {
	Payload interface{}
}

func (o *SubaccountsGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /subaccounts][%d] subaccountsGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubaccountsGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubaccountsGetDefault creates a SubaccountsGetDefault with default headers values
func NewSubaccountsGetDefault(code int) *SubaccountsGetDefault {
	return &SubaccountsGetDefault{
		_statusCode: code,
	}
}

/*SubaccountsGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SubaccountsGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the subaccounts get default response
func (o *SubaccountsGetDefault) Code() int {
	return o._statusCode
}

func (o *SubaccountsGetDefault) Error() string {
	return fmt.Sprintf("[GET /subaccounts][%d] SubaccountsGet default  %+v", o._statusCode, o.Payload)
}

func (o *SubaccountsGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
