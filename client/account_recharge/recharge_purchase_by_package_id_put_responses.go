// Code generated by go-swagger; DO NOT EDIT.

package account_recharge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// RechargePurchaseByPackageIDPutReader is a Reader for the RechargePurchaseByPackageIDPut structure.
type RechargePurchaseByPackageIDPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RechargePurchaseByPackageIDPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRechargePurchaseByPackageIDPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRechargePurchaseByPackageIDPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewRechargePurchaseByPackageIDPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewRechargePurchaseByPackageIDPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRechargePurchaseByPackageIDPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewRechargePurchaseByPackageIDPutMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewRechargePurchaseByPackageIDPutTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewRechargePurchaseByPackageIDPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRechargePurchaseByPackageIDPutOK creates a RechargePurchaseByPackageIDPutOK with default headers values
func NewRechargePurchaseByPackageIDPutOK() *RechargePurchaseByPackageIDPutOK {
	return &RechargePurchaseByPackageIDPutOK{}
}

/*RechargePurchaseByPackageIDPutOK handles this case with default header values.

SUCCESS
*/
type RechargePurchaseByPackageIDPutOK struct {
	Payload interface{}
}

func (o *RechargePurchaseByPackageIDPutOK) Error() string {
	return fmt.Sprintf("[PUT /recharge/purchase/{package_id}][%d] rechargePurchaseByPackageIdPutOK  %+v", 200, o.Payload)
}

func (o *RechargePurchaseByPackageIDPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRechargePurchaseByPackageIDPutBadRequest creates a RechargePurchaseByPackageIDPutBadRequest with default headers values
func NewRechargePurchaseByPackageIDPutBadRequest() *RechargePurchaseByPackageIDPutBadRequest {
	return &RechargePurchaseByPackageIDPutBadRequest{}
}

/*RechargePurchaseByPackageIDPutBadRequest handles this case with default header values.

BAD_REQUEST
*/
type RechargePurchaseByPackageIDPutBadRequest struct {
	Payload interface{}
}

func (o *RechargePurchaseByPackageIDPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /recharge/purchase/{package_id}][%d] rechargePurchaseByPackageIdPutBadRequest  %+v", 400, o.Payload)
}

func (o *RechargePurchaseByPackageIDPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRechargePurchaseByPackageIDPutUnauthorized creates a RechargePurchaseByPackageIDPutUnauthorized with default headers values
func NewRechargePurchaseByPackageIDPutUnauthorized() *RechargePurchaseByPackageIDPutUnauthorized {
	return &RechargePurchaseByPackageIDPutUnauthorized{}
}

/*RechargePurchaseByPackageIDPutUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type RechargePurchaseByPackageIDPutUnauthorized struct {
	Payload interface{}
}

func (o *RechargePurchaseByPackageIDPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /recharge/purchase/{package_id}][%d] rechargePurchaseByPackageIdPutUnauthorized  %+v", 401, o.Payload)
}

func (o *RechargePurchaseByPackageIDPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRechargePurchaseByPackageIDPutForbidden creates a RechargePurchaseByPackageIDPutForbidden with default headers values
func NewRechargePurchaseByPackageIDPutForbidden() *RechargePurchaseByPackageIDPutForbidden {
	return &RechargePurchaseByPackageIDPutForbidden{}
}

/*RechargePurchaseByPackageIDPutForbidden handles this case with default header values.

FORBIDDEN
*/
type RechargePurchaseByPackageIDPutForbidden struct {
	Payload interface{}
}

func (o *RechargePurchaseByPackageIDPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /recharge/purchase/{package_id}][%d] rechargePurchaseByPackageIdPutForbidden  %+v", 403, o.Payload)
}

func (o *RechargePurchaseByPackageIDPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRechargePurchaseByPackageIDPutNotFound creates a RechargePurchaseByPackageIDPutNotFound with default headers values
func NewRechargePurchaseByPackageIDPutNotFound() *RechargePurchaseByPackageIDPutNotFound {
	return &RechargePurchaseByPackageIDPutNotFound{}
}

/*RechargePurchaseByPackageIDPutNotFound handles this case with default header values.

NOT_FOUND
*/
type RechargePurchaseByPackageIDPutNotFound struct {
	Payload interface{}
}

func (o *RechargePurchaseByPackageIDPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /recharge/purchase/{package_id}][%d] rechargePurchaseByPackageIdPutNotFound  %+v", 404, o.Payload)
}

func (o *RechargePurchaseByPackageIDPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRechargePurchaseByPackageIDPutMethodNotAllowed creates a RechargePurchaseByPackageIDPutMethodNotAllowed with default headers values
func NewRechargePurchaseByPackageIDPutMethodNotAllowed() *RechargePurchaseByPackageIDPutMethodNotAllowed {
	return &RechargePurchaseByPackageIDPutMethodNotAllowed{}
}

/*RechargePurchaseByPackageIDPutMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type RechargePurchaseByPackageIDPutMethodNotAllowed struct {
	Payload interface{}
}

func (o *RechargePurchaseByPackageIDPutMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /recharge/purchase/{package_id}][%d] rechargePurchaseByPackageIdPutMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RechargePurchaseByPackageIDPutMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRechargePurchaseByPackageIDPutTooManyRequests creates a RechargePurchaseByPackageIDPutTooManyRequests with default headers values
func NewRechargePurchaseByPackageIDPutTooManyRequests() *RechargePurchaseByPackageIDPutTooManyRequests {
	return &RechargePurchaseByPackageIDPutTooManyRequests{}
}

/*RechargePurchaseByPackageIDPutTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type RechargePurchaseByPackageIDPutTooManyRequests struct {
	Payload interface{}
}

func (o *RechargePurchaseByPackageIDPutTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /recharge/purchase/{package_id}][%d] rechargePurchaseByPackageIdPutTooManyRequests  %+v", 429, o.Payload)
}

func (o *RechargePurchaseByPackageIDPutTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRechargePurchaseByPackageIDPutDefault creates a RechargePurchaseByPackageIDPutDefault with default headers values
func NewRechargePurchaseByPackageIDPutDefault(code int) *RechargePurchaseByPackageIDPutDefault {
	return &RechargePurchaseByPackageIDPutDefault{
		_statusCode: code,
	}
}

/*RechargePurchaseByPackageIDPutDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type RechargePurchaseByPackageIDPutDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the recharge purchase by package Id put default response
func (o *RechargePurchaseByPackageIDPutDefault) Code() int {
	return o._statusCode
}

func (o *RechargePurchaseByPackageIDPutDefault) Error() string {
	return fmt.Sprintf("[PUT /recharge/purchase/{package_id}][%d] RechargePurchaseByPackageIdPut default  %+v", o._statusCode, o.Payload)
}

func (o *RechargePurchaseByPackageIDPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
