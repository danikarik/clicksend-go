// Code generated by go-swagger; DO NOT EDIT.

package account_recharge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new account recharge API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account recharge API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RechargeCreditCardGet gets credit card info

Get Credit Card info
*/
func (a *Client) RechargeCreditCardGet(params *RechargeCreditCardGetParams, authInfo runtime.ClientAuthInfoWriter) (*RechargeCreditCardGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRechargeCreditCardGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RechargeCreditCardGet",
		Method:             "GET",
		PathPattern:        "/recharge/credit-card",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RechargeCreditCardGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RechargeCreditCardGetOK), nil

}

/*
RechargeCreditCardPut updates credit card info

Update credit card info
*/
func (a *Client) RechargeCreditCardPut(params *RechargeCreditCardPutParams, authInfo runtime.ClientAuthInfoWriter) (*RechargeCreditCardPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRechargeCreditCardPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RechargeCreditCardPut",
		Method:             "PUT",
		PathPattern:        "/recharge/credit-card",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RechargeCreditCardPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RechargeCreditCardPutOK), nil

}

/*
RechargePackagesGet gets list of all packages

Get list of all packages
*/
func (a *Client) RechargePackagesGet(params *RechargePackagesGetParams, authInfo runtime.ClientAuthInfoWriter) (*RechargePackagesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRechargePackagesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RechargePackagesGet",
		Method:             "GET",
		PathPattern:        "/recharge/packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RechargePackagesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RechargePackagesGetOK), nil

}

/*
RechargePurchaseByPackageIDPut purchases a package

Purchase a package
*/
func (a *Client) RechargePurchaseByPackageIDPut(params *RechargePurchaseByPackageIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*RechargePurchaseByPackageIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRechargePurchaseByPackageIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RechargePurchaseByPackageIdPut",
		Method:             "PUT",
		PathPattern:        "/recharge/purchase/{package_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RechargePurchaseByPackageIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RechargePurchaseByPackageIDPutOK), nil

}

/*
RechargeTransactionsByTransactionIDGet gets specific transaction

Get specific Transaction
*/
func (a *Client) RechargeTransactionsByTransactionIDGet(params *RechargeTransactionsByTransactionIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*RechargeTransactionsByTransactionIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRechargeTransactionsByTransactionIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RechargeTransactionsByTransactionIdGet",
		Method:             "GET",
		PathPattern:        "/recharge/transactions/{transaction_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RechargeTransactionsByTransactionIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RechargeTransactionsByTransactionIDGetOK), nil

}

/*
RechargeTransactionsGet purchases a package

Get all transactions
*/
func (a *Client) RechargeTransactionsGet(params *RechargeTransactionsGetParams, authInfo runtime.ClientAuthInfoWriter) (*RechargeTransactionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRechargeTransactionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RechargeTransactionsGet",
		Method:             "GET",
		PathPattern:        "/recharge/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RechargeTransactionsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RechargeTransactionsGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
