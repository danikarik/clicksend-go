// Code generated by go-swagger; DO NOT EDIT.

package account_recharge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRechargeTransactionsByTransactionIDGetParams creates a new RechargeTransactionsByTransactionIDGetParams object
// with the default values initialized.
func NewRechargeTransactionsByTransactionIDGetParams() *RechargeTransactionsByTransactionIDGetParams {
	var ()
	return &RechargeTransactionsByTransactionIDGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRechargeTransactionsByTransactionIDGetParamsWithTimeout creates a new RechargeTransactionsByTransactionIDGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRechargeTransactionsByTransactionIDGetParamsWithTimeout(timeout time.Duration) *RechargeTransactionsByTransactionIDGetParams {
	var ()
	return &RechargeTransactionsByTransactionIDGetParams{

		timeout: timeout,
	}
}

// NewRechargeTransactionsByTransactionIDGetParamsWithContext creates a new RechargeTransactionsByTransactionIDGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewRechargeTransactionsByTransactionIDGetParamsWithContext(ctx context.Context) *RechargeTransactionsByTransactionIDGetParams {
	var ()
	return &RechargeTransactionsByTransactionIDGetParams{

		Context: ctx,
	}
}

// NewRechargeTransactionsByTransactionIDGetParamsWithHTTPClient creates a new RechargeTransactionsByTransactionIDGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRechargeTransactionsByTransactionIDGetParamsWithHTTPClient(client *http.Client) *RechargeTransactionsByTransactionIDGetParams {
	var ()
	return &RechargeTransactionsByTransactionIDGetParams{
		HTTPClient: client,
	}
}

/*RechargeTransactionsByTransactionIDGetParams contains all the parameters to send to the API endpoint
for the recharge transactions by transaction Id get operation typically these are written to a http.Request
*/
type RechargeTransactionsByTransactionIDGetParams struct {

	/*TransactionID
	  ID of transaction to retrieve

	*/
	TransactionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the recharge transactions by transaction Id get params
func (o *RechargeTransactionsByTransactionIDGetParams) WithTimeout(timeout time.Duration) *RechargeTransactionsByTransactionIDGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the recharge transactions by transaction Id get params
func (o *RechargeTransactionsByTransactionIDGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the recharge transactions by transaction Id get params
func (o *RechargeTransactionsByTransactionIDGetParams) WithContext(ctx context.Context) *RechargeTransactionsByTransactionIDGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the recharge transactions by transaction Id get params
func (o *RechargeTransactionsByTransactionIDGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the recharge transactions by transaction Id get params
func (o *RechargeTransactionsByTransactionIDGetParams) WithHTTPClient(client *http.Client) *RechargeTransactionsByTransactionIDGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the recharge transactions by transaction Id get params
func (o *RechargeTransactionsByTransactionIDGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTransactionID adds the transactionID to the recharge transactions by transaction Id get params
func (o *RechargeTransactionsByTransactionIDGetParams) WithTransactionID(transactionID string) *RechargeTransactionsByTransactionIDGetParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the recharge transactions by transaction Id get params
func (o *RechargeTransactionsByTransactionIDGetParams) SetTransactionID(transactionID string) {
	o.TransactionID = transactionID
}

// WriteToRequest writes these params to a swagger request
func (o *RechargeTransactionsByTransactionIDGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param transaction_id
	if err := r.SetPathParam("transaction_id", o.TransactionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
