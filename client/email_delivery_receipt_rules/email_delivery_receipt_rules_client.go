// Code generated by go-swagger; DO NOT EDIT.

package email_delivery_receipt_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new email delivery receipt rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for email delivery receipt rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EmailDeliveryReceiptAutomationDelete deletes email delivery receipt automation

Delete email delivery receipt automation
*/
func (a *Client) EmailDeliveryReceiptAutomationDelete(params *EmailDeliveryReceiptAutomationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*EmailDeliveryReceiptAutomationDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailDeliveryReceiptAutomationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailDeliveryReceiptAutomationDelete",
		Method:             "DELETE",
		PathPattern:        "/automations/email/receipts/{receipt_rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailDeliveryReceiptAutomationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailDeliveryReceiptAutomationDeleteOK), nil

}

/*
EmailDeliveryReceiptAutomationGet gets specific email delivery receipt automation

Get specific email delivery receipt automation
*/
func (a *Client) EmailDeliveryReceiptAutomationGet(params *EmailDeliveryReceiptAutomationGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmailDeliveryReceiptAutomationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailDeliveryReceiptAutomationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailDeliveryReceiptAutomationGet",
		Method:             "GET",
		PathPattern:        "/automations/email/receipts/{receipt_rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailDeliveryReceiptAutomationGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailDeliveryReceiptAutomationGetOK), nil

}

/*
EmailDeliveryReceiptAutomationPost creates email delivery receipt automations

Create email delivery receipt automations
*/
func (a *Client) EmailDeliveryReceiptAutomationPost(params *EmailDeliveryReceiptAutomationPostParams, authInfo runtime.ClientAuthInfoWriter) (*EmailDeliveryReceiptAutomationPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailDeliveryReceiptAutomationPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailDeliveryReceiptAutomationPost",
		Method:             "POST",
		PathPattern:        "/automations/email/receipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailDeliveryReceiptAutomationPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailDeliveryReceiptAutomationPostOK), nil

}

/*
EmailDeliveryReceiptAutomationPut updates email delivery receipt automation

Update email delivery receipt automation
*/
func (a *Client) EmailDeliveryReceiptAutomationPut(params *EmailDeliveryReceiptAutomationPutParams, authInfo runtime.ClientAuthInfoWriter) (*EmailDeliveryReceiptAutomationPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailDeliveryReceiptAutomationPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailDeliveryReceiptAutomationPut",
		Method:             "PUT",
		PathPattern:        "/automations/email/receipts/{receipt_rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailDeliveryReceiptAutomationPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailDeliveryReceiptAutomationPutOK), nil

}

/*
EmailDeliveryReceiptAutomationsGet gets all email delivery receipt automations

Get all email delivery receipt automations
*/
func (a *Client) EmailDeliveryReceiptAutomationsGet(params *EmailDeliveryReceiptAutomationsGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmailDeliveryReceiptAutomationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailDeliveryReceiptAutomationsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailDeliveryReceiptAutomationsGet",
		Method:             "GET",
		PathPattern:        "/automations/email/receipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailDeliveryReceiptAutomationsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailDeliveryReceiptAutomationsGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
