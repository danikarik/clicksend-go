// Code generated by go-swagger; DO NOT EDIT.

package voice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// VoiceCancelAllPutReader is a Reader for the VoiceCancelAllPut structure.
type VoiceCancelAllPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VoiceCancelAllPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewVoiceCancelAllPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewVoiceCancelAllPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewVoiceCancelAllPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewVoiceCancelAllPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewVoiceCancelAllPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewVoiceCancelAllPutMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewVoiceCancelAllPutTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewVoiceCancelAllPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVoiceCancelAllPutOK creates a VoiceCancelAllPutOK with default headers values
func NewVoiceCancelAllPutOK() *VoiceCancelAllPutOK {
	return &VoiceCancelAllPutOK{}
}

/*VoiceCancelAllPutOK handles this case with default header values.

SUCCESS
*/
type VoiceCancelAllPutOK struct {
	Payload string
}

func (o *VoiceCancelAllPutOK) Error() string {
	return fmt.Sprintf("[PUT /voice/cancel-all][%d] voiceCancelAllPutOK  %+v", 200, o.Payload)
}

func (o *VoiceCancelAllPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceCancelAllPutBadRequest creates a VoiceCancelAllPutBadRequest with default headers values
func NewVoiceCancelAllPutBadRequest() *VoiceCancelAllPutBadRequest {
	return &VoiceCancelAllPutBadRequest{}
}

/*VoiceCancelAllPutBadRequest handles this case with default header values.

BAD_REQUEST
*/
type VoiceCancelAllPutBadRequest struct {
	Payload string
}

func (o *VoiceCancelAllPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /voice/cancel-all][%d] voiceCancelAllPutBadRequest  %+v", 400, o.Payload)
}

func (o *VoiceCancelAllPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceCancelAllPutUnauthorized creates a VoiceCancelAllPutUnauthorized with default headers values
func NewVoiceCancelAllPutUnauthorized() *VoiceCancelAllPutUnauthorized {
	return &VoiceCancelAllPutUnauthorized{}
}

/*VoiceCancelAllPutUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type VoiceCancelAllPutUnauthorized struct {
	Payload string
}

func (o *VoiceCancelAllPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /voice/cancel-all][%d] voiceCancelAllPutUnauthorized  %+v", 401, o.Payload)
}

func (o *VoiceCancelAllPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceCancelAllPutForbidden creates a VoiceCancelAllPutForbidden with default headers values
func NewVoiceCancelAllPutForbidden() *VoiceCancelAllPutForbidden {
	return &VoiceCancelAllPutForbidden{}
}

/*VoiceCancelAllPutForbidden handles this case with default header values.

FORBIDDEN
*/
type VoiceCancelAllPutForbidden struct {
	Payload string
}

func (o *VoiceCancelAllPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /voice/cancel-all][%d] voiceCancelAllPutForbidden  %+v", 403, o.Payload)
}

func (o *VoiceCancelAllPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceCancelAllPutNotFound creates a VoiceCancelAllPutNotFound with default headers values
func NewVoiceCancelAllPutNotFound() *VoiceCancelAllPutNotFound {
	return &VoiceCancelAllPutNotFound{}
}

/*VoiceCancelAllPutNotFound handles this case with default header values.

NOT_FOUND
*/
type VoiceCancelAllPutNotFound struct {
	Payload string
}

func (o *VoiceCancelAllPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /voice/cancel-all][%d] voiceCancelAllPutNotFound  %+v", 404, o.Payload)
}

func (o *VoiceCancelAllPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceCancelAllPutMethodNotAllowed creates a VoiceCancelAllPutMethodNotAllowed with default headers values
func NewVoiceCancelAllPutMethodNotAllowed() *VoiceCancelAllPutMethodNotAllowed {
	return &VoiceCancelAllPutMethodNotAllowed{}
}

/*VoiceCancelAllPutMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type VoiceCancelAllPutMethodNotAllowed struct {
	Payload string
}

func (o *VoiceCancelAllPutMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /voice/cancel-all][%d] voiceCancelAllPutMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *VoiceCancelAllPutMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceCancelAllPutTooManyRequests creates a VoiceCancelAllPutTooManyRequests with default headers values
func NewVoiceCancelAllPutTooManyRequests() *VoiceCancelAllPutTooManyRequests {
	return &VoiceCancelAllPutTooManyRequests{}
}

/*VoiceCancelAllPutTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type VoiceCancelAllPutTooManyRequests struct {
	Payload string
}

func (o *VoiceCancelAllPutTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /voice/cancel-all][%d] voiceCancelAllPutTooManyRequests  %+v", 429, o.Payload)
}

func (o *VoiceCancelAllPutTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceCancelAllPutDefault creates a VoiceCancelAllPutDefault with default headers values
func NewVoiceCancelAllPutDefault(code int) *VoiceCancelAllPutDefault {
	return &VoiceCancelAllPutDefault{
		_statusCode: code,
	}
}

/*VoiceCancelAllPutDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type VoiceCancelAllPutDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the voice cancel all put default response
func (o *VoiceCancelAllPutDefault) Code() int {
	return o._statusCode
}

func (o *VoiceCancelAllPutDefault) Error() string {
	return fmt.Sprintf("[PUT /voice/cancel-all][%d] VoiceCancelAllPut default  %+v", o._statusCode, o.Payload)
}

func (o *VoiceCancelAllPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
