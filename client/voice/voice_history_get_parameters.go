// Code generated by go-swagger; DO NOT EDIT.

package voice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewVoiceHistoryGetParams creates a new VoiceHistoryGetParams object
// with the default values initialized.
func NewVoiceHistoryGetParams() *VoiceHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &VoiceHistoryGetParams{
		Limit: &limitDefault,
		Page:  &pageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewVoiceHistoryGetParamsWithTimeout creates a new VoiceHistoryGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewVoiceHistoryGetParamsWithTimeout(timeout time.Duration) *VoiceHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &VoiceHistoryGetParams{
		Limit: &limitDefault,
		Page:  &pageDefault,

		timeout: timeout,
	}
}

// NewVoiceHistoryGetParamsWithContext creates a new VoiceHistoryGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewVoiceHistoryGetParamsWithContext(ctx context.Context) *VoiceHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &VoiceHistoryGetParams{
		Limit: &limitDefault,
		Page:  &pageDefault,

		Context: ctx,
	}
}

// NewVoiceHistoryGetParamsWithHTTPClient creates a new VoiceHistoryGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewVoiceHistoryGetParamsWithHTTPClient(client *http.Client) *VoiceHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &VoiceHistoryGetParams{
		Limit:      &limitDefault,
		Page:       &pageDefault,
		HTTPClient: client,
	}
}

/*VoiceHistoryGetParams contains all the parameters to send to the API endpoint
for the voice history get operation typically these are written to a http.Request
*/
type VoiceHistoryGetParams struct {

	/*DateFrom
	  Timestamp (from) used to show records by date.

	*/
	DateFrom *int32
	/*DateTo
	  Timestamp (to) used to show records by date

	*/
	DateTo *int32
	/*Limit
	  Number of records per page

	*/
	Limit *int32
	/*Page
	  Page number

	*/
	Page *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the voice history get params
func (o *VoiceHistoryGetParams) WithTimeout(timeout time.Duration) *VoiceHistoryGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the voice history get params
func (o *VoiceHistoryGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the voice history get params
func (o *VoiceHistoryGetParams) WithContext(ctx context.Context) *VoiceHistoryGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the voice history get params
func (o *VoiceHistoryGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the voice history get params
func (o *VoiceHistoryGetParams) WithHTTPClient(client *http.Client) *VoiceHistoryGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the voice history get params
func (o *VoiceHistoryGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateFrom adds the dateFrom to the voice history get params
func (o *VoiceHistoryGetParams) WithDateFrom(dateFrom *int32) *VoiceHistoryGetParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the voice history get params
func (o *VoiceHistoryGetParams) SetDateFrom(dateFrom *int32) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the voice history get params
func (o *VoiceHistoryGetParams) WithDateTo(dateTo *int32) *VoiceHistoryGetParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the voice history get params
func (o *VoiceHistoryGetParams) SetDateTo(dateTo *int32) {
	o.DateTo = dateTo
}

// WithLimit adds the limit to the voice history get params
func (o *VoiceHistoryGetParams) WithLimit(limit *int32) *VoiceHistoryGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the voice history get params
func (o *VoiceHistoryGetParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithPage adds the page to the voice history get params
func (o *VoiceHistoryGetParams) WithPage(page *int32) *VoiceHistoryGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the voice history get params
func (o *VoiceHistoryGetParams) SetPage(page *int32) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *VoiceHistoryGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateFrom != nil {

		// query param date_from
		var qrDateFrom int32
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := swag.FormatInt32(qrDateFrom)
		if qDateFrom != "" {
			if err := r.SetQueryParam("date_from", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param date_to
		var qrDateTo int32
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := swag.FormatInt32(qrDateTo)
		if qDateTo != "" {
			if err := r.SetQueryParam("date_to", qDateTo); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
