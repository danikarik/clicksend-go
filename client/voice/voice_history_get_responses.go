// Code generated by go-swagger; DO NOT EDIT.

package voice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// VoiceHistoryGetReader is a Reader for the VoiceHistoryGet structure.
type VoiceHistoryGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VoiceHistoryGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewVoiceHistoryGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewVoiceHistoryGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewVoiceHistoryGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewVoiceHistoryGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewVoiceHistoryGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewVoiceHistoryGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewVoiceHistoryGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewVoiceHistoryGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVoiceHistoryGetOK creates a VoiceHistoryGetOK with default headers values
func NewVoiceHistoryGetOK() *VoiceHistoryGetOK {
	return &VoiceHistoryGetOK{}
}

/*VoiceHistoryGetOK handles this case with default header values.

SUCCESS
*/
type VoiceHistoryGetOK struct {
	Payload string
}

func (o *VoiceHistoryGetOK) Error() string {
	return fmt.Sprintf("[GET /voice/history][%d] voiceHistoryGetOK  %+v", 200, o.Payload)
}

func (o *VoiceHistoryGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceHistoryGetBadRequest creates a VoiceHistoryGetBadRequest with default headers values
func NewVoiceHistoryGetBadRequest() *VoiceHistoryGetBadRequest {
	return &VoiceHistoryGetBadRequest{}
}

/*VoiceHistoryGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type VoiceHistoryGetBadRequest struct {
	Payload string
}

func (o *VoiceHistoryGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /voice/history][%d] voiceHistoryGetBadRequest  %+v", 400, o.Payload)
}

func (o *VoiceHistoryGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceHistoryGetUnauthorized creates a VoiceHistoryGetUnauthorized with default headers values
func NewVoiceHistoryGetUnauthorized() *VoiceHistoryGetUnauthorized {
	return &VoiceHistoryGetUnauthorized{}
}

/*VoiceHistoryGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type VoiceHistoryGetUnauthorized struct {
	Payload string
}

func (o *VoiceHistoryGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /voice/history][%d] voiceHistoryGetUnauthorized  %+v", 401, o.Payload)
}

func (o *VoiceHistoryGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceHistoryGetForbidden creates a VoiceHistoryGetForbidden with default headers values
func NewVoiceHistoryGetForbidden() *VoiceHistoryGetForbidden {
	return &VoiceHistoryGetForbidden{}
}

/*VoiceHistoryGetForbidden handles this case with default header values.

FORBIDDEN
*/
type VoiceHistoryGetForbidden struct {
	Payload string
}

func (o *VoiceHistoryGetForbidden) Error() string {
	return fmt.Sprintf("[GET /voice/history][%d] voiceHistoryGetForbidden  %+v", 403, o.Payload)
}

func (o *VoiceHistoryGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceHistoryGetNotFound creates a VoiceHistoryGetNotFound with default headers values
func NewVoiceHistoryGetNotFound() *VoiceHistoryGetNotFound {
	return &VoiceHistoryGetNotFound{}
}

/*VoiceHistoryGetNotFound handles this case with default header values.

NOT_FOUND
*/
type VoiceHistoryGetNotFound struct {
	Payload string
}

func (o *VoiceHistoryGetNotFound) Error() string {
	return fmt.Sprintf("[GET /voice/history][%d] voiceHistoryGetNotFound  %+v", 404, o.Payload)
}

func (o *VoiceHistoryGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceHistoryGetMethodNotAllowed creates a VoiceHistoryGetMethodNotAllowed with default headers values
func NewVoiceHistoryGetMethodNotAllowed() *VoiceHistoryGetMethodNotAllowed {
	return &VoiceHistoryGetMethodNotAllowed{}
}

/*VoiceHistoryGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type VoiceHistoryGetMethodNotAllowed struct {
	Payload string
}

func (o *VoiceHistoryGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /voice/history][%d] voiceHistoryGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *VoiceHistoryGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceHistoryGetTooManyRequests creates a VoiceHistoryGetTooManyRequests with default headers values
func NewVoiceHistoryGetTooManyRequests() *VoiceHistoryGetTooManyRequests {
	return &VoiceHistoryGetTooManyRequests{}
}

/*VoiceHistoryGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type VoiceHistoryGetTooManyRequests struct {
	Payload string
}

func (o *VoiceHistoryGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /voice/history][%d] voiceHistoryGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *VoiceHistoryGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceHistoryGetDefault creates a VoiceHistoryGetDefault with default headers values
func NewVoiceHistoryGetDefault(code int) *VoiceHistoryGetDefault {
	return &VoiceHistoryGetDefault{
		_statusCode: code,
	}
}

/*VoiceHistoryGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type VoiceHistoryGetDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the voice history get default response
func (o *VoiceHistoryGetDefault) Code() int {
	return o._statusCode
}

func (o *VoiceHistoryGetDefault) Error() string {
	return fmt.Sprintf("[GET /voice/history][%d] VoiceHistoryGet default  %+v", o._statusCode, o.Payload)
}

func (o *VoiceHistoryGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
