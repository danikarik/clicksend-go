// Code generated by go-swagger; DO NOT EDIT.

package voice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new voice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for voice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
VoiceCancelAllPut updates all voice messages as cancelled

Update all voice messages as cancelled
*/
func (a *Client) VoiceCancelAllPut(params *VoiceCancelAllPutParams, authInfo runtime.ClientAuthInfoWriter) (*VoiceCancelAllPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoiceCancelAllPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoiceCancelAllPut",
		Method:             "PUT",
		PathPattern:        "/voice/cancel-all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoiceCancelAllPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoiceCancelAllPutOK), nil

}

/*
VoiceCancelByMessageIDPut updates voice message status as cancelled

Update voice message status as cancelled
*/
func (a *Client) VoiceCancelByMessageIDPut(params *VoiceCancelByMessageIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*VoiceCancelByMessageIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoiceCancelByMessageIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoiceCancelByMessageIdPut",
		Method:             "PUT",
		PathPattern:        "/voice/{message_id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoiceCancelByMessageIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoiceCancelByMessageIDPutOK), nil

}

/*
VoiceHistoryExportGet exports voice history

Export voice history
*/
func (a *Client) VoiceHistoryExportGet(params *VoiceHistoryExportGetParams, authInfo runtime.ClientAuthInfoWriter) (*VoiceHistoryExportGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoiceHistoryExportGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoiceHistoryExportGet",
		Method:             "GET",
		PathPattern:        "/voice/history/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoiceHistoryExportGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoiceHistoryExportGetOK), nil

}

/*
VoiceHistoryGet gets all voice history

Get all voice history
*/
func (a *Client) VoiceHistoryGet(params *VoiceHistoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*VoiceHistoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoiceHistoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoiceHistoryGet",
		Method:             "GET",
		PathPattern:        "/voice/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoiceHistoryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoiceHistoryGetOK), nil

}

/*
VoiceLangGet gets all voice languages

Get all voice languages
*/
func (a *Client) VoiceLangGet(params *VoiceLangGetParams, authInfo runtime.ClientAuthInfoWriter) (*VoiceLangGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoiceLangGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoiceLangGet",
		Method:             "GET",
		PathPattern:        "/voice/lang",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoiceLangGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoiceLangGetOK), nil

}

/*
VoicePricePost calculates voice price

Calculate voice price
*/
func (a *Client) VoicePricePost(params *VoicePricePostParams, authInfo runtime.ClientAuthInfoWriter) (*VoicePricePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicePricePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicePricePost",
		Method:             "POST",
		PathPattern:        "/voice/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicePricePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoicePricePostOK), nil

}

/*
VoiceReceiptsGet gets all delivery receipts

Get all delivery receipts
*/
func (a *Client) VoiceReceiptsGet(params *VoiceReceiptsGetParams, authInfo runtime.ClientAuthInfoWriter) (*VoiceReceiptsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoiceReceiptsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoiceReceiptsGet",
		Method:             "GET",
		PathPattern:        "/voice/receipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoiceReceiptsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoiceReceiptsGetOK), nil

}

/*
VoiceReceiptsPost adds a delivery receipt

Add a delivery receipt
*/
func (a *Client) VoiceReceiptsPost(params *VoiceReceiptsPostParams, authInfo runtime.ClientAuthInfoWriter) (*VoiceReceiptsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoiceReceiptsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoiceReceiptsPost",
		Method:             "POST",
		PathPattern:        "/voice/receipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoiceReceiptsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoiceReceiptsPostOK), nil

}

/*
VoiceReceiptsReadPut marks delivery receipts as read

Mark delivery receipts as read
*/
func (a *Client) VoiceReceiptsReadPut(params *VoiceReceiptsReadPutParams, authInfo runtime.ClientAuthInfoWriter) (*VoiceReceiptsReadPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoiceReceiptsReadPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoiceReceiptsReadPut",
		Method:             "PUT",
		PathPattern:        "/voice/receipts-read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoiceReceiptsReadPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoiceReceiptsReadPutOK), nil

}

/*
VoiceSendPost sends voice message s

Send a voice call
*/
func (a *Client) VoiceSendPost(params *VoiceSendPostParams, authInfo runtime.ClientAuthInfoWriter) (*VoiceSendPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoiceSendPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoiceSendPost",
		Method:             "POST",
		PathPattern:        "/voice/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoiceSendPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VoiceSendPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
