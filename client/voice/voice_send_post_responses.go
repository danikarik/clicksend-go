// Code generated by go-swagger; DO NOT EDIT.

package voice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// VoiceSendPostReader is a Reader for the VoiceSendPost structure.
type VoiceSendPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VoiceSendPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewVoiceSendPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewVoiceSendPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewVoiceSendPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewVoiceSendPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewVoiceSendPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewVoiceSendPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewVoiceSendPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewVoiceSendPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVoiceSendPostOK creates a VoiceSendPostOK with default headers values
func NewVoiceSendPostOK() *VoiceSendPostOK {
	return &VoiceSendPostOK{}
}

/*VoiceSendPostOK handles this case with default header values.

SUCCESS
*/
type VoiceSendPostOK struct {
	Payload string
}

func (o *VoiceSendPostOK) Error() string {
	return fmt.Sprintf("[POST /voice/send][%d] voiceSendPostOK  %+v", 200, o.Payload)
}

func (o *VoiceSendPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceSendPostBadRequest creates a VoiceSendPostBadRequest with default headers values
func NewVoiceSendPostBadRequest() *VoiceSendPostBadRequest {
	return &VoiceSendPostBadRequest{}
}

/*VoiceSendPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type VoiceSendPostBadRequest struct {
	Payload string
}

func (o *VoiceSendPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /voice/send][%d] voiceSendPostBadRequest  %+v", 400, o.Payload)
}

func (o *VoiceSendPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceSendPostUnauthorized creates a VoiceSendPostUnauthorized with default headers values
func NewVoiceSendPostUnauthorized() *VoiceSendPostUnauthorized {
	return &VoiceSendPostUnauthorized{}
}

/*VoiceSendPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type VoiceSendPostUnauthorized struct {
	Payload string
}

func (o *VoiceSendPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /voice/send][%d] voiceSendPostUnauthorized  %+v", 401, o.Payload)
}

func (o *VoiceSendPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceSendPostForbidden creates a VoiceSendPostForbidden with default headers values
func NewVoiceSendPostForbidden() *VoiceSendPostForbidden {
	return &VoiceSendPostForbidden{}
}

/*VoiceSendPostForbidden handles this case with default header values.

FORBIDDEN
*/
type VoiceSendPostForbidden struct {
	Payload string
}

func (o *VoiceSendPostForbidden) Error() string {
	return fmt.Sprintf("[POST /voice/send][%d] voiceSendPostForbidden  %+v", 403, o.Payload)
}

func (o *VoiceSendPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceSendPostNotFound creates a VoiceSendPostNotFound with default headers values
func NewVoiceSendPostNotFound() *VoiceSendPostNotFound {
	return &VoiceSendPostNotFound{}
}

/*VoiceSendPostNotFound handles this case with default header values.

NOT_FOUND
*/
type VoiceSendPostNotFound struct {
	Payload string
}

func (o *VoiceSendPostNotFound) Error() string {
	return fmt.Sprintf("[POST /voice/send][%d] voiceSendPostNotFound  %+v", 404, o.Payload)
}

func (o *VoiceSendPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceSendPostMethodNotAllowed creates a VoiceSendPostMethodNotAllowed with default headers values
func NewVoiceSendPostMethodNotAllowed() *VoiceSendPostMethodNotAllowed {
	return &VoiceSendPostMethodNotAllowed{}
}

/*VoiceSendPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type VoiceSendPostMethodNotAllowed struct {
	Payload string
}

func (o *VoiceSendPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /voice/send][%d] voiceSendPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *VoiceSendPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceSendPostTooManyRequests creates a VoiceSendPostTooManyRequests with default headers values
func NewVoiceSendPostTooManyRequests() *VoiceSendPostTooManyRequests {
	return &VoiceSendPostTooManyRequests{}
}

/*VoiceSendPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type VoiceSendPostTooManyRequests struct {
	Payload string
}

func (o *VoiceSendPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /voice/send][%d] voiceSendPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *VoiceSendPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceSendPostDefault creates a VoiceSendPostDefault with default headers values
func NewVoiceSendPostDefault(code int) *VoiceSendPostDefault {
	return &VoiceSendPostDefault{
		_statusCode: code,
	}
}

/*VoiceSendPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type VoiceSendPostDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the voice send post default response
func (o *VoiceSendPostDefault) Code() int {
	return o._statusCode
}

func (o *VoiceSendPostDefault) Error() string {
	return fmt.Sprintf("[POST /voice/send][%d] VoiceSendPost default  %+v", o._statusCode, o.Payload)
}

func (o *VoiceSendPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
