// Code generated by go-swagger; DO NOT EDIT.

package voice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// VoiceLangGetReader is a Reader for the VoiceLangGet structure.
type VoiceLangGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VoiceLangGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewVoiceLangGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewVoiceLangGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewVoiceLangGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewVoiceLangGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewVoiceLangGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewVoiceLangGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewVoiceLangGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewVoiceLangGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVoiceLangGetOK creates a VoiceLangGetOK with default headers values
func NewVoiceLangGetOK() *VoiceLangGetOK {
	return &VoiceLangGetOK{}
}

/*VoiceLangGetOK handles this case with default header values.

SUCCESS
*/
type VoiceLangGetOK struct {
	Payload interface{}
}

func (o *VoiceLangGetOK) Error() string {
	return fmt.Sprintf("[GET /voice/lang][%d] voiceLangGetOK  %+v", 200, o.Payload)
}

func (o *VoiceLangGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceLangGetBadRequest creates a VoiceLangGetBadRequest with default headers values
func NewVoiceLangGetBadRequest() *VoiceLangGetBadRequest {
	return &VoiceLangGetBadRequest{}
}

/*VoiceLangGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type VoiceLangGetBadRequest struct {
	Payload interface{}
}

func (o *VoiceLangGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /voice/lang][%d] voiceLangGetBadRequest  %+v", 400, o.Payload)
}

func (o *VoiceLangGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceLangGetUnauthorized creates a VoiceLangGetUnauthorized with default headers values
func NewVoiceLangGetUnauthorized() *VoiceLangGetUnauthorized {
	return &VoiceLangGetUnauthorized{}
}

/*VoiceLangGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type VoiceLangGetUnauthorized struct {
	Payload interface{}
}

func (o *VoiceLangGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /voice/lang][%d] voiceLangGetUnauthorized  %+v", 401, o.Payload)
}

func (o *VoiceLangGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceLangGetForbidden creates a VoiceLangGetForbidden with default headers values
func NewVoiceLangGetForbidden() *VoiceLangGetForbidden {
	return &VoiceLangGetForbidden{}
}

/*VoiceLangGetForbidden handles this case with default header values.

FORBIDDEN
*/
type VoiceLangGetForbidden struct {
	Payload interface{}
}

func (o *VoiceLangGetForbidden) Error() string {
	return fmt.Sprintf("[GET /voice/lang][%d] voiceLangGetForbidden  %+v", 403, o.Payload)
}

func (o *VoiceLangGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceLangGetNotFound creates a VoiceLangGetNotFound with default headers values
func NewVoiceLangGetNotFound() *VoiceLangGetNotFound {
	return &VoiceLangGetNotFound{}
}

/*VoiceLangGetNotFound handles this case with default header values.

NOT_FOUND
*/
type VoiceLangGetNotFound struct {
	Payload interface{}
}

func (o *VoiceLangGetNotFound) Error() string {
	return fmt.Sprintf("[GET /voice/lang][%d] voiceLangGetNotFound  %+v", 404, o.Payload)
}

func (o *VoiceLangGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceLangGetMethodNotAllowed creates a VoiceLangGetMethodNotAllowed with default headers values
func NewVoiceLangGetMethodNotAllowed() *VoiceLangGetMethodNotAllowed {
	return &VoiceLangGetMethodNotAllowed{}
}

/*VoiceLangGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type VoiceLangGetMethodNotAllowed struct {
	Payload interface{}
}

func (o *VoiceLangGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /voice/lang][%d] voiceLangGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *VoiceLangGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceLangGetTooManyRequests creates a VoiceLangGetTooManyRequests with default headers values
func NewVoiceLangGetTooManyRequests() *VoiceLangGetTooManyRequests {
	return &VoiceLangGetTooManyRequests{}
}

/*VoiceLangGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type VoiceLangGetTooManyRequests struct {
	Payload interface{}
}

func (o *VoiceLangGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /voice/lang][%d] voiceLangGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *VoiceLangGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoiceLangGetDefault creates a VoiceLangGetDefault with default headers values
func NewVoiceLangGetDefault(code int) *VoiceLangGetDefault {
	return &VoiceLangGetDefault{
		_statusCode: code,
	}
}

/*VoiceLangGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type VoiceLangGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the voice lang get default response
func (o *VoiceLangGetDefault) Code() int {
	return o._statusCode
}

func (o *VoiceLangGetDefault) Error() string {
	return fmt.Sprintf("[GET /voice/lang][%d] VoiceLangGet default  %+v", o._statusCode, o.Payload)
}

func (o *VoiceLangGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
