// Code generated by go-swagger; DO NOT EDIT.

package email_marketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new email marketing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for email marketing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AllowedEmailAddressGet gets all email addresses

Get all email addresses
*/
func (a *Client) AllowedEmailAddressGet(params *AllowedEmailAddressGetParams, authInfo runtime.ClientAuthInfoWriter) (*AllowedEmailAddressGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllowedEmailAddressGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AllowedEmailAddressGet",
		Method:             "GET",
		PathPattern:        "/email/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllowedEmailAddressGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllowedEmailAddressGetOK), nil

}

/*
AllowedEmailAddressPost creates allowed email address

Create allowed Email Address
*/
func (a *Client) AllowedEmailAddressPost(params *AllowedEmailAddressPostParams, authInfo runtime.ClientAuthInfoWriter) (*AllowedEmailAddressPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllowedEmailAddressPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AllowedEmailAddressPost",
		Method:             "POST",
		PathPattern:        "/email/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllowedEmailAddressPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AllowedEmailAddressPostOK), nil

}

/*
CancelEmailCampaignPut cancels email campaign

Cancel email campaign
*/
func (a *Client) CancelEmailCampaignPut(params *CancelEmailCampaignPutParams, authInfo runtime.ClientAuthInfoWriter) (*CancelEmailCampaignPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelEmailCampaignPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CancelEmailCampaignPut",
		Method:             "PUT",
		PathPattern:        "/email-campaigns/{email_campaign_id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelEmailCampaignPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelEmailCampaignPutOK), nil

}

/*
EmailCampaignGet gets specific email campaign

Get specific email campaign
*/
func (a *Client) EmailCampaignGet(params *EmailCampaignGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmailCampaignGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailCampaignGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailCampaignGet",
		Method:             "GET",
		PathPattern:        "/email-campaigns/{email_campaign_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailCampaignGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailCampaignGetOK), nil

}

/*
EmailCampaignHistoryExportGet exports specific email campaign history

Export specific email campaign history
*/
func (a *Client) EmailCampaignHistoryExportGet(params *EmailCampaignHistoryExportGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmailCampaignHistoryExportGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailCampaignHistoryExportGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailCampaignHistoryExportGet",
		Method:             "GET",
		PathPattern:        "/email-campaigns/{email_campaign_id}/history/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailCampaignHistoryExportGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailCampaignHistoryExportGetOK), nil

}

/*
EmailCampaignHistoryGet gets specific email campaign history

Get specific email campaign history
*/
func (a *Client) EmailCampaignHistoryGet(params *EmailCampaignHistoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmailCampaignHistoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailCampaignHistoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailCampaignHistoryGet",
		Method:             "GET",
		PathPattern:        "/email-campaigns/{email_campaign_id}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailCampaignHistoryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailCampaignHistoryGetOK), nil

}

/*
EmailCampaignPost sends email campaign

Send email campaign
*/
func (a *Client) EmailCampaignPost(params *EmailCampaignPostParams, authInfo runtime.ClientAuthInfoWriter) (*EmailCampaignPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailCampaignPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailCampaignPost",
		Method:             "POST",
		PathPattern:        "/email-campaigns/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailCampaignPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailCampaignPostOK), nil

}

/*
EmailCampaignPricePost calculates email campaign price

Calculate email campaign price
*/
func (a *Client) EmailCampaignPricePost(params *EmailCampaignPricePostParams, authInfo runtime.ClientAuthInfoWriter) (*EmailCampaignPricePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailCampaignPricePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailCampaignPricePost",
		Method:             "POST",
		PathPattern:        "/email-campaigns/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailCampaignPricePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailCampaignPricePostOK), nil

}

/*
EmailCampaignPut edits email campaign

Edit email campaign
*/
func (a *Client) EmailCampaignPut(params *EmailCampaignPutParams, authInfo runtime.ClientAuthInfoWriter) (*EmailCampaignPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailCampaignPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailCampaignPut",
		Method:             "PUT",
		PathPattern:        "/email-campaigns/{email_campaign_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailCampaignPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailCampaignPutOK), nil

}

/*
EmailCampaignsGet gets all email campaigns

Get all email campaigns
*/
func (a *Client) EmailCampaignsGet(params *EmailCampaignsGetParams, authInfo runtime.ClientAuthInfoWriter) (*EmailCampaignsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailCampaignsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailCampaignsGet",
		Method:             "GET",
		PathPattern:        "/email-campaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailCampaignsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EmailCampaignsGetOK), nil

}

/*
SendVerificationTokenGet sends verification token

Send verification token
*/
func (a *Client) SendVerificationTokenGet(params *SendVerificationTokenGetParams, authInfo runtime.ClientAuthInfoWriter) (*SendVerificationTokenGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendVerificationTokenGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SendVerificationTokenGet",
		Method:             "PUT",
		PathPattern:        "/email/address-verify/{email_address_id}/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendVerificationTokenGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendVerificationTokenGetOK), nil

}

/*
SpecificAllowedEmailAddressDelete deletes specific email address

Delete specific email address
*/
func (a *Client) SpecificAllowedEmailAddressDelete(params *SpecificAllowedEmailAddressDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SpecificAllowedEmailAddressDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecificAllowedEmailAddressDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SpecificAllowedEmailAddressDelete",
		Method:             "DELETE",
		PathPattern:        "/email/addresses/{email_address_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecificAllowedEmailAddressDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SpecificAllowedEmailAddressDeleteOK), nil

}

/*
SpecificAllowedEmailAddressGet gets specific email address

Get specific email address
*/
func (a *Client) SpecificAllowedEmailAddressGet(params *SpecificAllowedEmailAddressGetParams, authInfo runtime.ClientAuthInfoWriter) (*SpecificAllowedEmailAddressGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpecificAllowedEmailAddressGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SpecificAllowedEmailAddressGet",
		Method:             "GET",
		PathPattern:        "/email/addresses/{email_address_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpecificAllowedEmailAddressGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SpecificAllowedEmailAddressGetOK), nil

}

/*
VerifyAllowedEmailAddressGet verifies email address using verification token

Verify email address using verification token
*/
func (a *Client) VerifyAllowedEmailAddressGet(params *VerifyAllowedEmailAddressGetParams, authInfo runtime.ClientAuthInfoWriter) (*VerifyAllowedEmailAddressGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyAllowedEmailAddressGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VerifyAllowedEmailAddressGet",
		Method:             "PUT",
		PathPattern:        "/email/address-verify/{email_address_id}/verify/{activation_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerifyAllowedEmailAddressGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VerifyAllowedEmailAddressGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
