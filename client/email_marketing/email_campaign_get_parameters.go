// Code generated by go-swagger; DO NOT EDIT.

package email_marketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmailCampaignGetParams creates a new EmailCampaignGetParams object
// with the default values initialized.
func NewEmailCampaignGetParams() *EmailCampaignGetParams {
	var ()
	return &EmailCampaignGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmailCampaignGetParamsWithTimeout creates a new EmailCampaignGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmailCampaignGetParamsWithTimeout(timeout time.Duration) *EmailCampaignGetParams {
	var ()
	return &EmailCampaignGetParams{

		timeout: timeout,
	}
}

// NewEmailCampaignGetParamsWithContext creates a new EmailCampaignGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmailCampaignGetParamsWithContext(ctx context.Context) *EmailCampaignGetParams {
	var ()
	return &EmailCampaignGetParams{

		Context: ctx,
	}
}

// NewEmailCampaignGetParamsWithHTTPClient creates a new EmailCampaignGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmailCampaignGetParamsWithHTTPClient(client *http.Client) *EmailCampaignGetParams {
	var ()
	return &EmailCampaignGetParams{
		HTTPClient: client,
	}
}

/*EmailCampaignGetParams contains all the parameters to send to the API endpoint
for the email campaign get operation typically these are written to a http.Request
*/
type EmailCampaignGetParams struct {

	/*EmailCampaignID
	  Allowed email campaign id

	*/
	EmailCampaignID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the email campaign get params
func (o *EmailCampaignGetParams) WithTimeout(timeout time.Duration) *EmailCampaignGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the email campaign get params
func (o *EmailCampaignGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the email campaign get params
func (o *EmailCampaignGetParams) WithContext(ctx context.Context) *EmailCampaignGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the email campaign get params
func (o *EmailCampaignGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the email campaign get params
func (o *EmailCampaignGetParams) WithHTTPClient(client *http.Client) *EmailCampaignGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the email campaign get params
func (o *EmailCampaignGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmailCampaignID adds the emailCampaignID to the email campaign get params
func (o *EmailCampaignGetParams) WithEmailCampaignID(emailCampaignID int32) *EmailCampaignGetParams {
	o.SetEmailCampaignID(emailCampaignID)
	return o
}

// SetEmailCampaignID adds the emailCampaignId to the email campaign get params
func (o *EmailCampaignGetParams) SetEmailCampaignID(emailCampaignID int32) {
	o.EmailCampaignID = emailCampaignID
}

// WriteToRequest writes these params to a swagger request
func (o *EmailCampaignGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param email_campaign_id
	if err := r.SetPathParam("email_campaign_id", swag.FormatInt32(o.EmailCampaignID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
