// Code generated by go-swagger; DO NOT EDIT.

package email_marketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmailCampaignHistoryExportGetParams creates a new EmailCampaignHistoryExportGetParams object
// with the default values initialized.
func NewEmailCampaignHistoryExportGetParams() *EmailCampaignHistoryExportGetParams {
	var ()
	return &EmailCampaignHistoryExportGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmailCampaignHistoryExportGetParamsWithTimeout creates a new EmailCampaignHistoryExportGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmailCampaignHistoryExportGetParamsWithTimeout(timeout time.Duration) *EmailCampaignHistoryExportGetParams {
	var ()
	return &EmailCampaignHistoryExportGetParams{

		timeout: timeout,
	}
}

// NewEmailCampaignHistoryExportGetParamsWithContext creates a new EmailCampaignHistoryExportGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmailCampaignHistoryExportGetParamsWithContext(ctx context.Context) *EmailCampaignHistoryExportGetParams {
	var ()
	return &EmailCampaignHistoryExportGetParams{

		Context: ctx,
	}
}

// NewEmailCampaignHistoryExportGetParamsWithHTTPClient creates a new EmailCampaignHistoryExportGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmailCampaignHistoryExportGetParamsWithHTTPClient(client *http.Client) *EmailCampaignHistoryExportGetParams {
	var ()
	return &EmailCampaignHistoryExportGetParams{
		HTTPClient: client,
	}
}

/*EmailCampaignHistoryExportGetParams contains all the parameters to send to the API endpoint
for the email campaign history export get operation typically these are written to a http.Request
*/
type EmailCampaignHistoryExportGetParams struct {

	/*DateFrom
	  Start date

	*/
	DateFrom *int32
	/*DateTo
	  End date

	*/
	DateTo *int32
	/*EmailCampaignID
	  Allowed email campaign id

	*/
	EmailCampaignID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) WithTimeout(timeout time.Duration) *EmailCampaignHistoryExportGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) WithContext(ctx context.Context) *EmailCampaignHistoryExportGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) WithHTTPClient(client *http.Client) *EmailCampaignHistoryExportGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateFrom adds the dateFrom to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) WithDateFrom(dateFrom *int32) *EmailCampaignHistoryExportGetParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) SetDateFrom(dateFrom *int32) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) WithDateTo(dateTo *int32) *EmailCampaignHistoryExportGetParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) SetDateTo(dateTo *int32) {
	o.DateTo = dateTo
}

// WithEmailCampaignID adds the emailCampaignID to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) WithEmailCampaignID(emailCampaignID int32) *EmailCampaignHistoryExportGetParams {
	o.SetEmailCampaignID(emailCampaignID)
	return o
}

// SetEmailCampaignID adds the emailCampaignId to the email campaign history export get params
func (o *EmailCampaignHistoryExportGetParams) SetEmailCampaignID(emailCampaignID int32) {
	o.EmailCampaignID = emailCampaignID
}

// WriteToRequest writes these params to a swagger request
func (o *EmailCampaignHistoryExportGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateFrom != nil {

		// query param date_from
		var qrDateFrom int32
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := swag.FormatInt32(qrDateFrom)
		if qDateFrom != "" {
			if err := r.SetQueryParam("date_from", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param date_to
		var qrDateTo int32
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := swag.FormatInt32(qrDateTo)
		if qDateTo != "" {
			if err := r.SetQueryParam("date_to", qDateTo); err != nil {
				return err
			}
		}

	}

	// path param email_campaign_id
	if err := r.SetPathParam("email_campaign_id", swag.FormatInt32(o.EmailCampaignID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
