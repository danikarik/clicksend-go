// Code generated by go-swagger; DO NOT EDIT.

package email_marketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/danikarik/clicksend-go/models"
)

// NewEmailCampaignPutParams creates a new EmailCampaignPutParams object
// with the default values initialized.
func NewEmailCampaignPutParams() *EmailCampaignPutParams {
	var ()
	return &EmailCampaignPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmailCampaignPutParamsWithTimeout creates a new EmailCampaignPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmailCampaignPutParamsWithTimeout(timeout time.Duration) *EmailCampaignPutParams {
	var ()
	return &EmailCampaignPutParams{

		timeout: timeout,
	}
}

// NewEmailCampaignPutParamsWithContext creates a new EmailCampaignPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmailCampaignPutParamsWithContext(ctx context.Context) *EmailCampaignPutParams {
	var ()
	return &EmailCampaignPutParams{

		Context: ctx,
	}
}

// NewEmailCampaignPutParamsWithHTTPClient creates a new EmailCampaignPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmailCampaignPutParamsWithHTTPClient(client *http.Client) *EmailCampaignPutParams {
	var ()
	return &EmailCampaignPutParams{
		HTTPClient: client,
	}
}

/*EmailCampaignPutParams contains all the parameters to send to the API endpoint
for the email campaign put operation typically these are written to a http.Request
*/
type EmailCampaignPutParams struct {

	/*EmailCampaign
	  Email model

	*/
	EmailCampaign models.EmailCampaign
	/*EmailCampaignID
	  Allowed email campaign id

	*/
	EmailCampaignID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the email campaign put params
func (o *EmailCampaignPutParams) WithTimeout(timeout time.Duration) *EmailCampaignPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the email campaign put params
func (o *EmailCampaignPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the email campaign put params
func (o *EmailCampaignPutParams) WithContext(ctx context.Context) *EmailCampaignPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the email campaign put params
func (o *EmailCampaignPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the email campaign put params
func (o *EmailCampaignPutParams) WithHTTPClient(client *http.Client) *EmailCampaignPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the email campaign put params
func (o *EmailCampaignPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmailCampaign adds the emailCampaign to the email campaign put params
func (o *EmailCampaignPutParams) WithEmailCampaign(emailCampaign models.EmailCampaign) *EmailCampaignPutParams {
	o.SetEmailCampaign(emailCampaign)
	return o
}

// SetEmailCampaign adds the emailCampaign to the email campaign put params
func (o *EmailCampaignPutParams) SetEmailCampaign(emailCampaign models.EmailCampaign) {
	o.EmailCampaign = emailCampaign
}

// WithEmailCampaignID adds the emailCampaignID to the email campaign put params
func (o *EmailCampaignPutParams) WithEmailCampaignID(emailCampaignID int32) *EmailCampaignPutParams {
	o.SetEmailCampaignID(emailCampaignID)
	return o
}

// SetEmailCampaignID adds the emailCampaignId to the email campaign put params
func (o *EmailCampaignPutParams) SetEmailCampaignID(emailCampaignID int32) {
	o.EmailCampaignID = emailCampaignID
}

// WriteToRequest writes these params to a swagger request
func (o *EmailCampaignPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.EmailCampaign); err != nil {
		return err
	}

	// path param email_campaign_id
	if err := r.SetPathParam("email_campaign_id", swag.FormatInt32(o.EmailCampaignID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
