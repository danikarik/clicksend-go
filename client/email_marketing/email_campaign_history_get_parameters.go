// Code generated by go-swagger; DO NOT EDIT.

package email_marketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmailCampaignHistoryGetParams creates a new EmailCampaignHistoryGetParams object
// with the default values initialized.
func NewEmailCampaignHistoryGetParams() *EmailCampaignHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &EmailCampaignHistoryGetParams{
		Limit: &limitDefault,
		Page:  &pageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewEmailCampaignHistoryGetParamsWithTimeout creates a new EmailCampaignHistoryGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmailCampaignHistoryGetParamsWithTimeout(timeout time.Duration) *EmailCampaignHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &EmailCampaignHistoryGetParams{
		Limit: &limitDefault,
		Page:  &pageDefault,

		timeout: timeout,
	}
}

// NewEmailCampaignHistoryGetParamsWithContext creates a new EmailCampaignHistoryGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmailCampaignHistoryGetParamsWithContext(ctx context.Context) *EmailCampaignHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &EmailCampaignHistoryGetParams{
		Limit: &limitDefault,
		Page:  &pageDefault,

		Context: ctx,
	}
}

// NewEmailCampaignHistoryGetParamsWithHTTPClient creates a new EmailCampaignHistoryGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmailCampaignHistoryGetParamsWithHTTPClient(client *http.Client) *EmailCampaignHistoryGetParams {
	var (
		limitDefault = int32(10)
		pageDefault  = int32(1)
	)
	return &EmailCampaignHistoryGetParams{
		Limit:      &limitDefault,
		Page:       &pageDefault,
		HTTPClient: client,
	}
}

/*EmailCampaignHistoryGetParams contains all the parameters to send to the API endpoint
for the email campaign history get operation typically these are written to a http.Request
*/
type EmailCampaignHistoryGetParams struct {

	/*DateFrom
	  Start date

	*/
	DateFrom *int32
	/*DateTo
	  End date

	*/
	DateTo *int32
	/*EmailCampaignID
	  Allowed email campaign id

	*/
	EmailCampaignID int32
	/*Limit
	  Number of records per page

	*/
	Limit *int32
	/*Page
	  Page number

	*/
	Page *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) WithTimeout(timeout time.Duration) *EmailCampaignHistoryGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) WithContext(ctx context.Context) *EmailCampaignHistoryGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) WithHTTPClient(client *http.Client) *EmailCampaignHistoryGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateFrom adds the dateFrom to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) WithDateFrom(dateFrom *int32) *EmailCampaignHistoryGetParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) SetDateFrom(dateFrom *int32) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) WithDateTo(dateTo *int32) *EmailCampaignHistoryGetParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) SetDateTo(dateTo *int32) {
	o.DateTo = dateTo
}

// WithEmailCampaignID adds the emailCampaignID to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) WithEmailCampaignID(emailCampaignID int32) *EmailCampaignHistoryGetParams {
	o.SetEmailCampaignID(emailCampaignID)
	return o
}

// SetEmailCampaignID adds the emailCampaignId to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) SetEmailCampaignID(emailCampaignID int32) {
	o.EmailCampaignID = emailCampaignID
}

// WithLimit adds the limit to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) WithLimit(limit *int32) *EmailCampaignHistoryGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithPage adds the page to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) WithPage(page *int32) *EmailCampaignHistoryGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the email campaign history get params
func (o *EmailCampaignHistoryGetParams) SetPage(page *int32) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *EmailCampaignHistoryGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateFrom != nil {

		// query param date_from
		var qrDateFrom int32
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := swag.FormatInt32(qrDateFrom)
		if qDateFrom != "" {
			if err := r.SetQueryParam("date_from", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param date_to
		var qrDateTo int32
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := swag.FormatInt32(qrDateTo)
		if qDateTo != "" {
			if err := r.SetQueryParam("date_to", qDateTo); err != nil {
				return err
			}
		}

	}

	// path param email_campaign_id
	if err := r.SetPathParam("email_campaign_id", swag.FormatInt32(o.EmailCampaignID)); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
