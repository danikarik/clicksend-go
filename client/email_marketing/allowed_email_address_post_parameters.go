// Code generated by go-swagger; DO NOT EDIT.

package email_marketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/danikarik/clicksend-go/models"
)

// NewAllowedEmailAddressPostParams creates a new AllowedEmailAddressPostParams object
// with the default values initialized.
func NewAllowedEmailAddressPostParams() *AllowedEmailAddressPostParams {
	var ()
	return &AllowedEmailAddressPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAllowedEmailAddressPostParamsWithTimeout creates a new AllowedEmailAddressPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAllowedEmailAddressPostParamsWithTimeout(timeout time.Duration) *AllowedEmailAddressPostParams {
	var ()
	return &AllowedEmailAddressPostParams{

		timeout: timeout,
	}
}

// NewAllowedEmailAddressPostParamsWithContext creates a new AllowedEmailAddressPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewAllowedEmailAddressPostParamsWithContext(ctx context.Context) *AllowedEmailAddressPostParams {
	var ()
	return &AllowedEmailAddressPostParams{

		Context: ctx,
	}
}

// NewAllowedEmailAddressPostParamsWithHTTPClient creates a new AllowedEmailAddressPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAllowedEmailAddressPostParamsWithHTTPClient(client *http.Client) *AllowedEmailAddressPostParams {
	var ()
	return &AllowedEmailAddressPostParams{
		HTTPClient: client,
	}
}

/*AllowedEmailAddressPostParams contains all the parameters to send to the API endpoint
for the allowed email address post operation typically these are written to a http.Request
*/
type AllowedEmailAddressPostParams struct {

	/*EmailAddress*/
	EmailAddress *models.EmailAddress

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the allowed email address post params
func (o *AllowedEmailAddressPostParams) WithTimeout(timeout time.Duration) *AllowedEmailAddressPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the allowed email address post params
func (o *AllowedEmailAddressPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the allowed email address post params
func (o *AllowedEmailAddressPostParams) WithContext(ctx context.Context) *AllowedEmailAddressPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the allowed email address post params
func (o *AllowedEmailAddressPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the allowed email address post params
func (o *AllowedEmailAddressPostParams) WithHTTPClient(client *http.Client) *AllowedEmailAddressPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the allowed email address post params
func (o *AllowedEmailAddressPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmailAddress adds the emailAddress to the allowed email address post params
func (o *AllowedEmailAddressPostParams) WithEmailAddress(emailAddress *models.EmailAddress) *AllowedEmailAddressPostParams {
	o.SetEmailAddress(emailAddress)
	return o
}

// SetEmailAddress adds the emailAddress to the allowed email address post params
func (o *AllowedEmailAddressPostParams) SetEmailAddress(emailAddress *models.EmailAddress) {
	o.EmailAddress = emailAddress
}

// WriteToRequest writes these params to a swagger request
func (o *AllowedEmailAddressPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmailAddress != nil {
		if err := r.SetBodyParam(o.EmailAddress); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
