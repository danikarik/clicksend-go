// Code generated by go-swagger; DO NOT EDIT.

package sms_delivery_receipt_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SMSDeliveryReceiptAutomationGetReader is a Reader for the SMSDeliveryReceiptAutomationGet structure.
type SMSDeliveryReceiptAutomationGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SMSDeliveryReceiptAutomationGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSMSDeliveryReceiptAutomationGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSMSDeliveryReceiptAutomationGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSMSDeliveryReceiptAutomationGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSMSDeliveryReceiptAutomationGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSMSDeliveryReceiptAutomationGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSMSDeliveryReceiptAutomationGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSMSDeliveryReceiptAutomationGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSMSDeliveryReceiptAutomationGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSMSDeliveryReceiptAutomationGetOK creates a SMSDeliveryReceiptAutomationGetOK with default headers values
func NewSMSDeliveryReceiptAutomationGetOK() *SMSDeliveryReceiptAutomationGetOK {
	return &SMSDeliveryReceiptAutomationGetOK{}
}

/*SMSDeliveryReceiptAutomationGetOK handles this case with default header values.

SUCCESS
*/
type SMSDeliveryReceiptAutomationGetOK struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationGetOK) Error() string {
	return fmt.Sprintf("[GET /automations/sms/receipts/{receipt_rule_id}][%d] smsDeliveryReceiptAutomationGetOK  %+v", 200, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationGetBadRequest creates a SMSDeliveryReceiptAutomationGetBadRequest with default headers values
func NewSMSDeliveryReceiptAutomationGetBadRequest() *SMSDeliveryReceiptAutomationGetBadRequest {
	return &SMSDeliveryReceiptAutomationGetBadRequest{}
}

/*SMSDeliveryReceiptAutomationGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SMSDeliveryReceiptAutomationGetBadRequest struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /automations/sms/receipts/{receipt_rule_id}][%d] smsDeliveryReceiptAutomationGetBadRequest  %+v", 400, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationGetUnauthorized creates a SMSDeliveryReceiptAutomationGetUnauthorized with default headers values
func NewSMSDeliveryReceiptAutomationGetUnauthorized() *SMSDeliveryReceiptAutomationGetUnauthorized {
	return &SMSDeliveryReceiptAutomationGetUnauthorized{}
}

/*SMSDeliveryReceiptAutomationGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SMSDeliveryReceiptAutomationGetUnauthorized struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /automations/sms/receipts/{receipt_rule_id}][%d] smsDeliveryReceiptAutomationGetUnauthorized  %+v", 401, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationGetForbidden creates a SMSDeliveryReceiptAutomationGetForbidden with default headers values
func NewSMSDeliveryReceiptAutomationGetForbidden() *SMSDeliveryReceiptAutomationGetForbidden {
	return &SMSDeliveryReceiptAutomationGetForbidden{}
}

/*SMSDeliveryReceiptAutomationGetForbidden handles this case with default header values.

FORBIDDEN
*/
type SMSDeliveryReceiptAutomationGetForbidden struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationGetForbidden) Error() string {
	return fmt.Sprintf("[GET /automations/sms/receipts/{receipt_rule_id}][%d] smsDeliveryReceiptAutomationGetForbidden  %+v", 403, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationGetNotFound creates a SMSDeliveryReceiptAutomationGetNotFound with default headers values
func NewSMSDeliveryReceiptAutomationGetNotFound() *SMSDeliveryReceiptAutomationGetNotFound {
	return &SMSDeliveryReceiptAutomationGetNotFound{}
}

/*SMSDeliveryReceiptAutomationGetNotFound handles this case with default header values.

NOT_FOUND
*/
type SMSDeliveryReceiptAutomationGetNotFound struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationGetNotFound) Error() string {
	return fmt.Sprintf("[GET /automations/sms/receipts/{receipt_rule_id}][%d] smsDeliveryReceiptAutomationGetNotFound  %+v", 404, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationGetMethodNotAllowed creates a SMSDeliveryReceiptAutomationGetMethodNotAllowed with default headers values
func NewSMSDeliveryReceiptAutomationGetMethodNotAllowed() *SMSDeliveryReceiptAutomationGetMethodNotAllowed {
	return &SMSDeliveryReceiptAutomationGetMethodNotAllowed{}
}

/*SMSDeliveryReceiptAutomationGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SMSDeliveryReceiptAutomationGetMethodNotAllowed struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /automations/sms/receipts/{receipt_rule_id}][%d] smsDeliveryReceiptAutomationGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationGetTooManyRequests creates a SMSDeliveryReceiptAutomationGetTooManyRequests with default headers values
func NewSMSDeliveryReceiptAutomationGetTooManyRequests() *SMSDeliveryReceiptAutomationGetTooManyRequests {
	return &SMSDeliveryReceiptAutomationGetTooManyRequests{}
}

/*SMSDeliveryReceiptAutomationGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SMSDeliveryReceiptAutomationGetTooManyRequests struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /automations/sms/receipts/{receipt_rule_id}][%d] smsDeliveryReceiptAutomationGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationGetDefault creates a SMSDeliveryReceiptAutomationGetDefault with default headers values
func NewSMSDeliveryReceiptAutomationGetDefault(code int) *SMSDeliveryReceiptAutomationGetDefault {
	return &SMSDeliveryReceiptAutomationGetDefault{
		_statusCode: code,
	}
}

/*SMSDeliveryReceiptAutomationGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SMSDeliveryReceiptAutomationGetDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the Sms delivery receipt automation get default response
func (o *SMSDeliveryReceiptAutomationGetDefault) Code() int {
	return o._statusCode
}

func (o *SMSDeliveryReceiptAutomationGetDefault) Error() string {
	return fmt.Sprintf("[GET /automations/sms/receipts/{receipt_rule_id}][%d] SmsDeliveryReceiptAutomationGet default  %+v", o._statusCode, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
