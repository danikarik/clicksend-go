// Code generated by go-swagger; DO NOT EDIT.

package sms_delivery_receipt_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sms delivery receipt rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sms delivery receipt rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SMSDeliveryReceiptAutomationDelete deletes sms delivery receipt automation

Delete sms delivery receipt automation
*/
func (a *Client) SMSDeliveryReceiptAutomationDelete(params *SMSDeliveryReceiptAutomationDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SMSDeliveryReceiptAutomationDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSDeliveryReceiptAutomationDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsDeliveryReceiptAutomationDelete",
		Method:             "DELETE",
		PathPattern:        "/automations/sms/receipts/{receipt_rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSDeliveryReceiptAutomationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSDeliveryReceiptAutomationDeleteOK), nil

}

/*
SMSDeliveryReceiptAutomationGet gets specific sms delivery receipt automation

Get specific sms delivery receipt automation
*/
func (a *Client) SMSDeliveryReceiptAutomationGet(params *SMSDeliveryReceiptAutomationGetParams, authInfo runtime.ClientAuthInfoWriter) (*SMSDeliveryReceiptAutomationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSDeliveryReceiptAutomationGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsDeliveryReceiptAutomationGet",
		Method:             "GET",
		PathPattern:        "/automations/sms/receipts/{receipt_rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSDeliveryReceiptAutomationGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSDeliveryReceiptAutomationGetOK), nil

}

/*
SMSDeliveryReceiptAutomationPost creates sms delivery receipt automations

Create sms delivery receipt automations
*/
func (a *Client) SMSDeliveryReceiptAutomationPost(params *SMSDeliveryReceiptAutomationPostParams, authInfo runtime.ClientAuthInfoWriter) (*SMSDeliveryReceiptAutomationPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSDeliveryReceiptAutomationPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsDeliveryReceiptAutomationPost",
		Method:             "POST",
		PathPattern:        "/automations/sms/receipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSDeliveryReceiptAutomationPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSDeliveryReceiptAutomationPostOK), nil

}

/*
SMSDeliveryReceiptAutomationPut updates sms delivery receipt automation

Update sms delivery receipt automation
*/
func (a *Client) SMSDeliveryReceiptAutomationPut(params *SMSDeliveryReceiptAutomationPutParams, authInfo runtime.ClientAuthInfoWriter) (*SMSDeliveryReceiptAutomationPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSDeliveryReceiptAutomationPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsDeliveryReceiptAutomationPut",
		Method:             "PUT",
		PathPattern:        "/automations/sms/receipts/{receipt_rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSDeliveryReceiptAutomationPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSDeliveryReceiptAutomationPutOK), nil

}

/*
SMSDeliveryReceiptAutomationsGet gets all sms delivery receipt automations

Get all sms delivery receipt automations
*/
func (a *Client) SMSDeliveryReceiptAutomationsGet(params *SMSDeliveryReceiptAutomationsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SMSDeliveryReceiptAutomationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSDeliveryReceiptAutomationsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsDeliveryReceiptAutomationsGet",
		Method:             "GET",
		PathPattern:        "/automations/sms/receipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSDeliveryReceiptAutomationsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSDeliveryReceiptAutomationsGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
