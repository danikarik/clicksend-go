// Code generated by go-swagger; DO NOT EDIT.

package sms_delivery_receipt_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SMSDeliveryReceiptAutomationPostReader is a Reader for the SMSDeliveryReceiptAutomationPost structure.
type SMSDeliveryReceiptAutomationPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SMSDeliveryReceiptAutomationPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSMSDeliveryReceiptAutomationPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSMSDeliveryReceiptAutomationPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSMSDeliveryReceiptAutomationPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSMSDeliveryReceiptAutomationPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSMSDeliveryReceiptAutomationPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSMSDeliveryReceiptAutomationPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSMSDeliveryReceiptAutomationPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSMSDeliveryReceiptAutomationPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSMSDeliveryReceiptAutomationPostOK creates a SMSDeliveryReceiptAutomationPostOK with default headers values
func NewSMSDeliveryReceiptAutomationPostOK() *SMSDeliveryReceiptAutomationPostOK {
	return &SMSDeliveryReceiptAutomationPostOK{}
}

/*SMSDeliveryReceiptAutomationPostOK handles this case with default header values.

SUCCESS
*/
type SMSDeliveryReceiptAutomationPostOK struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationPostOK) Error() string {
	return fmt.Sprintf("[POST /automations/sms/receipts][%d] smsDeliveryReceiptAutomationPostOK  %+v", 200, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationPostBadRequest creates a SMSDeliveryReceiptAutomationPostBadRequest with default headers values
func NewSMSDeliveryReceiptAutomationPostBadRequest() *SMSDeliveryReceiptAutomationPostBadRequest {
	return &SMSDeliveryReceiptAutomationPostBadRequest{}
}

/*SMSDeliveryReceiptAutomationPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SMSDeliveryReceiptAutomationPostBadRequest struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /automations/sms/receipts][%d] smsDeliveryReceiptAutomationPostBadRequest  %+v", 400, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationPostUnauthorized creates a SMSDeliveryReceiptAutomationPostUnauthorized with default headers values
func NewSMSDeliveryReceiptAutomationPostUnauthorized() *SMSDeliveryReceiptAutomationPostUnauthorized {
	return &SMSDeliveryReceiptAutomationPostUnauthorized{}
}

/*SMSDeliveryReceiptAutomationPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SMSDeliveryReceiptAutomationPostUnauthorized struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /automations/sms/receipts][%d] smsDeliveryReceiptAutomationPostUnauthorized  %+v", 401, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationPostForbidden creates a SMSDeliveryReceiptAutomationPostForbidden with default headers values
func NewSMSDeliveryReceiptAutomationPostForbidden() *SMSDeliveryReceiptAutomationPostForbidden {
	return &SMSDeliveryReceiptAutomationPostForbidden{}
}

/*SMSDeliveryReceiptAutomationPostForbidden handles this case with default header values.

FORBIDDEN
*/
type SMSDeliveryReceiptAutomationPostForbidden struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationPostForbidden) Error() string {
	return fmt.Sprintf("[POST /automations/sms/receipts][%d] smsDeliveryReceiptAutomationPostForbidden  %+v", 403, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationPostNotFound creates a SMSDeliveryReceiptAutomationPostNotFound with default headers values
func NewSMSDeliveryReceiptAutomationPostNotFound() *SMSDeliveryReceiptAutomationPostNotFound {
	return &SMSDeliveryReceiptAutomationPostNotFound{}
}

/*SMSDeliveryReceiptAutomationPostNotFound handles this case with default header values.

NOT_FOUND
*/
type SMSDeliveryReceiptAutomationPostNotFound struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationPostNotFound) Error() string {
	return fmt.Sprintf("[POST /automations/sms/receipts][%d] smsDeliveryReceiptAutomationPostNotFound  %+v", 404, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationPostMethodNotAllowed creates a SMSDeliveryReceiptAutomationPostMethodNotAllowed with default headers values
func NewSMSDeliveryReceiptAutomationPostMethodNotAllowed() *SMSDeliveryReceiptAutomationPostMethodNotAllowed {
	return &SMSDeliveryReceiptAutomationPostMethodNotAllowed{}
}

/*SMSDeliveryReceiptAutomationPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SMSDeliveryReceiptAutomationPostMethodNotAllowed struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /automations/sms/receipts][%d] smsDeliveryReceiptAutomationPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationPostTooManyRequests creates a SMSDeliveryReceiptAutomationPostTooManyRequests with default headers values
func NewSMSDeliveryReceiptAutomationPostTooManyRequests() *SMSDeliveryReceiptAutomationPostTooManyRequests {
	return &SMSDeliveryReceiptAutomationPostTooManyRequests{}
}

/*SMSDeliveryReceiptAutomationPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SMSDeliveryReceiptAutomationPostTooManyRequests struct {
	Payload string
}

func (o *SMSDeliveryReceiptAutomationPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /automations/sms/receipts][%d] smsDeliveryReceiptAutomationPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSDeliveryReceiptAutomationPostDefault creates a SMSDeliveryReceiptAutomationPostDefault with default headers values
func NewSMSDeliveryReceiptAutomationPostDefault(code int) *SMSDeliveryReceiptAutomationPostDefault {
	return &SMSDeliveryReceiptAutomationPostDefault{
		_statusCode: code,
	}
}

/*SMSDeliveryReceiptAutomationPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SMSDeliveryReceiptAutomationPostDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the Sms delivery receipt automation post default response
func (o *SMSDeliveryReceiptAutomationPostDefault) Code() int {
	return o._statusCode
}

func (o *SMSDeliveryReceiptAutomationPostDefault) Error() string {
	return fmt.Sprintf("[POST /automations/sms/receipts][%d] SmsDeliveryReceiptAutomationPost default  %+v", o._statusCode, o.Payload)
}

func (o *SMSDeliveryReceiptAutomationPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
