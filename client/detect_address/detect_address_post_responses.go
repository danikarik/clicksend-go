// Code generated by go-swagger; DO NOT EDIT.

package detect_address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DetectAddressPostReader is a Reader for the DetectAddressPost structure.
type DetectAddressPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DetectAddressPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDetectAddressPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDetectAddressPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDetectAddressPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDetectAddressPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDetectAddressPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewDetectAddressPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewDetectAddressPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDetectAddressPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDetectAddressPostOK creates a DetectAddressPostOK with default headers values
func NewDetectAddressPostOK() *DetectAddressPostOK {
	return &DetectAddressPostOK{}
}

/*DetectAddressPostOK handles this case with default header values.

SUCCESS
*/
type DetectAddressPostOK struct {
	Payload interface{}
}

func (o *DetectAddressPostOK) Error() string {
	return fmt.Sprintf("[POST /post/letters/detect-address][%d] detectAddressPostOK  %+v", 200, o.Payload)
}

func (o *DetectAddressPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetectAddressPostBadRequest creates a DetectAddressPostBadRequest with default headers values
func NewDetectAddressPostBadRequest() *DetectAddressPostBadRequest {
	return &DetectAddressPostBadRequest{}
}

/*DetectAddressPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type DetectAddressPostBadRequest struct {
	Payload interface{}
}

func (o *DetectAddressPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /post/letters/detect-address][%d] detectAddressPostBadRequest  %+v", 400, o.Payload)
}

func (o *DetectAddressPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetectAddressPostUnauthorized creates a DetectAddressPostUnauthorized with default headers values
func NewDetectAddressPostUnauthorized() *DetectAddressPostUnauthorized {
	return &DetectAddressPostUnauthorized{}
}

/*DetectAddressPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type DetectAddressPostUnauthorized struct {
	Payload interface{}
}

func (o *DetectAddressPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /post/letters/detect-address][%d] detectAddressPostUnauthorized  %+v", 401, o.Payload)
}

func (o *DetectAddressPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetectAddressPostForbidden creates a DetectAddressPostForbidden with default headers values
func NewDetectAddressPostForbidden() *DetectAddressPostForbidden {
	return &DetectAddressPostForbidden{}
}

/*DetectAddressPostForbidden handles this case with default header values.

FORBIDDEN
*/
type DetectAddressPostForbidden struct {
	Payload interface{}
}

func (o *DetectAddressPostForbidden) Error() string {
	return fmt.Sprintf("[POST /post/letters/detect-address][%d] detectAddressPostForbidden  %+v", 403, o.Payload)
}

func (o *DetectAddressPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetectAddressPostNotFound creates a DetectAddressPostNotFound with default headers values
func NewDetectAddressPostNotFound() *DetectAddressPostNotFound {
	return &DetectAddressPostNotFound{}
}

/*DetectAddressPostNotFound handles this case with default header values.

NOT_FOUND
*/
type DetectAddressPostNotFound struct {
	Payload interface{}
}

func (o *DetectAddressPostNotFound) Error() string {
	return fmt.Sprintf("[POST /post/letters/detect-address][%d] detectAddressPostNotFound  %+v", 404, o.Payload)
}

func (o *DetectAddressPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetectAddressPostMethodNotAllowed creates a DetectAddressPostMethodNotAllowed with default headers values
func NewDetectAddressPostMethodNotAllowed() *DetectAddressPostMethodNotAllowed {
	return &DetectAddressPostMethodNotAllowed{}
}

/*DetectAddressPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type DetectAddressPostMethodNotAllowed struct {
	Payload interface{}
}

func (o *DetectAddressPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /post/letters/detect-address][%d] detectAddressPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *DetectAddressPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetectAddressPostTooManyRequests creates a DetectAddressPostTooManyRequests with default headers values
func NewDetectAddressPostTooManyRequests() *DetectAddressPostTooManyRequests {
	return &DetectAddressPostTooManyRequests{}
}

/*DetectAddressPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type DetectAddressPostTooManyRequests struct {
	Payload interface{}
}

func (o *DetectAddressPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /post/letters/detect-address][%d] detectAddressPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *DetectAddressPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDetectAddressPostDefault creates a DetectAddressPostDefault with default headers values
func NewDetectAddressPostDefault(code int) *DetectAddressPostDefault {
	return &DetectAddressPostDefault{
		_statusCode: code,
	}
}

/*DetectAddressPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type DetectAddressPostDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the detect address post default response
func (o *DetectAddressPostDefault) Code() int {
	return o._statusCode
}

func (o *DetectAddressPostDefault) Error() string {
	return fmt.Sprintf("[POST /post/letters/detect-address][%d] DetectAddressPost default  %+v", o._statusCode, o.Payload)
}

func (o *DetectAddressPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
