// Code generated by go-swagger; DO NOT EDIT.

package email_to_sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SMSEmailSMSGetReader is a Reader for the SMSEmailSMSGet structure.
type SMSEmailSMSGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SMSEmailSMSGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSMSEmailSMSGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSMSEmailSMSGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSMSEmailSMSGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSMSEmailSMSGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSMSEmailSMSGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSMSEmailSMSGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSMSEmailSMSGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSMSEmailSMSGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSMSEmailSMSGetOK creates a SMSEmailSMSGetOK with default headers values
func NewSMSEmailSMSGetOK() *SMSEmailSMSGetOK {
	return &SMSEmailSMSGetOK{}
}

/*SMSEmailSMSGetOK handles this case with default header values.

SUCCESS
*/
type SMSEmailSMSGetOK struct {
	Payload string
}

func (o *SMSEmailSMSGetOK) Error() string {
	return fmt.Sprintf("[GET /sms/email-sms][%d] smsEmailSmsGetOK  %+v", 200, o.Payload)
}

func (o *SMSEmailSMSGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSGetBadRequest creates a SMSEmailSMSGetBadRequest with default headers values
func NewSMSEmailSMSGetBadRequest() *SMSEmailSMSGetBadRequest {
	return &SMSEmailSMSGetBadRequest{}
}

/*SMSEmailSMSGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SMSEmailSMSGetBadRequest struct {
	Payload string
}

func (o *SMSEmailSMSGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /sms/email-sms][%d] smsEmailSmsGetBadRequest  %+v", 400, o.Payload)
}

func (o *SMSEmailSMSGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSGetUnauthorized creates a SMSEmailSMSGetUnauthorized with default headers values
func NewSMSEmailSMSGetUnauthorized() *SMSEmailSMSGetUnauthorized {
	return &SMSEmailSMSGetUnauthorized{}
}

/*SMSEmailSMSGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SMSEmailSMSGetUnauthorized struct {
	Payload string
}

func (o *SMSEmailSMSGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sms/email-sms][%d] smsEmailSmsGetUnauthorized  %+v", 401, o.Payload)
}

func (o *SMSEmailSMSGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSGetForbidden creates a SMSEmailSMSGetForbidden with default headers values
func NewSMSEmailSMSGetForbidden() *SMSEmailSMSGetForbidden {
	return &SMSEmailSMSGetForbidden{}
}

/*SMSEmailSMSGetForbidden handles this case with default header values.

FORBIDDEN
*/
type SMSEmailSMSGetForbidden struct {
	Payload string
}

func (o *SMSEmailSMSGetForbidden) Error() string {
	return fmt.Sprintf("[GET /sms/email-sms][%d] smsEmailSmsGetForbidden  %+v", 403, o.Payload)
}

func (o *SMSEmailSMSGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSGetNotFound creates a SMSEmailSMSGetNotFound with default headers values
func NewSMSEmailSMSGetNotFound() *SMSEmailSMSGetNotFound {
	return &SMSEmailSMSGetNotFound{}
}

/*SMSEmailSMSGetNotFound handles this case with default header values.

NOT_FOUND
*/
type SMSEmailSMSGetNotFound struct {
	Payload string
}

func (o *SMSEmailSMSGetNotFound) Error() string {
	return fmt.Sprintf("[GET /sms/email-sms][%d] smsEmailSmsGetNotFound  %+v", 404, o.Payload)
}

func (o *SMSEmailSMSGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSGetMethodNotAllowed creates a SMSEmailSMSGetMethodNotAllowed with default headers values
func NewSMSEmailSMSGetMethodNotAllowed() *SMSEmailSMSGetMethodNotAllowed {
	return &SMSEmailSMSGetMethodNotAllowed{}
}

/*SMSEmailSMSGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SMSEmailSMSGetMethodNotAllowed struct {
	Payload string
}

func (o *SMSEmailSMSGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /sms/email-sms][%d] smsEmailSmsGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SMSEmailSMSGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSGetTooManyRequests creates a SMSEmailSMSGetTooManyRequests with default headers values
func NewSMSEmailSMSGetTooManyRequests() *SMSEmailSMSGetTooManyRequests {
	return &SMSEmailSMSGetTooManyRequests{}
}

/*SMSEmailSMSGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SMSEmailSMSGetTooManyRequests struct {
	Payload string
}

func (o *SMSEmailSMSGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sms/email-sms][%d] smsEmailSmsGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *SMSEmailSMSGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSGetDefault creates a SMSEmailSMSGetDefault with default headers values
func NewSMSEmailSMSGetDefault(code int) *SMSEmailSMSGetDefault {
	return &SMSEmailSMSGetDefault{
		_statusCode: code,
	}
}

/*SMSEmailSMSGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SMSEmailSMSGetDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the Sms email Sms get default response
func (o *SMSEmailSMSGetDefault) Code() int {
	return o._statusCode
}

func (o *SMSEmailSMSGetDefault) Error() string {
	return fmt.Sprintf("[GET /sms/email-sms][%d] SmsEmailSmsGet default  %+v", o._statusCode, o.Payload)
}

func (o *SMSEmailSMSGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
