// Code generated by go-swagger; DO NOT EDIT.

package email_to_sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SMSEmailSMSPostReader is a Reader for the SMSEmailSMSPost structure.
type SMSEmailSMSPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SMSEmailSMSPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSMSEmailSMSPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSMSEmailSMSPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSMSEmailSMSPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSMSEmailSMSPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSMSEmailSMSPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewSMSEmailSMSPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSMSEmailSMSPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewSMSEmailSMSPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSMSEmailSMSPostOK creates a SMSEmailSMSPostOK with default headers values
func NewSMSEmailSMSPostOK() *SMSEmailSMSPostOK {
	return &SMSEmailSMSPostOK{}
}

/*SMSEmailSMSPostOK handles this case with default header values.

SUCCESS
*/
type SMSEmailSMSPostOK struct {
	Payload string
}

func (o *SMSEmailSMSPostOK) Error() string {
	return fmt.Sprintf("[POST /sms/email-sms][%d] smsEmailSmsPostOK  %+v", 200, o.Payload)
}

func (o *SMSEmailSMSPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSPostBadRequest creates a SMSEmailSMSPostBadRequest with default headers values
func NewSMSEmailSMSPostBadRequest() *SMSEmailSMSPostBadRequest {
	return &SMSEmailSMSPostBadRequest{}
}

/*SMSEmailSMSPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type SMSEmailSMSPostBadRequest struct {
	Payload string
}

func (o *SMSEmailSMSPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /sms/email-sms][%d] smsEmailSmsPostBadRequest  %+v", 400, o.Payload)
}

func (o *SMSEmailSMSPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSPostUnauthorized creates a SMSEmailSMSPostUnauthorized with default headers values
func NewSMSEmailSMSPostUnauthorized() *SMSEmailSMSPostUnauthorized {
	return &SMSEmailSMSPostUnauthorized{}
}

/*SMSEmailSMSPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type SMSEmailSMSPostUnauthorized struct {
	Payload string
}

func (o *SMSEmailSMSPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /sms/email-sms][%d] smsEmailSmsPostUnauthorized  %+v", 401, o.Payload)
}

func (o *SMSEmailSMSPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSPostForbidden creates a SMSEmailSMSPostForbidden with default headers values
func NewSMSEmailSMSPostForbidden() *SMSEmailSMSPostForbidden {
	return &SMSEmailSMSPostForbidden{}
}

/*SMSEmailSMSPostForbidden handles this case with default header values.

FORBIDDEN
*/
type SMSEmailSMSPostForbidden struct {
	Payload string
}

func (o *SMSEmailSMSPostForbidden) Error() string {
	return fmt.Sprintf("[POST /sms/email-sms][%d] smsEmailSmsPostForbidden  %+v", 403, o.Payload)
}

func (o *SMSEmailSMSPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSPostNotFound creates a SMSEmailSMSPostNotFound with default headers values
func NewSMSEmailSMSPostNotFound() *SMSEmailSMSPostNotFound {
	return &SMSEmailSMSPostNotFound{}
}

/*SMSEmailSMSPostNotFound handles this case with default header values.

NOT_FOUND
*/
type SMSEmailSMSPostNotFound struct {
	Payload string
}

func (o *SMSEmailSMSPostNotFound) Error() string {
	return fmt.Sprintf("[POST /sms/email-sms][%d] smsEmailSmsPostNotFound  %+v", 404, o.Payload)
}

func (o *SMSEmailSMSPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSPostMethodNotAllowed creates a SMSEmailSMSPostMethodNotAllowed with default headers values
func NewSMSEmailSMSPostMethodNotAllowed() *SMSEmailSMSPostMethodNotAllowed {
	return &SMSEmailSMSPostMethodNotAllowed{}
}

/*SMSEmailSMSPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type SMSEmailSMSPostMethodNotAllowed struct {
	Payload string
}

func (o *SMSEmailSMSPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /sms/email-sms][%d] smsEmailSmsPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *SMSEmailSMSPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSPostTooManyRequests creates a SMSEmailSMSPostTooManyRequests with default headers values
func NewSMSEmailSMSPostTooManyRequests() *SMSEmailSMSPostTooManyRequests {
	return &SMSEmailSMSPostTooManyRequests{}
}

/*SMSEmailSMSPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type SMSEmailSMSPostTooManyRequests struct {
	Payload string
}

func (o *SMSEmailSMSPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /sms/email-sms][%d] smsEmailSmsPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *SMSEmailSMSPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSMSEmailSMSPostDefault creates a SMSEmailSMSPostDefault with default headers values
func NewSMSEmailSMSPostDefault(code int) *SMSEmailSMSPostDefault {
	return &SMSEmailSMSPostDefault{
		_statusCode: code,
	}
}

/*SMSEmailSMSPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type SMSEmailSMSPostDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the Sms email Sms post default response
func (o *SMSEmailSMSPostDefault) Code() int {
	return o._statusCode
}

func (o *SMSEmailSMSPostDefault) Error() string {
	return fmt.Sprintf("[POST /sms/email-sms][%d] SmsEmailSmsPost default  %+v", o._statusCode, o.Payload)
}

func (o *SMSEmailSMSPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
