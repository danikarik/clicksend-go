// Code generated by go-swagger; DO NOT EDIT.

package email_to_sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new email to sms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for email to sms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SMSEmailSMSGet gets list of email to sms allowed addresses

Get list of email to sms allowed addresses
*/
func (a *Client) SMSEmailSMSGet(params *SMSEmailSMSGetParams, authInfo runtime.ClientAuthInfoWriter) (*SMSEmailSMSGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSEmailSMSGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsEmailSmsGet",
		Method:             "GET",
		PathPattern:        "/sms/email-sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSEmailSMSGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSEmailSMSGetOK), nil

}

/*
SMSEmailSMSPost creates email to sms allowed address

Create email to sms allowed address
*/
func (a *Client) SMSEmailSMSPost(params *SMSEmailSMSPostParams, authInfo runtime.ClientAuthInfoWriter) (*SMSEmailSMSPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSEmailSMSPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsEmailSmsPost",
		Method:             "POST",
		PathPattern:        "/sms/email-sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSEmailSMSPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSEmailSMSPostOK), nil

}

/*
SMSEmailSMSStrippedStringDelete deletes email to sms stripped string rule

Delete email to sms stripped string rule
*/
func (a *Client) SMSEmailSMSStrippedStringDelete(params *SMSEmailSMSStrippedStringDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SMSEmailSMSStrippedStringDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSEmailSMSStrippedStringDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsEmailSmsStrippedStringDelete",
		Method:             "DELETE",
		PathPattern:        "/sms/email-sms-stripped-strings/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSEmailSMSStrippedStringDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSEmailSMSStrippedStringDeleteOK), nil

}

/*
SMSEmailSMSStrippedStringGet gets email to sms stripped string rule

Get email to sms stripped string rule
*/
func (a *Client) SMSEmailSMSStrippedStringGet(params *SMSEmailSMSStrippedStringGetParams, authInfo runtime.ClientAuthInfoWriter) (*SMSEmailSMSStrippedStringGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSEmailSMSStrippedStringGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsEmailSmsStrippedStringGet",
		Method:             "GET",
		PathPattern:        "/sms/email-sms-stripped-strings/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSEmailSMSStrippedStringGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSEmailSMSStrippedStringGetOK), nil

}

/*
SMSEmailSMSStrippedStringPost creates email to sms stripped string rule

Create email to sms stripped string rules
*/
func (a *Client) SMSEmailSMSStrippedStringPost(params *SMSEmailSMSStrippedStringPostParams, authInfo runtime.ClientAuthInfoWriter) (*SMSEmailSMSStrippedStringPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSEmailSMSStrippedStringPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsEmailSmsStrippedStringPost",
		Method:             "POST",
		PathPattern:        "/sms/email-sms-stripped-strings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSEmailSMSStrippedStringPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSEmailSMSStrippedStringPostOK), nil

}

/*
SMSEmailSMSStrippedStringPut updates email to sms stripped string rule

Update email to sms stripped string rule
*/
func (a *Client) SMSEmailSMSStrippedStringPut(params *SMSEmailSMSStrippedStringPutParams, authInfo runtime.ClientAuthInfoWriter) (*SMSEmailSMSStrippedStringPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSEmailSMSStrippedStringPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsEmailSmsStrippedStringPut",
		Method:             "PUT",
		PathPattern:        "/sms/email-sms-stripped-strings/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSEmailSMSStrippedStringPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSEmailSMSStrippedStringPutOK), nil

}

/*
SMSEmailSMSStrippedStringsGet gets list of email to sms stripped string rules

Get list of email to sms stripped string rules
*/
func (a *Client) SMSEmailSMSStrippedStringsGet(params *SMSEmailSMSStrippedStringsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SMSEmailSMSStrippedStringsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSMSEmailSMSStrippedStringsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsEmailSmsStrippedStringsGet",
		Method:             "GET",
		PathPattern:        "/sms/email-sms-stripped-strings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SMSEmailSMSStrippedStringsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SMSEmailSMSStrippedStringsGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
