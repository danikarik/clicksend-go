// Code generated by go-swagger; DO NOT EDIT.

package contact_list

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ListsByListIDPutReader is a Reader for the ListsByListIDPut structure.
type ListsByListIDPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListsByListIDPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListsByListIDPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListsByListIDPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListsByListIDPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListsByListIDPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListsByListIDPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewListsByListIDPutMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListsByListIDPutTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListsByListIDPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListsByListIDPutOK creates a ListsByListIDPutOK with default headers values
func NewListsByListIDPutOK() *ListsByListIDPutOK {
	return &ListsByListIDPutOK{}
}

/*ListsByListIDPutOK handles this case with default header values.

SUCCESS
*/
type ListsByListIDPutOK struct {
	Payload interface{}
}

func (o *ListsByListIDPutOK) Error() string {
	return fmt.Sprintf("[PUT /lists/{list_id}][%d] listsByListIdPutOK  %+v", 200, o.Payload)
}

func (o *ListsByListIDPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListsByListIDPutBadRequest creates a ListsByListIDPutBadRequest with default headers values
func NewListsByListIDPutBadRequest() *ListsByListIDPutBadRequest {
	return &ListsByListIDPutBadRequest{}
}

/*ListsByListIDPutBadRequest handles this case with default header values.

BAD_REQUEST
*/
type ListsByListIDPutBadRequest struct {
	Payload interface{}
}

func (o *ListsByListIDPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /lists/{list_id}][%d] listsByListIdPutBadRequest  %+v", 400, o.Payload)
}

func (o *ListsByListIDPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListsByListIDPutUnauthorized creates a ListsByListIDPutUnauthorized with default headers values
func NewListsByListIDPutUnauthorized() *ListsByListIDPutUnauthorized {
	return &ListsByListIDPutUnauthorized{}
}

/*ListsByListIDPutUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type ListsByListIDPutUnauthorized struct {
	Payload interface{}
}

func (o *ListsByListIDPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /lists/{list_id}][%d] listsByListIdPutUnauthorized  %+v", 401, o.Payload)
}

func (o *ListsByListIDPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListsByListIDPutForbidden creates a ListsByListIDPutForbidden with default headers values
func NewListsByListIDPutForbidden() *ListsByListIDPutForbidden {
	return &ListsByListIDPutForbidden{}
}

/*ListsByListIDPutForbidden handles this case with default header values.

FORBIDDEN
*/
type ListsByListIDPutForbidden struct {
	Payload interface{}
}

func (o *ListsByListIDPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /lists/{list_id}][%d] listsByListIdPutForbidden  %+v", 403, o.Payload)
}

func (o *ListsByListIDPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListsByListIDPutNotFound creates a ListsByListIDPutNotFound with default headers values
func NewListsByListIDPutNotFound() *ListsByListIDPutNotFound {
	return &ListsByListIDPutNotFound{}
}

/*ListsByListIDPutNotFound handles this case with default header values.

NOT_FOUND
*/
type ListsByListIDPutNotFound struct {
	Payload interface{}
}

func (o *ListsByListIDPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /lists/{list_id}][%d] listsByListIdPutNotFound  %+v", 404, o.Payload)
}

func (o *ListsByListIDPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListsByListIDPutMethodNotAllowed creates a ListsByListIDPutMethodNotAllowed with default headers values
func NewListsByListIDPutMethodNotAllowed() *ListsByListIDPutMethodNotAllowed {
	return &ListsByListIDPutMethodNotAllowed{}
}

/*ListsByListIDPutMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type ListsByListIDPutMethodNotAllowed struct {
	Payload interface{}
}

func (o *ListsByListIDPutMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /lists/{list_id}][%d] listsByListIdPutMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ListsByListIDPutMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListsByListIDPutTooManyRequests creates a ListsByListIDPutTooManyRequests with default headers values
func NewListsByListIDPutTooManyRequests() *ListsByListIDPutTooManyRequests {
	return &ListsByListIDPutTooManyRequests{}
}

/*ListsByListIDPutTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type ListsByListIDPutTooManyRequests struct {
	Payload interface{}
}

func (o *ListsByListIDPutTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /lists/{list_id}][%d] listsByListIdPutTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListsByListIDPutTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListsByListIDPutDefault creates a ListsByListIDPutDefault with default headers values
func NewListsByListIDPutDefault(code int) *ListsByListIDPutDefault {
	return &ListsByListIDPutDefault{
		_statusCode: code,
	}
}

/*ListsByListIDPutDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type ListsByListIDPutDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the lists by list Id put default response
func (o *ListsByListIDPutDefault) Code() int {
	return o._statusCode
}

func (o *ListsByListIDPutDefault) Error() string {
	return fmt.Sprintf("[PUT /lists/{list_id}][%d] ListsByListIdPut default  %+v", o._statusCode, o.Payload)
}

func (o *ListsByListIDPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
