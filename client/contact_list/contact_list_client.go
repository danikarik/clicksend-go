// Code generated by go-swagger; DO NOT EDIT.

package contact_list

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new contact list API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contact list API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ListsByListIDDelete lists by list Id delete

Delete a specific contact list
*/
func (a *Client) ListsByListIDDelete(params *ListsByListIDDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ListsByListIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsByListIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListsByListIdDelete",
		Method:             "DELETE",
		PathPattern:        "/lists/{list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsByListIDDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListsByListIDDeleteOK), nil

}

/*
ListsByListIDGet gets specific contact list

Get specific contact list
*/
func (a *Client) ListsByListIDGet(params *ListsByListIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*ListsByListIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsByListIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListsByListIdGet",
		Method:             "GET",
		PathPattern:        "/lists/{list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsByListIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListsByListIDGetOK), nil

}

/*
ListsByListIDPut updates specific contact list

Update specific contact list
*/
func (a *Client) ListsByListIDPut(params *ListsByListIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*ListsByListIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsByListIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListsByListIdPut",
		Method:             "PUT",
		PathPattern:        "/lists/{list_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsByListIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListsByListIDPutOK), nil

}

/*
ListsGet gets all contact lists

Get all contact lists
*/
func (a *Client) ListsGet(params *ListsGetParams, authInfo runtime.ClientAuthInfoWriter) (*ListsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListsGet",
		Method:             "GET",
		PathPattern:        "/lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListsGetOK), nil

}

/*
ListsImportByListIDPost imports contacts to list

Import contacts to list
*/
func (a *Client) ListsImportByListIDPost(params *ListsImportByListIDPostParams, authInfo runtime.ClientAuthInfoWriter) (*ListsImportByListIDPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsImportByListIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListsImportByListIdPost",
		Method:             "POST",
		PathPattern:        "/lists/{list_id}/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsImportByListIDPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListsImportByListIDPostOK), nil

}

/*
ListsPost creates new contact list

Create new contact list
*/
func (a *Client) ListsPost(params *ListsPostParams, authInfo runtime.ClientAuthInfoWriter) (*ListsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListsPost",
		Method:             "POST",
		PathPattern:        "/lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListsPostOK), nil

}

/*
ListsRemoveDuplicatesByListIDPut removes duplicate contacts

Remove duplicate contacts
*/
func (a *Client) ListsRemoveDuplicatesByListIDPut(params *ListsRemoveDuplicatesByListIDPutParams, authInfo runtime.ClientAuthInfoWriter) (*ListsRemoveDuplicatesByListIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListsRemoveDuplicatesByListIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListsRemoveDuplicatesByListIdPut",
		Method:             "PUT",
		PathPattern:        "/lists/{list_id}/remove-duplicates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListsRemoveDuplicatesByListIDPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListsRemoveDuplicatesByListIDPutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
