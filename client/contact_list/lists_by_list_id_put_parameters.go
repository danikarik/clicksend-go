// Code generated by go-swagger; DO NOT EDIT.

package contact_list

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/danikarik/clicksend-go/models"
)

// NewListsByListIDPutParams creates a new ListsByListIDPutParams object
// with the default values initialized.
func NewListsByListIDPutParams() *ListsByListIDPutParams {
	var ()
	return &ListsByListIDPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListsByListIDPutParamsWithTimeout creates a new ListsByListIDPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListsByListIDPutParamsWithTimeout(timeout time.Duration) *ListsByListIDPutParams {
	var ()
	return &ListsByListIDPutParams{

		timeout: timeout,
	}
}

// NewListsByListIDPutParamsWithContext creates a new ListsByListIDPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewListsByListIDPutParamsWithContext(ctx context.Context) *ListsByListIDPutParams {
	var ()
	return &ListsByListIDPutParams{

		Context: ctx,
	}
}

// NewListsByListIDPutParamsWithHTTPClient creates a new ListsByListIDPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListsByListIDPutParamsWithHTTPClient(client *http.Client) *ListsByListIDPutParams {
	var ()
	return &ListsByListIDPutParams{
		HTTPClient: client,
	}
}

/*ListsByListIDPutParams contains all the parameters to send to the API endpoint
for the lists by list Id put operation typically these are written to a http.Request
*/
type ListsByListIDPutParams struct {

	/*ContactList
	  Contact list model

	*/
	ContactList models.ContactList
	/*ListID
	  Your list id

	*/
	ListID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the lists by list Id put params
func (o *ListsByListIDPutParams) WithTimeout(timeout time.Duration) *ListsByListIDPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the lists by list Id put params
func (o *ListsByListIDPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the lists by list Id put params
func (o *ListsByListIDPutParams) WithContext(ctx context.Context) *ListsByListIDPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the lists by list Id put params
func (o *ListsByListIDPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the lists by list Id put params
func (o *ListsByListIDPutParams) WithHTTPClient(client *http.Client) *ListsByListIDPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the lists by list Id put params
func (o *ListsByListIDPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContactList adds the contactList to the lists by list Id put params
func (o *ListsByListIDPutParams) WithContactList(contactList models.ContactList) *ListsByListIDPutParams {
	o.SetContactList(contactList)
	return o
}

// SetContactList adds the contactList to the lists by list Id put params
func (o *ListsByListIDPutParams) SetContactList(contactList models.ContactList) {
	o.ContactList = contactList
}

// WithListID adds the listID to the lists by list Id put params
func (o *ListsByListIDPutParams) WithListID(listID int32) *ListsByListIDPutParams {
	o.SetListID(listID)
	return o
}

// SetListID adds the listId to the lists by list Id put params
func (o *ListsByListIDPutParams) SetListID(listID int32) {
	o.ListID = listID
}

// WriteToRequest writes these params to a swagger request
func (o *ListsByListIDPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.ContactList); err != nil {
		return err
	}

	// path param list_id
	if err := r.SetPathParam("list_id", swag.FormatInt32(o.ListID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
