// Code generated by go-swagger; DO NOT EDIT.

package transactional_email

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEmailHistoryExportGetParams creates a new EmailHistoryExportGetParams object
// with the default values initialized.
func NewEmailHistoryExportGetParams() *EmailHistoryExportGetParams {
	var ()
	return &EmailHistoryExportGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmailHistoryExportGetParamsWithTimeout creates a new EmailHistoryExportGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmailHistoryExportGetParamsWithTimeout(timeout time.Duration) *EmailHistoryExportGetParams {
	var ()
	return &EmailHistoryExportGetParams{

		timeout: timeout,
	}
}

// NewEmailHistoryExportGetParamsWithContext creates a new EmailHistoryExportGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmailHistoryExportGetParamsWithContext(ctx context.Context) *EmailHistoryExportGetParams {
	var ()
	return &EmailHistoryExportGetParams{

		Context: ctx,
	}
}

// NewEmailHistoryExportGetParamsWithHTTPClient creates a new EmailHistoryExportGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmailHistoryExportGetParamsWithHTTPClient(client *http.Client) *EmailHistoryExportGetParams {
	var ()
	return &EmailHistoryExportGetParams{
		HTTPClient: client,
	}
}

/*EmailHistoryExportGetParams contains all the parameters to send to the API endpoint
for the email history export get operation typically these are written to a http.Request
*/
type EmailHistoryExportGetParams struct {

	/*DateFrom
	  Start date

	*/
	DateFrom *int32
	/*DateTo
	  End date

	*/
	DateTo *int32
	/*Filename
	  Filename to download history as

	*/
	Filename string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the email history export get params
func (o *EmailHistoryExportGetParams) WithTimeout(timeout time.Duration) *EmailHistoryExportGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the email history export get params
func (o *EmailHistoryExportGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the email history export get params
func (o *EmailHistoryExportGetParams) WithContext(ctx context.Context) *EmailHistoryExportGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the email history export get params
func (o *EmailHistoryExportGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the email history export get params
func (o *EmailHistoryExportGetParams) WithHTTPClient(client *http.Client) *EmailHistoryExportGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the email history export get params
func (o *EmailHistoryExportGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateFrom adds the dateFrom to the email history export get params
func (o *EmailHistoryExportGetParams) WithDateFrom(dateFrom *int32) *EmailHistoryExportGetParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the email history export get params
func (o *EmailHistoryExportGetParams) SetDateFrom(dateFrom *int32) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the email history export get params
func (o *EmailHistoryExportGetParams) WithDateTo(dateTo *int32) *EmailHistoryExportGetParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the email history export get params
func (o *EmailHistoryExportGetParams) SetDateTo(dateTo *int32) {
	o.DateTo = dateTo
}

// WithFilename adds the filename to the email history export get params
func (o *EmailHistoryExportGetParams) WithFilename(filename string) *EmailHistoryExportGetParams {
	o.SetFilename(filename)
	return o
}

// SetFilename adds the filename to the email history export get params
func (o *EmailHistoryExportGetParams) SetFilename(filename string) {
	o.Filename = filename
}

// WriteToRequest writes these params to a swagger request
func (o *EmailHistoryExportGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateFrom != nil {

		// query param date_from
		var qrDateFrom int32
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := swag.FormatInt32(qrDateFrom)
		if qDateFrom != "" {
			if err := r.SetQueryParam("date_from", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param date_to
		var qrDateTo int32
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := swag.FormatInt32(qrDateTo)
		if qDateTo != "" {
			if err := r.SetQueryParam("date_to", qDateTo); err != nil {
				return err
			}
		}

	}

	// query param filename
	qrFilename := o.Filename
	qFilename := qrFilename
	if qFilename != "" {
		if err := r.SetQueryParam("filename", qFilename); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
