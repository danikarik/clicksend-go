// Code generated by go-swagger; DO NOT EDIT.

package transactional_email

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// EmailHistoryExportGetReader is a Reader for the EmailHistoryExportGet structure.
type EmailHistoryExportGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EmailHistoryExportGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEmailHistoryExportGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewEmailHistoryExportGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewEmailHistoryExportGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewEmailHistoryExportGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewEmailHistoryExportGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewEmailHistoryExportGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewEmailHistoryExportGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewEmailHistoryExportGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEmailHistoryExportGetOK creates a EmailHistoryExportGetOK with default headers values
func NewEmailHistoryExportGetOK() *EmailHistoryExportGetOK {
	return &EmailHistoryExportGetOK{}
}

/*EmailHistoryExportGetOK handles this case with default header values.

SUCCESS
*/
type EmailHistoryExportGetOK struct {
	Payload interface{}
}

func (o *EmailHistoryExportGetOK) Error() string {
	return fmt.Sprintf("[GET /email/history/export][%d] emailHistoryExportGetOK  %+v", 200, o.Payload)
}

func (o *EmailHistoryExportGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryExportGetBadRequest creates a EmailHistoryExportGetBadRequest with default headers values
func NewEmailHistoryExportGetBadRequest() *EmailHistoryExportGetBadRequest {
	return &EmailHistoryExportGetBadRequest{}
}

/*EmailHistoryExportGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type EmailHistoryExportGetBadRequest struct {
	Payload interface{}
}

func (o *EmailHistoryExportGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /email/history/export][%d] emailHistoryExportGetBadRequest  %+v", 400, o.Payload)
}

func (o *EmailHistoryExportGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryExportGetUnauthorized creates a EmailHistoryExportGetUnauthorized with default headers values
func NewEmailHistoryExportGetUnauthorized() *EmailHistoryExportGetUnauthorized {
	return &EmailHistoryExportGetUnauthorized{}
}

/*EmailHistoryExportGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type EmailHistoryExportGetUnauthorized struct {
	Payload interface{}
}

func (o *EmailHistoryExportGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /email/history/export][%d] emailHistoryExportGetUnauthorized  %+v", 401, o.Payload)
}

func (o *EmailHistoryExportGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryExportGetForbidden creates a EmailHistoryExportGetForbidden with default headers values
func NewEmailHistoryExportGetForbidden() *EmailHistoryExportGetForbidden {
	return &EmailHistoryExportGetForbidden{}
}

/*EmailHistoryExportGetForbidden handles this case with default header values.

FORBIDDEN
*/
type EmailHistoryExportGetForbidden struct {
	Payload interface{}
}

func (o *EmailHistoryExportGetForbidden) Error() string {
	return fmt.Sprintf("[GET /email/history/export][%d] emailHistoryExportGetForbidden  %+v", 403, o.Payload)
}

func (o *EmailHistoryExportGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryExportGetNotFound creates a EmailHistoryExportGetNotFound with default headers values
func NewEmailHistoryExportGetNotFound() *EmailHistoryExportGetNotFound {
	return &EmailHistoryExportGetNotFound{}
}

/*EmailHistoryExportGetNotFound handles this case with default header values.

NOT_FOUND
*/
type EmailHistoryExportGetNotFound struct {
	Payload interface{}
}

func (o *EmailHistoryExportGetNotFound) Error() string {
	return fmt.Sprintf("[GET /email/history/export][%d] emailHistoryExportGetNotFound  %+v", 404, o.Payload)
}

func (o *EmailHistoryExportGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryExportGetMethodNotAllowed creates a EmailHistoryExportGetMethodNotAllowed with default headers values
func NewEmailHistoryExportGetMethodNotAllowed() *EmailHistoryExportGetMethodNotAllowed {
	return &EmailHistoryExportGetMethodNotAllowed{}
}

/*EmailHistoryExportGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type EmailHistoryExportGetMethodNotAllowed struct {
	Payload interface{}
}

func (o *EmailHistoryExportGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /email/history/export][%d] emailHistoryExportGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *EmailHistoryExportGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryExportGetTooManyRequests creates a EmailHistoryExportGetTooManyRequests with default headers values
func NewEmailHistoryExportGetTooManyRequests() *EmailHistoryExportGetTooManyRequests {
	return &EmailHistoryExportGetTooManyRequests{}
}

/*EmailHistoryExportGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type EmailHistoryExportGetTooManyRequests struct {
	Payload interface{}
}

func (o *EmailHistoryExportGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /email/history/export][%d] emailHistoryExportGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *EmailHistoryExportGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryExportGetDefault creates a EmailHistoryExportGetDefault with default headers values
func NewEmailHistoryExportGetDefault(code int) *EmailHistoryExportGetDefault {
	return &EmailHistoryExportGetDefault{
		_statusCode: code,
	}
}

/*EmailHistoryExportGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type EmailHistoryExportGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the email history export get default response
func (o *EmailHistoryExportGetDefault) Code() int {
	return o._statusCode
}

func (o *EmailHistoryExportGetDefault) Error() string {
	return fmt.Sprintf("[GET /email/history/export][%d] EmailHistoryExportGet default  %+v", o._statusCode, o.Payload)
}

func (o *EmailHistoryExportGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
