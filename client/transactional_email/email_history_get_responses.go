// Code generated by go-swagger; DO NOT EDIT.

package transactional_email

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// EmailHistoryGetReader is a Reader for the EmailHistoryGet structure.
type EmailHistoryGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EmailHistoryGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEmailHistoryGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewEmailHistoryGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewEmailHistoryGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewEmailHistoryGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewEmailHistoryGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewEmailHistoryGetMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewEmailHistoryGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewEmailHistoryGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEmailHistoryGetOK creates a EmailHistoryGetOK with default headers values
func NewEmailHistoryGetOK() *EmailHistoryGetOK {
	return &EmailHistoryGetOK{}
}

/*EmailHistoryGetOK handles this case with default header values.

SUCCESS
*/
type EmailHistoryGetOK struct {
	Payload string
}

func (o *EmailHistoryGetOK) Error() string {
	return fmt.Sprintf("[GET /email/history][%d] emailHistoryGetOK  %+v", 200, o.Payload)
}

func (o *EmailHistoryGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryGetBadRequest creates a EmailHistoryGetBadRequest with default headers values
func NewEmailHistoryGetBadRequest() *EmailHistoryGetBadRequest {
	return &EmailHistoryGetBadRequest{}
}

/*EmailHistoryGetBadRequest handles this case with default header values.

BAD_REQUEST
*/
type EmailHistoryGetBadRequest struct {
	Payload string
}

func (o *EmailHistoryGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /email/history][%d] emailHistoryGetBadRequest  %+v", 400, o.Payload)
}

func (o *EmailHistoryGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryGetUnauthorized creates a EmailHistoryGetUnauthorized with default headers values
func NewEmailHistoryGetUnauthorized() *EmailHistoryGetUnauthorized {
	return &EmailHistoryGetUnauthorized{}
}

/*EmailHistoryGetUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type EmailHistoryGetUnauthorized struct {
	Payload string
}

func (o *EmailHistoryGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /email/history][%d] emailHistoryGetUnauthorized  %+v", 401, o.Payload)
}

func (o *EmailHistoryGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryGetForbidden creates a EmailHistoryGetForbidden with default headers values
func NewEmailHistoryGetForbidden() *EmailHistoryGetForbidden {
	return &EmailHistoryGetForbidden{}
}

/*EmailHistoryGetForbidden handles this case with default header values.

FORBIDDEN
*/
type EmailHistoryGetForbidden struct {
	Payload string
}

func (o *EmailHistoryGetForbidden) Error() string {
	return fmt.Sprintf("[GET /email/history][%d] emailHistoryGetForbidden  %+v", 403, o.Payload)
}

func (o *EmailHistoryGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryGetNotFound creates a EmailHistoryGetNotFound with default headers values
func NewEmailHistoryGetNotFound() *EmailHistoryGetNotFound {
	return &EmailHistoryGetNotFound{}
}

/*EmailHistoryGetNotFound handles this case with default header values.

NOT_FOUND
*/
type EmailHistoryGetNotFound struct {
	Payload string
}

func (o *EmailHistoryGetNotFound) Error() string {
	return fmt.Sprintf("[GET /email/history][%d] emailHistoryGetNotFound  %+v", 404, o.Payload)
}

func (o *EmailHistoryGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryGetMethodNotAllowed creates a EmailHistoryGetMethodNotAllowed with default headers values
func NewEmailHistoryGetMethodNotAllowed() *EmailHistoryGetMethodNotAllowed {
	return &EmailHistoryGetMethodNotAllowed{}
}

/*EmailHistoryGetMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type EmailHistoryGetMethodNotAllowed struct {
	Payload string
}

func (o *EmailHistoryGetMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /email/history][%d] emailHistoryGetMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *EmailHistoryGetMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryGetTooManyRequests creates a EmailHistoryGetTooManyRequests with default headers values
func NewEmailHistoryGetTooManyRequests() *EmailHistoryGetTooManyRequests {
	return &EmailHistoryGetTooManyRequests{}
}

/*EmailHistoryGetTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type EmailHistoryGetTooManyRequests struct {
	Payload string
}

func (o *EmailHistoryGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /email/history][%d] emailHistoryGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *EmailHistoryGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEmailHistoryGetDefault creates a EmailHistoryGetDefault with default headers values
func NewEmailHistoryGetDefault(code int) *EmailHistoryGetDefault {
	return &EmailHistoryGetDefault{
		_statusCode: code,
	}
}

/*EmailHistoryGetDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type EmailHistoryGetDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the email history get default response
func (o *EmailHistoryGetDefault) Code() int {
	return o._statusCode
}

func (o *EmailHistoryGetDefault) Error() string {
	return fmt.Sprintf("[GET /email/history][%d] EmailHistoryGet default  %+v", o._statusCode, o.Payload)
}

func (o *EmailHistoryGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
