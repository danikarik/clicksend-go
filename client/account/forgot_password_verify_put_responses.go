// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ForgotPasswordVerifyPutReader is a Reader for the ForgotPasswordVerifyPut structure.
type ForgotPasswordVerifyPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ForgotPasswordVerifyPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewForgotPasswordVerifyPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewForgotPasswordVerifyPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewForgotPasswordVerifyPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewForgotPasswordVerifyPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewForgotPasswordVerifyPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewForgotPasswordVerifyPutMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewForgotPasswordVerifyPutTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewForgotPasswordVerifyPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewForgotPasswordVerifyPutOK creates a ForgotPasswordVerifyPutOK with default headers values
func NewForgotPasswordVerifyPutOK() *ForgotPasswordVerifyPutOK {
	return &ForgotPasswordVerifyPutOK{}
}

/*ForgotPasswordVerifyPutOK handles this case with default header values.

SUCCESS
*/
type ForgotPasswordVerifyPutOK struct {
	Payload string
}

func (o *ForgotPasswordVerifyPutOK) Error() string {
	return fmt.Sprintf("[PUT /forgot-password/verify][%d] forgotPasswordVerifyPutOK  %+v", 200, o.Payload)
}

func (o *ForgotPasswordVerifyPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForgotPasswordVerifyPutBadRequest creates a ForgotPasswordVerifyPutBadRequest with default headers values
func NewForgotPasswordVerifyPutBadRequest() *ForgotPasswordVerifyPutBadRequest {
	return &ForgotPasswordVerifyPutBadRequest{}
}

/*ForgotPasswordVerifyPutBadRequest handles this case with default header values.

BAD_REQUEST
*/
type ForgotPasswordVerifyPutBadRequest struct {
	Payload string
}

func (o *ForgotPasswordVerifyPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /forgot-password/verify][%d] forgotPasswordVerifyPutBadRequest  %+v", 400, o.Payload)
}

func (o *ForgotPasswordVerifyPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForgotPasswordVerifyPutUnauthorized creates a ForgotPasswordVerifyPutUnauthorized with default headers values
func NewForgotPasswordVerifyPutUnauthorized() *ForgotPasswordVerifyPutUnauthorized {
	return &ForgotPasswordVerifyPutUnauthorized{}
}

/*ForgotPasswordVerifyPutUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type ForgotPasswordVerifyPutUnauthorized struct {
	Payload string
}

func (o *ForgotPasswordVerifyPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /forgot-password/verify][%d] forgotPasswordVerifyPutUnauthorized  %+v", 401, o.Payload)
}

func (o *ForgotPasswordVerifyPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForgotPasswordVerifyPutForbidden creates a ForgotPasswordVerifyPutForbidden with default headers values
func NewForgotPasswordVerifyPutForbidden() *ForgotPasswordVerifyPutForbidden {
	return &ForgotPasswordVerifyPutForbidden{}
}

/*ForgotPasswordVerifyPutForbidden handles this case with default header values.

FORBIDDEN
*/
type ForgotPasswordVerifyPutForbidden struct {
	Payload string
}

func (o *ForgotPasswordVerifyPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /forgot-password/verify][%d] forgotPasswordVerifyPutForbidden  %+v", 403, o.Payload)
}

func (o *ForgotPasswordVerifyPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForgotPasswordVerifyPutNotFound creates a ForgotPasswordVerifyPutNotFound with default headers values
func NewForgotPasswordVerifyPutNotFound() *ForgotPasswordVerifyPutNotFound {
	return &ForgotPasswordVerifyPutNotFound{}
}

/*ForgotPasswordVerifyPutNotFound handles this case with default header values.

NOT_FOUND
*/
type ForgotPasswordVerifyPutNotFound struct {
	Payload string
}

func (o *ForgotPasswordVerifyPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /forgot-password/verify][%d] forgotPasswordVerifyPutNotFound  %+v", 404, o.Payload)
}

func (o *ForgotPasswordVerifyPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForgotPasswordVerifyPutMethodNotAllowed creates a ForgotPasswordVerifyPutMethodNotAllowed with default headers values
func NewForgotPasswordVerifyPutMethodNotAllowed() *ForgotPasswordVerifyPutMethodNotAllowed {
	return &ForgotPasswordVerifyPutMethodNotAllowed{}
}

/*ForgotPasswordVerifyPutMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type ForgotPasswordVerifyPutMethodNotAllowed struct {
	Payload string
}

func (o *ForgotPasswordVerifyPutMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /forgot-password/verify][%d] forgotPasswordVerifyPutMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ForgotPasswordVerifyPutMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForgotPasswordVerifyPutTooManyRequests creates a ForgotPasswordVerifyPutTooManyRequests with default headers values
func NewForgotPasswordVerifyPutTooManyRequests() *ForgotPasswordVerifyPutTooManyRequests {
	return &ForgotPasswordVerifyPutTooManyRequests{}
}

/*ForgotPasswordVerifyPutTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type ForgotPasswordVerifyPutTooManyRequests struct {
	Payload string
}

func (o *ForgotPasswordVerifyPutTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /forgot-password/verify][%d] forgotPasswordVerifyPutTooManyRequests  %+v", 429, o.Payload)
}

func (o *ForgotPasswordVerifyPutTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForgotPasswordVerifyPutDefault creates a ForgotPasswordVerifyPutDefault with default headers values
func NewForgotPasswordVerifyPutDefault(code int) *ForgotPasswordVerifyPutDefault {
	return &ForgotPasswordVerifyPutDefault{
		_statusCode: code,
	}
}

/*ForgotPasswordVerifyPutDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type ForgotPasswordVerifyPutDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the forgot password verify put default response
func (o *ForgotPasswordVerifyPutDefault) Code() int {
	return o._statusCode
}

func (o *ForgotPasswordVerifyPutDefault) Error() string {
	return fmt.Sprintf("[PUT /forgot-password/verify][%d] ForgotPasswordVerifyPut default  %+v", o._statusCode, o.Payload)
}

func (o *ForgotPasswordVerifyPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
