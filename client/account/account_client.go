// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AccountGet gets account information

Get account details
*/
func (a *Client) AccountGet(params *AccountGetParams, authInfo runtime.ClientAuthInfoWriter) (*AccountGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccountGet",
		Method:             "GET",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AccountGetOK), nil

}

/*
AccountPost creates a new account

Create An Account
*/
func (a *Client) AccountPost(params *AccountPostParams, authInfo runtime.ClientAuthInfoWriter) (*AccountPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccountPost",
		Method:             "POST",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AccountPostOK), nil

}

/*
AccountUseageBySubaccountGet gets account useage by subaccount

Get account useage by subaccount
*/
func (a *Client) AccountUseageBySubaccountGet(params *AccountUseageBySubaccountGetParams, authInfo runtime.ClientAuthInfoWriter) (*AccountUseageBySubaccountGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountUseageBySubaccountGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccountUseageBySubaccountGet",
		Method:             "GET",
		PathPattern:        "/account/usage/{year}/{month}/subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountUseageBySubaccountGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AccountUseageBySubaccountGetOK), nil

}

/*
AccountVerifySendPut sends account activation token

Send account activation token
*/
func (a *Client) AccountVerifySendPut(params *AccountVerifySendPutParams, authInfo runtime.ClientAuthInfoWriter) (*AccountVerifySendPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountVerifySendPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccountVerifySendPut",
		Method:             "PUT",
		PathPattern:        "/account-verify/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountVerifySendPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AccountVerifySendPutOK), nil

}

/*
AccountVerifyVerifyByActivationTokenPut verifies new account

Verify new account
*/
func (a *Client) AccountVerifyVerifyByActivationTokenPut(params *AccountVerifyVerifyByActivationTokenPutParams, authInfo runtime.ClientAuthInfoWriter) (*AccountVerifyVerifyByActivationTokenPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountVerifyVerifyByActivationTokenPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccountVerifyVerifyByActivationTokenPut",
		Method:             "PUT",
		PathPattern:        "/account-verify/verify/{activation_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountVerifyVerifyByActivationTokenPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AccountVerifyVerifyByActivationTokenPutOK), nil

}

/*
ForgotPasswordPut forgots password

Forgot password
*/
func (a *Client) ForgotPasswordPut(params *ForgotPasswordPutParams, authInfo runtime.ClientAuthInfoWriter) (*ForgotPasswordPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForgotPasswordPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ForgotPasswordPut",
		Method:             "PUT",
		PathPattern:        "/forgot-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForgotPasswordPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForgotPasswordPutOK), nil

}

/*
ForgotPasswordVerifyPut verifies forgot password

Verify forgot password
*/
func (a *Client) ForgotPasswordVerifyPut(params *ForgotPasswordVerifyPutParams, authInfo runtime.ClientAuthInfoWriter) (*ForgotPasswordVerifyPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForgotPasswordVerifyPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ForgotPasswordVerifyPut",
		Method:             "PUT",
		PathPattern:        "/forgot-password/verify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForgotPasswordVerifyPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForgotPasswordVerifyPutOK), nil

}

/*
ForgotUsernamePut forgots username

Forgot username
*/
func (a *Client) ForgotUsernamePut(params *ForgotUsernamePutParams) (*ForgotUsernamePutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForgotUsernamePutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ForgotUsernamePut",
		Method:             "PUT",
		PathPattern:        "/forgot-username",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForgotUsernamePutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForgotUsernamePutOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
