// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// AccountPostReader is a Reader for the AccountPost structure.
type AccountPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AccountPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAccountPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAccountPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAccountPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAccountPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAccountPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewAccountPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewAccountPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAccountPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAccountPostOK creates a AccountPostOK with default headers values
func NewAccountPostOK() *AccountPostOK {
	return &AccountPostOK{}
}

/*AccountPostOK handles this case with default header values.

SUCCESS
*/
type AccountPostOK struct {
	Payload interface{}
}

func (o *AccountPostOK) Error() string {
	return fmt.Sprintf("[POST /account][%d] accountPostOK  %+v", 200, o.Payload)
}

func (o *AccountPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountPostBadRequest creates a AccountPostBadRequest with default headers values
func NewAccountPostBadRequest() *AccountPostBadRequest {
	return &AccountPostBadRequest{}
}

/*AccountPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type AccountPostBadRequest struct {
	Payload interface{}
}

func (o *AccountPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /account][%d] accountPostBadRequest  %+v", 400, o.Payload)
}

func (o *AccountPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountPostUnauthorized creates a AccountPostUnauthorized with default headers values
func NewAccountPostUnauthorized() *AccountPostUnauthorized {
	return &AccountPostUnauthorized{}
}

/*AccountPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type AccountPostUnauthorized struct {
	Payload interface{}
}

func (o *AccountPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /account][%d] accountPostUnauthorized  %+v", 401, o.Payload)
}

func (o *AccountPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountPostForbidden creates a AccountPostForbidden with default headers values
func NewAccountPostForbidden() *AccountPostForbidden {
	return &AccountPostForbidden{}
}

/*AccountPostForbidden handles this case with default header values.

FORBIDDEN
*/
type AccountPostForbidden struct {
	Payload interface{}
}

func (o *AccountPostForbidden) Error() string {
	return fmt.Sprintf("[POST /account][%d] accountPostForbidden  %+v", 403, o.Payload)
}

func (o *AccountPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountPostNotFound creates a AccountPostNotFound with default headers values
func NewAccountPostNotFound() *AccountPostNotFound {
	return &AccountPostNotFound{}
}

/*AccountPostNotFound handles this case with default header values.

NOT_FOUND
*/
type AccountPostNotFound struct {
	Payload interface{}
}

func (o *AccountPostNotFound) Error() string {
	return fmt.Sprintf("[POST /account][%d] accountPostNotFound  %+v", 404, o.Payload)
}

func (o *AccountPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountPostMethodNotAllowed creates a AccountPostMethodNotAllowed with default headers values
func NewAccountPostMethodNotAllowed() *AccountPostMethodNotAllowed {
	return &AccountPostMethodNotAllowed{}
}

/*AccountPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type AccountPostMethodNotAllowed struct {
	Payload interface{}
}

func (o *AccountPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /account][%d] accountPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *AccountPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountPostTooManyRequests creates a AccountPostTooManyRequests with default headers values
func NewAccountPostTooManyRequests() *AccountPostTooManyRequests {
	return &AccountPostTooManyRequests{}
}

/*AccountPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type AccountPostTooManyRequests struct {
	Payload interface{}
}

func (o *AccountPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /account][%d] accountPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *AccountPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccountPostDefault creates a AccountPostDefault with default headers values
func NewAccountPostDefault(code int) *AccountPostDefault {
	return &AccountPostDefault{
		_statusCode: code,
	}
}

/*AccountPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type AccountPostDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the account post default response
func (o *AccountPostDefault) Code() int {
	return o._statusCode
}

func (o *AccountPostDefault) Error() string {
	return fmt.Sprintf("[POST /account][%d] AccountPost default  %+v", o._statusCode, o.Payload)
}

func (o *AccountPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
