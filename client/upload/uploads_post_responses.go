// Code generated by go-swagger; DO NOT EDIT.

package upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UploadsPostReader is a Reader for the UploadsPost structure.
type UploadsPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadsPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUploadsPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUploadsPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUploadsPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUploadsPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUploadsPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewUploadsPostMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewUploadsPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUploadsPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUploadsPostOK creates a UploadsPostOK with default headers values
func NewUploadsPostOK() *UploadsPostOK {
	return &UploadsPostOK{}
}

/*UploadsPostOK handles this case with default header values.

SUCCESS
*/
type UploadsPostOK struct {
	Payload string
}

func (o *UploadsPostOK) Error() string {
	return fmt.Sprintf("[POST /uploads][%d] uploadsPostOK  %+v", 200, o.Payload)
}

func (o *UploadsPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadsPostBadRequest creates a UploadsPostBadRequest with default headers values
func NewUploadsPostBadRequest() *UploadsPostBadRequest {
	return &UploadsPostBadRequest{}
}

/*UploadsPostBadRequest handles this case with default header values.

BAD_REQUEST
*/
type UploadsPostBadRequest struct {
	Payload string
}

func (o *UploadsPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /uploads][%d] uploadsPostBadRequest  %+v", 400, o.Payload)
}

func (o *UploadsPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadsPostUnauthorized creates a UploadsPostUnauthorized with default headers values
func NewUploadsPostUnauthorized() *UploadsPostUnauthorized {
	return &UploadsPostUnauthorized{}
}

/*UploadsPostUnauthorized handles this case with default header values.

UNAUTHORIZED
*/
type UploadsPostUnauthorized struct {
	Payload string
}

func (o *UploadsPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /uploads][%d] uploadsPostUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadsPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadsPostForbidden creates a UploadsPostForbidden with default headers values
func NewUploadsPostForbidden() *UploadsPostForbidden {
	return &UploadsPostForbidden{}
}

/*UploadsPostForbidden handles this case with default header values.

FORBIDDEN
*/
type UploadsPostForbidden struct {
	Payload string
}

func (o *UploadsPostForbidden) Error() string {
	return fmt.Sprintf("[POST /uploads][%d] uploadsPostForbidden  %+v", 403, o.Payload)
}

func (o *UploadsPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadsPostNotFound creates a UploadsPostNotFound with default headers values
func NewUploadsPostNotFound() *UploadsPostNotFound {
	return &UploadsPostNotFound{}
}

/*UploadsPostNotFound handles this case with default header values.

NOT_FOUND
*/
type UploadsPostNotFound struct {
	Payload string
}

func (o *UploadsPostNotFound) Error() string {
	return fmt.Sprintf("[POST /uploads][%d] uploadsPostNotFound  %+v", 404, o.Payload)
}

func (o *UploadsPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadsPostMethodNotAllowed creates a UploadsPostMethodNotAllowed with default headers values
func NewUploadsPostMethodNotAllowed() *UploadsPostMethodNotAllowed {
	return &UploadsPostMethodNotAllowed{}
}

/*UploadsPostMethodNotAllowed handles this case with default header values.

METHOD_NOT_FOUND
*/
type UploadsPostMethodNotAllowed struct {
	Payload string
}

func (o *UploadsPostMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /uploads][%d] uploadsPostMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UploadsPostMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadsPostTooManyRequests creates a UploadsPostTooManyRequests with default headers values
func NewUploadsPostTooManyRequests() *UploadsPostTooManyRequests {
	return &UploadsPostTooManyRequests{}
}

/*UploadsPostTooManyRequests handles this case with default header values.

TOO_MANY_REQUESTS
*/
type UploadsPostTooManyRequests struct {
	Payload string
}

func (o *UploadsPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /uploads][%d] uploadsPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *UploadsPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadsPostDefault creates a UploadsPostDefault with default headers values
func NewUploadsPostDefault(code int) *UploadsPostDefault {
	return &UploadsPostDefault{
		_statusCode: code,
	}
}

/*UploadsPostDefault handles this case with default header values.

INTERNAL_SERVER_ERROR
*/
type UploadsPostDefault struct {
	_statusCode int

	Payload string
}

// Code gets the status code for the uploads post default response
func (o *UploadsPostDefault) Code() int {
	return o._statusCode
}

func (o *UploadsPostDefault) Error() string {
	return fmt.Sprintf("[POST /uploads][%d] UploadsPost default  %+v", o._statusCode, o.Payload)
}

func (o *UploadsPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
