// Code generated by go-swagger; DO NOT EDIT.

package post_postcard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new post postcard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for post postcard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostPostcardsHistoryExportGet exports postcard history to a c s v file

Export postcard history to a CSV file
*/
func (a *Client) PostPostcardsHistoryExportGet(params *PostPostcardsHistoryExportGetParams, authInfo runtime.ClientAuthInfoWriter) (*PostPostcardsHistoryExportGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPostcardsHistoryExportGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPostcardsHistoryExportGet",
		Method:             "GET",
		PathPattern:        "/post/postcards/history/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPostcardsHistoryExportGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPostcardsHistoryExportGetOK), nil

}

/*
PostPostcardsHistoryGet retrieves the history of postcards sent or scheduled

Retrieve the history of postcards sent or scheduled
*/
func (a *Client) PostPostcardsHistoryGet(params *PostPostcardsHistoryGetParams, authInfo runtime.ClientAuthInfoWriter) (*PostPostcardsHistoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPostcardsHistoryGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPostcardsHistoryGet",
		Method:             "GET",
		PathPattern:        "/post/postcards/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPostcardsHistoryGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPostcardsHistoryGetOK), nil

}

/*
PostPostcardsPricePost calculates price for sending one or more postcards

Calculate price for sending one or more postcards
*/
func (a *Client) PostPostcardsPricePost(params *PostPostcardsPricePostParams, authInfo runtime.ClientAuthInfoWriter) (*PostPostcardsPricePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPostcardsPricePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPostcardsPricePost",
		Method:             "POST",
		PathPattern:        "/post/postcards/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPostcardsPricePostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPostcardsPricePostOK), nil

}

/*
PostPostcardsSendPost sends one or more postcards

Send one or more postcards
*/
func (a *Client) PostPostcardsSendPost(params *PostPostcardsSendPostParams, authInfo runtime.ClientAuthInfoWriter) (*PostPostcardsSendPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPostcardsSendPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPostcardsSendPost",
		Method:             "POST",
		PathPattern:        "/post/postcards/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPostcardsSendPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPostcardsSendPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
