// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// EmailCampaign Campaign Model for Email
// swagger:discriminator EmailCampaign classType
type EmailCampaign interface {
	runtime.Validatable

	// Your campaign message.
	// Required: true
	Body() *string
	SetBody(*string)

	// The allowed email address id.
	// Required: true
	FromEmailAddressID() *float64
	SetFromEmailAddressID(*float64)

	// Your name or business name.
	// Required: true
	FromName() *string
	SetFromName(*string)

	// Your contact list id.
	// Required: true
	ListID() *float64
	SetListID(*float64)

	// Your campaign name.
	// Required: true
	Name() *string
	SetName(*string)

	// Your schedule timestamp.
	Schedule() int32
	SetSchedule(int32)

	// Your campaign subject.
	// Required: true
	Subject() *string
	SetSubject(*string)

	// Your template id.
	TemplateID() float64
	SetTemplateID(float64)
}

type emailCampaign struct {
	bodyField *string

	fromEmailAddressIdField *float64

	fromNameField *string

	listIdField *float64

	nameField *string

	scheduleField int32

	subjectField *string

	templateIdField float64
}

// Body gets the body of this polymorphic type
func (m *emailCampaign) Body() *string {
	return m.bodyField
}

// SetBody sets the body of this polymorphic type
func (m *emailCampaign) SetBody(val *string) {
	m.bodyField = val
}

// FromEmailAddressID gets the from email address id of this polymorphic type
func (m *emailCampaign) FromEmailAddressID() *float64 {
	return m.fromEmailAddressIdField
}

// SetFromEmailAddressID sets the from email address id of this polymorphic type
func (m *emailCampaign) SetFromEmailAddressID(val *float64) {
	m.fromEmailAddressIdField = val
}

// FromName gets the from name of this polymorphic type
func (m *emailCampaign) FromName() *string {
	return m.fromNameField
}

// SetFromName sets the from name of this polymorphic type
func (m *emailCampaign) SetFromName(val *string) {
	m.fromNameField = val
}

// ListID gets the list id of this polymorphic type
func (m *emailCampaign) ListID() *float64 {
	return m.listIdField
}

// SetListID sets the list id of this polymorphic type
func (m *emailCampaign) SetListID(val *float64) {
	m.listIdField = val
}

// Name gets the name of this polymorphic type
func (m *emailCampaign) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *emailCampaign) SetName(val *string) {
	m.nameField = val
}

// Schedule gets the schedule of this polymorphic type
func (m *emailCampaign) Schedule() int32 {
	return m.scheduleField
}

// SetSchedule sets the schedule of this polymorphic type
func (m *emailCampaign) SetSchedule(val int32) {
	m.scheduleField = val
}

// Subject gets the subject of this polymorphic type
func (m *emailCampaign) Subject() *string {
	return m.subjectField
}

// SetSubject sets the subject of this polymorphic type
func (m *emailCampaign) SetSubject(val *string) {
	m.subjectField = val
}

// TemplateID gets the template id of this polymorphic type
func (m *emailCampaign) TemplateID() float64 {
	return m.templateIdField
}

// SetTemplateID sets the template id of this polymorphic type
func (m *emailCampaign) SetTemplateID(val float64) {
	m.templateIdField = val
}

// UnmarshalEmailCampaignSlice unmarshals polymorphic slices of EmailCampaign
func UnmarshalEmailCampaignSlice(reader io.Reader, consumer runtime.Consumer) ([]EmailCampaign, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []EmailCampaign
	for _, element := range elements {
		obj, err := unmarshalEmailCampaign(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalEmailCampaign unmarshals polymorphic EmailCampaign
func UnmarshalEmailCampaign(reader io.Reader, consumer runtime.Consumer) (EmailCampaign, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalEmailCampaign(data, consumer)
}

func unmarshalEmailCampaign(data []byte, consumer runtime.Consumer) (EmailCampaign, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "EmailCampaign":
		var result emailCampaign
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this email campaign
func (m *emailCampaign) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromEmailAddressID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *emailCampaign) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body()); err != nil {
		return err
	}

	return nil
}

func (m *emailCampaign) validateFromEmailAddressID(formats strfmt.Registry) error {

	if err := validate.Required("from_email_address_id", "body", m.FromEmailAddressID()); err != nil {
		return err
	}

	return nil
}

func (m *emailCampaign) validateFromName(formats strfmt.Registry) error {

	if err := validate.Required("from_name", "body", m.FromName()); err != nil {
		return err
	}

	return nil
}

func (m *emailCampaign) validateListID(formats strfmt.Registry) error {

	if err := validate.Required("list_id", "body", m.ListID()); err != nil {
		return err
	}

	return nil
}

func (m *emailCampaign) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *emailCampaign) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject()); err != nil {
		return err
	}

	return nil
}
