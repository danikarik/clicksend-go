// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// EmailTemplateNew Model for Email Templates
// swagger:discriminator EmailTemplateNew classType
type EmailTemplateNew interface {
	runtime.Validatable

	// The ID of the master template you want to base on.
	// Required: true
	TemplateIDMaster() *float64
	SetTemplateIDMaster(*float64)

	// The intended name for the new template.
	// Required: true
	TemplateName() *string
	SetTemplateName(*string)
}

type emailTemplateNew struct {
	templateIdMasterField *float64

	templateNameField *string
}

// TemplateIDMaster gets the template id master of this polymorphic type
func (m *emailTemplateNew) TemplateIDMaster() *float64 {
	return m.templateIdMasterField
}

// SetTemplateIDMaster sets the template id master of this polymorphic type
func (m *emailTemplateNew) SetTemplateIDMaster(val *float64) {
	m.templateIdMasterField = val
}

// TemplateName gets the template name of this polymorphic type
func (m *emailTemplateNew) TemplateName() *string {
	return m.templateNameField
}

// SetTemplateName sets the template name of this polymorphic type
func (m *emailTemplateNew) SetTemplateName(val *string) {
	m.templateNameField = val
}

// UnmarshalEmailTemplateNewSlice unmarshals polymorphic slices of EmailTemplateNew
func UnmarshalEmailTemplateNewSlice(reader io.Reader, consumer runtime.Consumer) ([]EmailTemplateNew, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []EmailTemplateNew
	for _, element := range elements {
		obj, err := unmarshalEmailTemplateNew(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalEmailTemplateNew unmarshals polymorphic EmailTemplateNew
func UnmarshalEmailTemplateNew(reader io.Reader, consumer runtime.Consumer) (EmailTemplateNew, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalEmailTemplateNew(data, consumer)
}

func unmarshalEmailTemplateNew(data []byte, consumer runtime.Consumer) (EmailTemplateNew, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "EmailTemplateNew":
		var result emailTemplateNew
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this email template new
func (m *emailTemplateNew) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTemplateIDMaster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *emailTemplateNew) validateTemplateIDMaster(formats strfmt.Registry) error {

	if err := validate.Required("template_id_master", "body", m.TemplateIDMaster()); err != nil {
		return err
	}

	return nil
}

func (m *emailTemplateNew) validateTemplateName(formats strfmt.Registry) error {

	if err := validate.Required("template_name", "body", m.TemplateName()); err != nil {
		return err
	}

	return nil
}
