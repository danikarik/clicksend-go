// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// PostRecipient PostRecipient model
// swagger:discriminator PostRecipient classType
type PostRecipient interface {
	runtime.Validatable

	// City
	// Required: true
	AddressCity() *string
	SetAddressCity(*string)

	// Country
	// Required: true
	AddressCountry() *string
	SetAddressCountry(*string)

	// First line of address
	// Required: true
	AddressLine1() *string
	SetAddressLine1(*string)

	// Second line of address
	AddressLine2() string
	SetAddressLine2(string)

	// Name of address
	// Required: true
	AddressName() *string
	SetAddressName(*string)

	// Postal code
	// Required: true
	AddressPostalCode() *string
	SetAddressPostalCode(*string)

	// State
	// Required: true
	AddressState() *string
	SetAddressState(*string)

	// ID of return address to use
	// Required: true
	ReturnAddressID() *int32
	SetReturnAddressID(*int32)

	// When to send letter (0/null=now)
	Schedule() int32
	SetSchedule(int32)
}

type postRecipient struct {
	addressCityField *string

	addressCountryField *string

	addressLine1Field *string

	addressLine2Field string

	addressNameField *string

	addressPostalCodeField *string

	addressStateField *string

	returnAddressIdField *int32

	scheduleField int32
}

// AddressCity gets the address city of this polymorphic type
func (m *postRecipient) AddressCity() *string {
	return m.addressCityField
}

// SetAddressCity sets the address city of this polymorphic type
func (m *postRecipient) SetAddressCity(val *string) {
	m.addressCityField = val
}

// AddressCountry gets the address country of this polymorphic type
func (m *postRecipient) AddressCountry() *string {
	return m.addressCountryField
}

// SetAddressCountry sets the address country of this polymorphic type
func (m *postRecipient) SetAddressCountry(val *string) {
	m.addressCountryField = val
}

// AddressLine1 gets the address line 1 of this polymorphic type
func (m *postRecipient) AddressLine1() *string {
	return m.addressLine1Field
}

// SetAddressLine1 sets the address line 1 of this polymorphic type
func (m *postRecipient) SetAddressLine1(val *string) {
	m.addressLine1Field = val
}

// AddressLine2 gets the address line 2 of this polymorphic type
func (m *postRecipient) AddressLine2() string {
	return m.addressLine2Field
}

// SetAddressLine2 sets the address line 2 of this polymorphic type
func (m *postRecipient) SetAddressLine2(val string) {
	m.addressLine2Field = val
}

// AddressName gets the address name of this polymorphic type
func (m *postRecipient) AddressName() *string {
	return m.addressNameField
}

// SetAddressName sets the address name of this polymorphic type
func (m *postRecipient) SetAddressName(val *string) {
	m.addressNameField = val
}

// AddressPostalCode gets the address postal code of this polymorphic type
func (m *postRecipient) AddressPostalCode() *string {
	return m.addressPostalCodeField
}

// SetAddressPostalCode sets the address postal code of this polymorphic type
func (m *postRecipient) SetAddressPostalCode(val *string) {
	m.addressPostalCodeField = val
}

// AddressState gets the address state of this polymorphic type
func (m *postRecipient) AddressState() *string {
	return m.addressStateField
}

// SetAddressState sets the address state of this polymorphic type
func (m *postRecipient) SetAddressState(val *string) {
	m.addressStateField = val
}

// ReturnAddressID gets the return address id of this polymorphic type
func (m *postRecipient) ReturnAddressID() *int32 {
	return m.returnAddressIdField
}

// SetReturnAddressID sets the return address id of this polymorphic type
func (m *postRecipient) SetReturnAddressID(val *int32) {
	m.returnAddressIdField = val
}

// Schedule gets the schedule of this polymorphic type
func (m *postRecipient) Schedule() int32 {
	return m.scheduleField
}

// SetSchedule sets the schedule of this polymorphic type
func (m *postRecipient) SetSchedule(val int32) {
	m.scheduleField = val
}

// UnmarshalPostRecipientSlice unmarshals polymorphic slices of PostRecipient
func UnmarshalPostRecipientSlice(reader io.Reader, consumer runtime.Consumer) ([]PostRecipient, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []PostRecipient
	for _, element := range elements {
		obj, err := unmarshalPostRecipient(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalPostRecipient unmarshals polymorphic PostRecipient
func UnmarshalPostRecipient(reader io.Reader, consumer runtime.Consumer) (PostRecipient, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalPostRecipient(data, consumer)
}

func unmarshalPostRecipient(data []byte, consumer runtime.Consumer) (PostRecipient, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "PostRecipient":
		var result postRecipient
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this post recipient
func (m *postRecipient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressPostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnAddressID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *postRecipient) validateAddressCity(formats strfmt.Registry) error {

	if err := validate.Required("address_city", "body", m.AddressCity()); err != nil {
		return err
	}

	return nil
}

func (m *postRecipient) validateAddressCountry(formats strfmt.Registry) error {

	if err := validate.Required("address_country", "body", m.AddressCountry()); err != nil {
		return err
	}

	return nil
}

func (m *postRecipient) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.Required("address_line_1", "body", m.AddressLine1()); err != nil {
		return err
	}

	return nil
}

func (m *postRecipient) validateAddressName(formats strfmt.Registry) error {

	if err := validate.Required("address_name", "body", m.AddressName()); err != nil {
		return err
	}

	return nil
}

func (m *postRecipient) validateAddressPostalCode(formats strfmt.Registry) error {

	if err := validate.Required("address_postal_code", "body", m.AddressPostalCode()); err != nil {
		return err
	}

	return nil
}

func (m *postRecipient) validateAddressState(formats strfmt.Registry) error {

	if err := validate.Required("address_state", "body", m.AddressState()); err != nil {
		return err
	}

	return nil
}

func (m *postRecipient) validateReturnAddressID(formats strfmt.Registry) error {

	if err := validate.Required("return_address_id", "body", m.ReturnAddressID()); err != nil {
		return err
	}

	return nil
}
