// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// VoiceMessage VoiceMessage fields: source, to, list_id, body, lang, voice, schedule, custom_string, country
// swagger:discriminator VoiceMessage classType
type VoiceMessage interface {
	runtime.Validatable

	// Biscuit uv3nlCOjRk croissant chocolate lollipop chocolate muffin.
	// Required: true
	Body() *string
	SetBody(*string)

	// The country of the recipient.
	// Required: true
	Country() *string
	SetCountry(*string)

	// Your reference. Will be passed back with all replies and delivery reports.
	// Required: true
	CustomString() *string
	SetCustomString(*string)

	// au (string, required) - See section on available languages.
	Lang() string
	SetLang(string)

	// Your list ID if sending to a whole list. Can be used instead of 'to'.
	ListID() int32
	SetListID(int32)

	// Whether to attempt to detect an answering machine or voicemail service and leave a message
	MachineDetection() int32
	SetMachineDetection(int32)

	// Whether you want to receive a keypress from the call recipient
	RequireInput() int32
	SetRequireInput(int32)

	// Leave blank for immediate delivery. Your schedule time in unix format http://help.clicksend.com/what-is-a-unix-timestamp
	Schedule() int32
	SetSchedule(int32)

	// Your method of sending e.g. 'wordpress', 'php', 'c#'.
	Source() *string
	SetSource(*string)

	// Your phone number in E.164 format.
	// Required: true
	To() *string
	SetTo(*string)

	// Either 'female' or 'male'.
	// Required: true
	Voice() *string
	SetVoice(*string)
}

type voiceMessage struct {
	bodyField *string

	countryField *string

	customStringField *string

	langField string

	listIdField int32

	machineDetectionField int32

	requireInputField int32

	scheduleField int32

	sourceField *string

	toField *string

	voiceField *string
}

// Body gets the body of this polymorphic type
func (m *voiceMessage) Body() *string {
	return m.bodyField
}

// SetBody sets the body of this polymorphic type
func (m *voiceMessage) SetBody(val *string) {
	m.bodyField = val
}

// Country gets the country of this polymorphic type
func (m *voiceMessage) Country() *string {
	return m.countryField
}

// SetCountry sets the country of this polymorphic type
func (m *voiceMessage) SetCountry(val *string) {
	m.countryField = val
}

// CustomString gets the custom string of this polymorphic type
func (m *voiceMessage) CustomString() *string {
	return m.customStringField
}

// SetCustomString sets the custom string of this polymorphic type
func (m *voiceMessage) SetCustomString(val *string) {
	m.customStringField = val
}

// Lang gets the lang of this polymorphic type
func (m *voiceMessage) Lang() string {
	return m.langField
}

// SetLang sets the lang of this polymorphic type
func (m *voiceMessage) SetLang(val string) {
	m.langField = val
}

// ListID gets the list id of this polymorphic type
func (m *voiceMessage) ListID() int32 {
	return m.listIdField
}

// SetListID sets the list id of this polymorphic type
func (m *voiceMessage) SetListID(val int32) {
	m.listIdField = val
}

// MachineDetection gets the machine detection of this polymorphic type
func (m *voiceMessage) MachineDetection() int32 {
	return m.machineDetectionField
}

// SetMachineDetection sets the machine detection of this polymorphic type
func (m *voiceMessage) SetMachineDetection(val int32) {
	m.machineDetectionField = val
}

// RequireInput gets the require input of this polymorphic type
func (m *voiceMessage) RequireInput() int32 {
	return m.requireInputField
}

// SetRequireInput sets the require input of this polymorphic type
func (m *voiceMessage) SetRequireInput(val int32) {
	m.requireInputField = val
}

// Schedule gets the schedule of this polymorphic type
func (m *voiceMessage) Schedule() int32 {
	return m.scheduleField
}

// SetSchedule sets the schedule of this polymorphic type
func (m *voiceMessage) SetSchedule(val int32) {
	m.scheduleField = val
}

// Source gets the source of this polymorphic type
func (m *voiceMessage) Source() *string {
	return m.sourceField
}

// SetSource sets the source of this polymorphic type
func (m *voiceMessage) SetSource(val *string) {
	m.sourceField = val
}

// To gets the to of this polymorphic type
func (m *voiceMessage) To() *string {
	return m.toField
}

// SetTo sets the to of this polymorphic type
func (m *voiceMessage) SetTo(val *string) {
	m.toField = val
}

// Voice gets the voice of this polymorphic type
func (m *voiceMessage) Voice() *string {
	return m.voiceField
}

// SetVoice sets the voice of this polymorphic type
func (m *voiceMessage) SetVoice(val *string) {
	m.voiceField = val
}

// UnmarshalVoiceMessageSlice unmarshals polymorphic slices of VoiceMessage
func UnmarshalVoiceMessageSlice(reader io.Reader, consumer runtime.Consumer) ([]VoiceMessage, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []VoiceMessage
	for _, element := range elements {
		obj, err := unmarshalVoiceMessage(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalVoiceMessage unmarshals polymorphic VoiceMessage
func UnmarshalVoiceMessage(reader io.Reader, consumer runtime.Consumer) (VoiceMessage, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalVoiceMessage(data, consumer)
}

func unmarshalVoiceMessage(data []byte, consumer runtime.Consumer) (VoiceMessage, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "VoiceMessage":
		var result voiceMessage
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this voice message
func (m *voiceMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *voiceMessage) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body()); err != nil {
		return err
	}

	return nil
}

func (m *voiceMessage) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country()); err != nil {
		return err
	}

	return nil
}

func (m *voiceMessage) validateCustomString(formats strfmt.Registry) error {

	if err := validate.Required("custom_string", "body", m.CustomString()); err != nil {
		return err
	}

	return nil
}

func (m *voiceMessage) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To()); err != nil {
		return err
	}

	return nil
}

func (m *voiceMessage) validateVoice(formats strfmt.Registry) error {

	if err := validate.Required("voice", "body", m.Voice()); err != nil {
		return err
	}

	return nil
}
