// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// PostPostcard PostPostcard model
// swagger:discriminator PostPostcard classType
type PostPostcard interface {
	runtime.Validatable

	// Postcard file URLs
	// Required: true
	FileUrls() []string
	SetFileUrls([]string)

	Recipients() []PostRecipient
	SetRecipients([]PostRecipient)
}

type postPostcard struct {
	fileUrlsField []string

	recipientsField []PostRecipient
}

// FileUrls gets the file urls of this polymorphic type
func (m *postPostcard) FileUrls() []string {
	return m.fileUrlsField
}

// SetFileUrls sets the file urls of this polymorphic type
func (m *postPostcard) SetFileUrls(val []string) {
	m.fileUrlsField = val
}

// Recipients gets the recipients of this polymorphic type
func (m *postPostcard) Recipients() []PostRecipient {
	return m.recipientsField
}

// SetRecipients sets the recipients of this polymorphic type
func (m *postPostcard) SetRecipients(val []PostRecipient) {
	m.recipientsField = val
}

// UnmarshalPostPostcardSlice unmarshals polymorphic slices of PostPostcard
func UnmarshalPostPostcardSlice(reader io.Reader, consumer runtime.Consumer) ([]PostPostcard, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []PostPostcard
	for _, element := range elements {
		obj, err := unmarshalPostPostcard(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalPostPostcard unmarshals polymorphic PostPostcard
func UnmarshalPostPostcard(reader io.Reader, consumer runtime.Consumer) (PostPostcard, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalPostPostcard(data, consumer)
}

func unmarshalPostPostcard(data []byte, consumer runtime.Consumer) (PostPostcard, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "PostPostcard":
		var result postPostcard
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this post postcard
func (m *postPostcard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileUrls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *postPostcard) validateFileUrls(formats strfmt.Registry) error {

	if err := validate.Required("file_urls", "body", m.FileUrls()); err != nil {
		return err
	}

	return nil
}

func (m *postPostcard) validateRecipients(formats strfmt.Registry) error {

	if err := validate.Required("recipients", "body", m.Recipients()); err != nil {
		return err
	}

	for i := 0; i < len(m.Recipients()); i++ {

		if err := m.recipientsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recipients" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}
