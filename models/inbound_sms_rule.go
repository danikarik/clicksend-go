// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// InboundSMSRule Model for Inbound SMS Rules
// swagger:discriminator InboundSMSRule classType
type InboundSMSRule interface {
	runtime.Validatable

	// Action to be taken (AUTO_REPLY, EMAIL_USER, EMAIL_FIXED, URL, SMS, POLL, GROUP_SMS, MOVE_CONTACT, CREATE_CONTACT, CREATE_CONTACT_PLUS_EMAIL, CREATE_CONTACT_PLUS_NAME_EMAIL CREATE_CONTACT_PLUS_NAME, SMPP, NONE).
	// Required: true
	Action() *string
	SetAction(*string)

	// Action address.
	// Required: true
	ActionAddress() *string
	SetActionAddress(*string)

	// Dedicated Number. Can be '*' to apply to all numbers.
	// Required: true
	DedicatedNumber() *string
	SetDedicatedNumber(*string)

	// Enabled: Disabled=0 or Enabled=1.
	// Required: true
	Enabled() *float64
	SetEnabled(*float64)

	// Message search term.
	// Required: true
	MessageSearchTerm() *string
	SetMessageSearchTerm(*string)

	// Message Search Type: 0=Any message, 1=starts with, 2=contains, 3=does not contain.
	// Required: true
	MessageSearchType() *float64
	SetMessageSearchType(*float64)

	// Rule Name.
	// Required: true
	RuleName() *string
	SetRuleName(*string)
}

type inboundSmsRule struct {
	actionField *string

	actionAddressField *string

	dedicatedNumberField *string

	enabledField *float64

	messageSearchTermField *string

	messageSearchTypeField *float64

	ruleNameField *string
}

// Action gets the action of this polymorphic type
func (m *inboundSmsRule) Action() *string {
	return m.actionField
}

// SetAction sets the action of this polymorphic type
func (m *inboundSmsRule) SetAction(val *string) {
	m.actionField = val
}

// ActionAddress gets the action address of this polymorphic type
func (m *inboundSmsRule) ActionAddress() *string {
	return m.actionAddressField
}

// SetActionAddress sets the action address of this polymorphic type
func (m *inboundSmsRule) SetActionAddress(val *string) {
	m.actionAddressField = val
}

// DedicatedNumber gets the dedicated number of this polymorphic type
func (m *inboundSmsRule) DedicatedNumber() *string {
	return m.dedicatedNumberField
}

// SetDedicatedNumber sets the dedicated number of this polymorphic type
func (m *inboundSmsRule) SetDedicatedNumber(val *string) {
	m.dedicatedNumberField = val
}

// Enabled gets the enabled of this polymorphic type
func (m *inboundSmsRule) Enabled() *float64 {
	return m.enabledField
}

// SetEnabled sets the enabled of this polymorphic type
func (m *inboundSmsRule) SetEnabled(val *float64) {
	m.enabledField = val
}

// MessageSearchTerm gets the message search term of this polymorphic type
func (m *inboundSmsRule) MessageSearchTerm() *string {
	return m.messageSearchTermField
}

// SetMessageSearchTerm sets the message search term of this polymorphic type
func (m *inboundSmsRule) SetMessageSearchTerm(val *string) {
	m.messageSearchTermField = val
}

// MessageSearchType gets the message search type of this polymorphic type
func (m *inboundSmsRule) MessageSearchType() *float64 {
	return m.messageSearchTypeField
}

// SetMessageSearchType sets the message search type of this polymorphic type
func (m *inboundSmsRule) SetMessageSearchType(val *float64) {
	m.messageSearchTypeField = val
}

// RuleName gets the rule name of this polymorphic type
func (m *inboundSmsRule) RuleName() *string {
	return m.ruleNameField
}

// SetRuleName sets the rule name of this polymorphic type
func (m *inboundSmsRule) SetRuleName(val *string) {
	m.ruleNameField = val
}

// UnmarshalInboundSMSRuleSlice unmarshals polymorphic slices of InboundSMSRule
func UnmarshalInboundSMSRuleSlice(reader io.Reader, consumer runtime.Consumer) ([]InboundSMSRule, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []InboundSMSRule
	for _, element := range elements {
		obj, err := unmarshalInboundSMSRule(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalInboundSMSRule unmarshals polymorphic InboundSMSRule
func UnmarshalInboundSMSRule(reader io.Reader, consumer runtime.Consumer) (InboundSMSRule, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalInboundSMSRule(data, consumer)
}

func unmarshalInboundSMSRule(data []byte, consumer runtime.Consumer) (InboundSMSRule, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "InboundSMSRule":
		var result inboundSmsRule
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this inbound SMS rule
func (m *inboundSmsRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDedicatedNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageSearchTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageSearchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *inboundSmsRule) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action()); err != nil {
		return err
	}

	return nil
}

func (m *inboundSmsRule) validateActionAddress(formats strfmt.Registry) error {

	if err := validate.Required("action_address", "body", m.ActionAddress()); err != nil {
		return err
	}

	return nil
}

func (m *inboundSmsRule) validateDedicatedNumber(formats strfmt.Registry) error {

	if err := validate.Required("dedicated_number", "body", m.DedicatedNumber()); err != nil {
		return err
	}

	return nil
}

func (m *inboundSmsRule) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled()); err != nil {
		return err
	}

	return nil
}

func (m *inboundSmsRule) validateMessageSearchTerm(formats strfmt.Registry) error {

	if err := validate.Required("message_search_term", "body", m.MessageSearchTerm()); err != nil {
		return err
	}

	return nil
}

func (m *inboundSmsRule) validateMessageSearchType(formats strfmt.Registry) error {

	if err := validate.Required("message_search_type", "body", m.MessageSearchType()); err != nil {
		return err
	}

	return nil
}

func (m *inboundSmsRule) validateRuleName(formats strfmt.Registry) error {

	if err := validate.Required("rule_name", "body", m.RuleName()); err != nil {
		return err
	}

	return nil
}
