// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// SMSCampaign Campaign Model for SMS
// swagger:discriminator SmsCampaign classType
type SMSCampaign interface {
	runtime.Validatable

	// Your campaign message.
	// Required: true
	Body() *string
	SetBody(*string)

	// Your sender id - more info: http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number.
	From() string
	SetFrom(string)

	// Your list id.
	// Required: true
	ListID() *int32
	SetListID(*int32)

	// Your campaign name.
	// Required: true
	Name() *string
	SetName(*string)

	// Your schedule timestamp.
	Schedule() int32
	SetSchedule(int32)
}

type smsCampaign struct {
	bodyField *string

	fromField string

	listIdField *int32

	nameField *string

	scheduleField int32
}

// Body gets the body of this polymorphic type
func (m *smsCampaign) Body() *string {
	return m.bodyField
}

// SetBody sets the body of this polymorphic type
func (m *smsCampaign) SetBody(val *string) {
	m.bodyField = val
}

// From gets the from of this polymorphic type
func (m *smsCampaign) From() string {
	return m.fromField
}

// SetFrom sets the from of this polymorphic type
func (m *smsCampaign) SetFrom(val string) {
	m.fromField = val
}

// ListID gets the list id of this polymorphic type
func (m *smsCampaign) ListID() *int32 {
	return m.listIdField
}

// SetListID sets the list id of this polymorphic type
func (m *smsCampaign) SetListID(val *int32) {
	m.listIdField = val
}

// Name gets the name of this polymorphic type
func (m *smsCampaign) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *smsCampaign) SetName(val *string) {
	m.nameField = val
}

// Schedule gets the schedule of this polymorphic type
func (m *smsCampaign) Schedule() int32 {
	return m.scheduleField
}

// SetSchedule sets the schedule of this polymorphic type
func (m *smsCampaign) SetSchedule(val int32) {
	m.scheduleField = val
}

// UnmarshalSMSCampaignSlice unmarshals polymorphic slices of SMSCampaign
func UnmarshalSMSCampaignSlice(reader io.Reader, consumer runtime.Consumer) ([]SMSCampaign, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []SMSCampaign
	for _, element := range elements {
		obj, err := unmarshalSMSCampaign(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalSMSCampaign unmarshals polymorphic SMSCampaign
func UnmarshalSMSCampaign(reader io.Reader, consumer runtime.Consumer) (SMSCampaign, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalSMSCampaign(data, consumer)
}

func unmarshalSMSCampaign(data []byte, consumer runtime.Consumer) (SMSCampaign, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "SmsCampaign":
		var result smsCampaign
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this Sms campaign
func (m *smsCampaign) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *smsCampaign) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body()); err != nil {
		return err
	}

	return nil
}

func (m *smsCampaign) validateListID(formats strfmt.Registry) error {

	if err := validate.Required("list_id", "body", m.ListID()); err != nil {
		return err
	}

	return nil
}

func (m *smsCampaign) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}
