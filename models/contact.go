// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// Contact Contains all details for the main contact.
// swagger:discriminator Contact classType
type Contact interface {
	runtime.Validatable

	// Your nearest city
	AddressCity() string
	SetAddressCity(string)

	// Your current country
	AddressCountry() string
	SetAddressCountry(string)

	// Your street address
	AddressLine1() string
	SetAddressLine1(string)

	// address line 2
	AddressLine2() string
	SetAddressLine2(string)

	// Your current postcode
	AddressPostalCode() string
	SetAddressPostalCode(string)

	// Your current state
	AddressState() string
	SetAddressState(string)

	// custom 1
	// Required: true
	Custom1() *string
	SetCustom1(*string)

	// custom 2
	Custom2() string
	SetCustom2(string)

	// custom 3
	Custom3() string
	SetCustom3(string)

	// custom 4
	Custom4() string
	SetCustom4(string)

	// Your email. Must be provided if no phone number or fax number.
	Email() string
	SetEmail(string)

	// Your fax number. Must be provided if no phone number or email.
	FAXNumber() string
	SetFAXNumber(string)

	// Your first name.
	FirstName() string
	SetFirstName(string)

	// Your last name
	LastName() string
	SetLastName(string)

	// Your organisation name
	OrganizationName() string
	SetOrganizationName(string)

	// Your phone number in E.164 format. Must be provided if no fax number or email.
	// Required: true
	PhoneNumber() *string
	SetPhoneNumber(*string)
}

type contact struct {
	addressCityField string

	addressCountryField string

	addressLine1Field string

	addressLine2Field string

	addressPostalCodeField string

	addressStateField string

	custom1Field *string

	custom2Field string

	custom3Field string

	custom4Field string

	emailField string

	faxNumberField string

	firstNameField string

	lastNameField string

	organizationNameField string

	phoneNumberField *string
}

// AddressCity gets the address city of this polymorphic type
func (m *contact) AddressCity() string {
	return m.addressCityField
}

// SetAddressCity sets the address city of this polymorphic type
func (m *contact) SetAddressCity(val string) {
	m.addressCityField = val
}

// AddressCountry gets the address country of this polymorphic type
func (m *contact) AddressCountry() string {
	return m.addressCountryField
}

// SetAddressCountry sets the address country of this polymorphic type
func (m *contact) SetAddressCountry(val string) {
	m.addressCountryField = val
}

// AddressLine1 gets the address line 1 of this polymorphic type
func (m *contact) AddressLine1() string {
	return m.addressLine1Field
}

// SetAddressLine1 sets the address line 1 of this polymorphic type
func (m *contact) SetAddressLine1(val string) {
	m.addressLine1Field = val
}

// AddressLine2 gets the address line 2 of this polymorphic type
func (m *contact) AddressLine2() string {
	return m.addressLine2Field
}

// SetAddressLine2 sets the address line 2 of this polymorphic type
func (m *contact) SetAddressLine2(val string) {
	m.addressLine2Field = val
}

// AddressPostalCode gets the address postal code of this polymorphic type
func (m *contact) AddressPostalCode() string {
	return m.addressPostalCodeField
}

// SetAddressPostalCode sets the address postal code of this polymorphic type
func (m *contact) SetAddressPostalCode(val string) {
	m.addressPostalCodeField = val
}

// AddressState gets the address state of this polymorphic type
func (m *contact) AddressState() string {
	return m.addressStateField
}

// SetAddressState sets the address state of this polymorphic type
func (m *contact) SetAddressState(val string) {
	m.addressStateField = val
}

// Custom1 gets the custom 1 of this polymorphic type
func (m *contact) Custom1() *string {
	return m.custom1Field
}

// SetCustom1 sets the custom 1 of this polymorphic type
func (m *contact) SetCustom1(val *string) {
	m.custom1Field = val
}

// Custom2 gets the custom 2 of this polymorphic type
func (m *contact) Custom2() string {
	return m.custom2Field
}

// SetCustom2 sets the custom 2 of this polymorphic type
func (m *contact) SetCustom2(val string) {
	m.custom2Field = val
}

// Custom3 gets the custom 3 of this polymorphic type
func (m *contact) Custom3() string {
	return m.custom3Field
}

// SetCustom3 sets the custom 3 of this polymorphic type
func (m *contact) SetCustom3(val string) {
	m.custom3Field = val
}

// Custom4 gets the custom 4 of this polymorphic type
func (m *contact) Custom4() string {
	return m.custom4Field
}

// SetCustom4 sets the custom 4 of this polymorphic type
func (m *contact) SetCustom4(val string) {
	m.custom4Field = val
}

// Email gets the email of this polymorphic type
func (m *contact) Email() string {
	return m.emailField
}

// SetEmail sets the email of this polymorphic type
func (m *contact) SetEmail(val string) {
	m.emailField = val
}

// FAXNumber gets the fax number of this polymorphic type
func (m *contact) FAXNumber() string {
	return m.faxNumberField
}

// SetFAXNumber sets the fax number of this polymorphic type
func (m *contact) SetFAXNumber(val string) {
	m.faxNumberField = val
}

// FirstName gets the first name of this polymorphic type
func (m *contact) FirstName() string {
	return m.firstNameField
}

// SetFirstName sets the first name of this polymorphic type
func (m *contact) SetFirstName(val string) {
	m.firstNameField = val
}

// LastName gets the last name of this polymorphic type
func (m *contact) LastName() string {
	return m.lastNameField
}

// SetLastName sets the last name of this polymorphic type
func (m *contact) SetLastName(val string) {
	m.lastNameField = val
}

// OrganizationName gets the organization name of this polymorphic type
func (m *contact) OrganizationName() string {
	return m.organizationNameField
}

// SetOrganizationName sets the organization name of this polymorphic type
func (m *contact) SetOrganizationName(val string) {
	m.organizationNameField = val
}

// PhoneNumber gets the phone number of this polymorphic type
func (m *contact) PhoneNumber() *string {
	return m.phoneNumberField
}

// SetPhoneNumber sets the phone number of this polymorphic type
func (m *contact) SetPhoneNumber(val *string) {
	m.phoneNumberField = val
}

// UnmarshalContactSlice unmarshals polymorphic slices of Contact
func UnmarshalContactSlice(reader io.Reader, consumer runtime.Consumer) ([]Contact, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Contact
	for _, element := range elements {
		obj, err := unmarshalContact(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalContact unmarshals polymorphic Contact
func UnmarshalContact(reader io.Reader, consumer runtime.Consumer) (Contact, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalContact(data, consumer)
}

func unmarshalContact(data []byte, consumer runtime.Consumer) (Contact, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "Contact":
		var result contact
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this contact
func (m *contact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustom1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *contact) validateCustom1(formats strfmt.Registry) error {

	if err := validate.Required("custom_1", "body", m.Custom1()); err != nil {
		return err
	}

	return nil
}

func (m *contact) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phone_number", "body", m.PhoneNumber()); err != nil {
		return err
	}

	return nil
}
