// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// EmailSMSAddress Email-to-SMS Allowed Address
// swagger:discriminator EmailSMSAddress classType
type EmailSMSAddress interface {
	runtime.Validatable

	// Your email address
	// Required: true
	EmailAddress() *string
	SetEmailAddress(*string)

	// Your sender id
	// Required: true
	From() *string
	SetFrom(*string)

	// Your subaccount id
	SubaccountID() string
	SetSubaccountID(string)
}

type emailSmsAddress struct {
	emailAddressField *string

	fromField *string

	subaccountIdField string
}

// EmailAddress gets the email address of this polymorphic type
func (m *emailSmsAddress) EmailAddress() *string {
	return m.emailAddressField
}

// SetEmailAddress sets the email address of this polymorphic type
func (m *emailSmsAddress) SetEmailAddress(val *string) {
	m.emailAddressField = val
}

// From gets the from of this polymorphic type
func (m *emailSmsAddress) From() *string {
	return m.fromField
}

// SetFrom sets the from of this polymorphic type
func (m *emailSmsAddress) SetFrom(val *string) {
	m.fromField = val
}

// SubaccountID gets the subaccount id of this polymorphic type
func (m *emailSmsAddress) SubaccountID() string {
	return m.subaccountIdField
}

// SetSubaccountID sets the subaccount id of this polymorphic type
func (m *emailSmsAddress) SetSubaccountID(val string) {
	m.subaccountIdField = val
}

// UnmarshalEmailSMSAddressSlice unmarshals polymorphic slices of EmailSMSAddress
func UnmarshalEmailSMSAddressSlice(reader io.Reader, consumer runtime.Consumer) ([]EmailSMSAddress, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []EmailSMSAddress
	for _, element := range elements {
		obj, err := unmarshalEmailSMSAddress(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalEmailSMSAddress unmarshals polymorphic EmailSMSAddress
func UnmarshalEmailSMSAddress(reader io.Reader, consumer runtime.Consumer) (EmailSMSAddress, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalEmailSMSAddress(data, consumer)
}

func unmarshalEmailSMSAddress(data []byte, consumer runtime.Consumer) (EmailSMSAddress, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "EmailSMSAddress":
		var result emailSmsAddress
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this email SMS address
func (m *emailSmsAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *emailSmsAddress) validateEmailAddress(formats strfmt.Registry) error {

	if err := validate.Required("email_address", "body", m.EmailAddress()); err != nil {
		return err
	}

	return nil
}

func (m *emailSmsAddress) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From()); err != nil {
		return err
	}

	return nil
}
