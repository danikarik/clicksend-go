// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// DateBefore All dates before specified timestam.
// swagger:discriminator DateBefore classType
type DateBefore interface {
	runtime.Validatable

	// An optional timestamp - mark all as read before this timestamp. If not given, all messages will be marked as read.
	DateBefore() float64
	SetDateBefore(float64)
}

type dateBefore struct {
	dateBeforeField float64
}

// DateBefore gets the date before of this polymorphic type
func (m *dateBefore) DateBefore() float64 {
	return m.dateBeforeField
}

// SetDateBefore sets the date before of this polymorphic type
func (m *dateBefore) SetDateBefore(val float64) {
	m.dateBeforeField = val
}

// UnmarshalDateBeforeSlice unmarshals polymorphic slices of DateBefore
func UnmarshalDateBeforeSlice(reader io.Reader, consumer runtime.Consumer) ([]DateBefore, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []DateBefore
	for _, element := range elements {
		obj, err := unmarshalDateBefore(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalDateBefore unmarshals polymorphic DateBefore
func UnmarshalDateBefore(reader io.Reader, consumer runtime.Consumer) (DateBefore, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalDateBefore(data, consumer)
}

func unmarshalDateBefore(data []byte, consumer runtime.Consumer) (DateBefore, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "DateBefore":
		var result dateBefore
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this date before
func (m *dateBefore) Validate(formats strfmt.Registry) error {
	return nil
}
