// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// CreditCard Credit card model
// swagger:discriminator CreditCard classType
type CreditCard interface {
	runtime.Validatable

	// Name of bank that credit card belongs to
	// Required: true
	BankName() *string
	SetBankName(*string)

	// CVC number of credit card
	// Required: true
	Cvc() *int32
	SetCvc(*int32)

	// Expiry month of credit card
	// Required: true
	ExpiryMonth() *int32
	SetExpiryMonth(*int32)

	// Expiry year of credit card
	// Required: true
	ExpiryYear() *int32
	SetExpiryYear(*int32)

	// Name printed on credit card
	// Required: true
	Name() *string
	SetName(*string)

	// Credit card number
	// Required: true
	Number() *string
	SetNumber(*string)
}

type creditCard struct {
	bankNameField *string

	cvcField *int32

	expiryMonthField *int32

	expiryYearField *int32

	nameField *string

	numberField *string
}

// BankName gets the bank name of this polymorphic type
func (m *creditCard) BankName() *string {
	return m.bankNameField
}

// SetBankName sets the bank name of this polymorphic type
func (m *creditCard) SetBankName(val *string) {
	m.bankNameField = val
}

// Cvc gets the cvc of this polymorphic type
func (m *creditCard) Cvc() *int32 {
	return m.cvcField
}

// SetCvc sets the cvc of this polymorphic type
func (m *creditCard) SetCvc(val *int32) {
	m.cvcField = val
}

// ExpiryMonth gets the expiry month of this polymorphic type
func (m *creditCard) ExpiryMonth() *int32 {
	return m.expiryMonthField
}

// SetExpiryMonth sets the expiry month of this polymorphic type
func (m *creditCard) SetExpiryMonth(val *int32) {
	m.expiryMonthField = val
}

// ExpiryYear gets the expiry year of this polymorphic type
func (m *creditCard) ExpiryYear() *int32 {
	return m.expiryYearField
}

// SetExpiryYear sets the expiry year of this polymorphic type
func (m *creditCard) SetExpiryYear(val *int32) {
	m.expiryYearField = val
}

// Name gets the name of this polymorphic type
func (m *creditCard) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *creditCard) SetName(val *string) {
	m.nameField = val
}

// Number gets the number of this polymorphic type
func (m *creditCard) Number() *string {
	return m.numberField
}

// SetNumber sets the number of this polymorphic type
func (m *creditCard) SetNumber(val *string) {
	m.numberField = val
}

// UnmarshalCreditCardSlice unmarshals polymorphic slices of CreditCard
func UnmarshalCreditCardSlice(reader io.Reader, consumer runtime.Consumer) ([]CreditCard, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []CreditCard
	for _, element := range elements {
		obj, err := unmarshalCreditCard(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalCreditCard unmarshals polymorphic CreditCard
func UnmarshalCreditCard(reader io.Reader, consumer runtime.Consumer) (CreditCard, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalCreditCard(data, consumer)
}

func unmarshalCreditCard(data []byte, consumer runtime.Consumer) (CreditCard, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "CreditCard":
		var result creditCard
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this credit card
func (m *creditCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *creditCard) validateBankName(formats strfmt.Registry) error {

	if err := validate.Required("bank_name", "body", m.BankName()); err != nil {
		return err
	}

	return nil
}

func (m *creditCard) validateCvc(formats strfmt.Registry) error {

	if err := validate.Required("cvc", "body", m.Cvc()); err != nil {
		return err
	}

	return nil
}

func (m *creditCard) validateExpiryMonth(formats strfmt.Registry) error {

	if err := validate.Required("expiry_month", "body", m.ExpiryMonth()); err != nil {
		return err
	}

	return nil
}

func (m *creditCard) validateExpiryYear(formats strfmt.Registry) error {

	if err := validate.Required("expiry_year", "body", m.ExpiryYear()); err != nil {
		return err
	}

	return nil
}

func (m *creditCard) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *creditCard) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("number", "body", m.Number()); err != nil {
		return err
	}

	return nil
}
