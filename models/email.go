// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Email Send Email
// swagger:discriminator Email classType
type Email interface {
	runtime.Validatable

	Attachments() []Attachment
	SetAttachments([]Attachment)

	Bcc() []EmailRecipient
	SetBcc([]EmailRecipient)

	// Body of the email.
	// Required: true
	Body() *string
	SetBody(*string)

	Cc() []EmailRecipient
	SetCc([]EmailRecipient)

	// from
	// Required: true
	From() *EmailFrom
	SetFrom(*EmailFrom)

	// Schedule.
	Schedule() float64
	SetSchedule(float64)

	// Subject of the email.
	Subject() string
	SetSubject(string)

	To() []EmailRecipient
	SetTo([]EmailRecipient)
}

type email struct {
	attachmentsField []Attachment

	bccField []EmailRecipient

	bodyField *string

	ccField []EmailRecipient

	fromField *EmailFrom

	scheduleField float64

	subjectField string

	toField []EmailRecipient
}

// Attachments gets the attachments of this polymorphic type
func (m *email) Attachments() []Attachment {
	return m.attachmentsField
}

// SetAttachments sets the attachments of this polymorphic type
func (m *email) SetAttachments(val []Attachment) {
	m.attachmentsField = val
}

// Bcc gets the bcc of this polymorphic type
func (m *email) Bcc() []EmailRecipient {
	return m.bccField
}

// SetBcc sets the bcc of this polymorphic type
func (m *email) SetBcc(val []EmailRecipient) {
	m.bccField = val
}

// Body gets the body of this polymorphic type
func (m *email) Body() *string {
	return m.bodyField
}

// SetBody sets the body of this polymorphic type
func (m *email) SetBody(val *string) {
	m.bodyField = val
}

// Cc gets the cc of this polymorphic type
func (m *email) Cc() []EmailRecipient {
	return m.ccField
}

// SetCc sets the cc of this polymorphic type
func (m *email) SetCc(val []EmailRecipient) {
	m.ccField = val
}

// From gets the from of this polymorphic type
func (m *email) From() *EmailFrom {
	return m.fromField
}

// SetFrom sets the from of this polymorphic type
func (m *email) SetFrom(val *EmailFrom) {
	m.fromField = val
}

// Schedule gets the schedule of this polymorphic type
func (m *email) Schedule() float64 {
	return m.scheduleField
}

// SetSchedule sets the schedule of this polymorphic type
func (m *email) SetSchedule(val float64) {
	m.scheduleField = val
}

// Subject gets the subject of this polymorphic type
func (m *email) Subject() string {
	return m.subjectField
}

// SetSubject sets the subject of this polymorphic type
func (m *email) SetSubject(val string) {
	m.subjectField = val
}

// To gets the to of this polymorphic type
func (m *email) To() []EmailRecipient {
	return m.toField
}

// SetTo sets the to of this polymorphic type
func (m *email) SetTo(val []EmailRecipient) {
	m.toField = val
}

// UnmarshalEmailSlice unmarshals polymorphic slices of Email
func UnmarshalEmailSlice(reader io.Reader, consumer runtime.Consumer) ([]Email, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Email
	for _, element := range elements {
		obj, err := unmarshalEmail(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalEmail unmarshals polymorphic Email
func UnmarshalEmail(reader io.Reader, consumer runtime.Consumer) (Email, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalEmail(data, consumer)
}

func unmarshalEmail(data []byte, consumer runtime.Consumer) (Email, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "Email":
		var result email
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this email
func (m *email) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBcc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *email) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.Attachments()) { // not required
		return nil
	}

	for i := 0; i < len(m.Attachments()); i++ {

		if err := m.attachmentsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachments" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *email) validateBcc(formats strfmt.Registry) error {

	if swag.IsZero(m.Bcc()) { // not required
		return nil
	}

	for i := 0; i < len(m.Bcc()); i++ {

		if err := m.bccField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bcc" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *email) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body()); err != nil {
		return err
	}

	return nil
}

func (m *email) validateCc(formats strfmt.Registry) error {

	if swag.IsZero(m.Cc()) { // not required
		return nil
	}

	for i := 0; i < len(m.Cc()); i++ {

		if err := m.ccField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cc" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *email) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From()); err != nil {
		return err
	}

	if m.From() != nil {
		if err := m.From().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *email) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To()); err != nil {
		return err
	}

	for i := 0; i < len(m.To()); i++ {

		if err := m.toField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("to" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}
