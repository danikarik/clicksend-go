// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// SMSTemplate SmsTemplate model
// swagger:discriminator SmsTemplate classType
type SMSTemplate interface {
	runtime.Validatable

	// Body of template
	// Required: true
	Body() *string
	SetBody(*string)

	// Name of template
	// Required: true
	TemplateName() *string
	SetTemplateName(*string)
}

type smsTemplate struct {
	bodyField *string

	templateNameField *string
}

// Body gets the body of this polymorphic type
func (m *smsTemplate) Body() *string {
	return m.bodyField
}

// SetBody sets the body of this polymorphic type
func (m *smsTemplate) SetBody(val *string) {
	m.bodyField = val
}

// TemplateName gets the template name of this polymorphic type
func (m *smsTemplate) TemplateName() *string {
	return m.templateNameField
}

// SetTemplateName sets the template name of this polymorphic type
func (m *smsTemplate) SetTemplateName(val *string) {
	m.templateNameField = val
}

// UnmarshalSMSTemplateSlice unmarshals polymorphic slices of SMSTemplate
func UnmarshalSMSTemplateSlice(reader io.Reader, consumer runtime.Consumer) ([]SMSTemplate, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []SMSTemplate
	for _, element := range elements {
		obj, err := unmarshalSMSTemplate(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalSMSTemplate unmarshals polymorphic SMSTemplate
func UnmarshalSMSTemplate(reader io.Reader, consumer runtime.Consumer) (SMSTemplate, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalSMSTemplate(data, consumer)
}

func unmarshalSMSTemplate(data []byte, consumer runtime.Consumer) (SMSTemplate, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "SmsTemplate":
		var result smsTemplate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this Sms template
func (m *smsTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *smsTemplate) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body()); err != nil {
		return err
	}

	return nil
}

func (m *smsTemplate) validateTemplateName(formats strfmt.Registry) error {

	if err := validate.Required("template_name", "body", m.TemplateName()); err != nil {
		return err
	}

	return nil
}
