// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// Subaccount Accounts that are maintained under a main account
// swagger:discriminator Subaccount classType
type Subaccount interface {
	runtime.Validatable

	// Your access billing flag value, must be 1 or 0.
	AccessBilling() *int32
	SetAccessBilling(*int32)

	// Your access contacts flag value, must be 1 or 0.
	AccessContacts() int32
	SetAccessContacts(int32)

	// Your access reporting flag value, must be 1 or 0.
	AccessReporting() *int32
	SetAccessReporting(*int32)

	// Your access settings flag value, must be 1 or 0.
	AccessSettings() *int32
	SetAccessSettings(*int32)

	// Your access users flag value, must be 1 or 0.
	AccessUsers() *int32
	SetAccessUsers(*int32)

	// Your new api username.
	// Required: true
	APIUsername() *string
	SetAPIUsername(*string)

	// Your new email.
	// Required: true
	Email() *string
	SetEmail(*string)

	// Your firstname
	// Required: true
	FirstName() *string
	SetFirstName(*string)

	// Your lastname
	// Required: true
	LastName() *string
	SetLastName(*string)

	// Your new password
	// Required: true
	Password() *string
	SetPassword(*string)

	// Your phone number in E.164 format.
	// Required: true
	PhoneNumber() *string
	SetPhoneNumber(*string)
}

type subaccount struct {
	accessBillingField *int32

	accessContactsField int32

	accessReportingField *int32

	accessSettingsField *int32

	accessUsersField *int32

	apiUsernameField *string

	emailField *string

	firstNameField *string

	lastNameField *string

	passwordField *string

	phoneNumberField *string
}

// AccessBilling gets the access billing of this polymorphic type
func (m *subaccount) AccessBilling() *int32 {
	return m.accessBillingField
}

// SetAccessBilling sets the access billing of this polymorphic type
func (m *subaccount) SetAccessBilling(val *int32) {
	m.accessBillingField = val
}

// AccessContacts gets the access contacts of this polymorphic type
func (m *subaccount) AccessContacts() int32 {
	return m.accessContactsField
}

// SetAccessContacts sets the access contacts of this polymorphic type
func (m *subaccount) SetAccessContacts(val int32) {
	m.accessContactsField = val
}

// AccessReporting gets the access reporting of this polymorphic type
func (m *subaccount) AccessReporting() *int32 {
	return m.accessReportingField
}

// SetAccessReporting sets the access reporting of this polymorphic type
func (m *subaccount) SetAccessReporting(val *int32) {
	m.accessReportingField = val
}

// AccessSettings gets the access settings of this polymorphic type
func (m *subaccount) AccessSettings() *int32 {
	return m.accessSettingsField
}

// SetAccessSettings sets the access settings of this polymorphic type
func (m *subaccount) SetAccessSettings(val *int32) {
	m.accessSettingsField = val
}

// AccessUsers gets the access users of this polymorphic type
func (m *subaccount) AccessUsers() *int32 {
	return m.accessUsersField
}

// SetAccessUsers sets the access users of this polymorphic type
func (m *subaccount) SetAccessUsers(val *int32) {
	m.accessUsersField = val
}

// APIUsername gets the api username of this polymorphic type
func (m *subaccount) APIUsername() *string {
	return m.apiUsernameField
}

// SetAPIUsername sets the api username of this polymorphic type
func (m *subaccount) SetAPIUsername(val *string) {
	m.apiUsernameField = val
}

// Email gets the email of this polymorphic type
func (m *subaccount) Email() *string {
	return m.emailField
}

// SetEmail sets the email of this polymorphic type
func (m *subaccount) SetEmail(val *string) {
	m.emailField = val
}

// FirstName gets the first name of this polymorphic type
func (m *subaccount) FirstName() *string {
	return m.firstNameField
}

// SetFirstName sets the first name of this polymorphic type
func (m *subaccount) SetFirstName(val *string) {
	m.firstNameField = val
}

// LastName gets the last name of this polymorphic type
func (m *subaccount) LastName() *string {
	return m.lastNameField
}

// SetLastName sets the last name of this polymorphic type
func (m *subaccount) SetLastName(val *string) {
	m.lastNameField = val
}

// Password gets the password of this polymorphic type
func (m *subaccount) Password() *string {
	return m.passwordField
}

// SetPassword sets the password of this polymorphic type
func (m *subaccount) SetPassword(val *string) {
	m.passwordField = val
}

// PhoneNumber gets the phone number of this polymorphic type
func (m *subaccount) PhoneNumber() *string {
	return m.phoneNumberField
}

// SetPhoneNumber sets the phone number of this polymorphic type
func (m *subaccount) SetPhoneNumber(val *string) {
	m.phoneNumberField = val
}

// UnmarshalSubaccountSlice unmarshals polymorphic slices of Subaccount
func UnmarshalSubaccountSlice(reader io.Reader, consumer runtime.Consumer) ([]Subaccount, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Subaccount
	for _, element := range elements {
		obj, err := unmarshalSubaccount(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalSubaccount unmarshals polymorphic Subaccount
func UnmarshalSubaccount(reader io.Reader, consumer runtime.Consumer) (Subaccount, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalSubaccount(data, consumer)
}

func unmarshalSubaccount(data []byte, consumer runtime.Consumer) (Subaccount, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "Subaccount":
		var result subaccount
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this subaccount
func (m *subaccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *subaccount) validateAPIUsername(formats strfmt.Registry) error {

	if err := validate.Required("api_username", "body", m.APIUsername()); err != nil {
		return err
	}

	return nil
}

func (m *subaccount) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email()); err != nil {
		return err
	}

	return nil
}

func (m *subaccount) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName()); err != nil {
		return err
	}

	return nil
}

func (m *subaccount) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName()); err != nil {
		return err
	}

	return nil
}

func (m *subaccount) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password()); err != nil {
		return err
	}

	return nil
}

func (m *subaccount) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phone_number", "body", m.PhoneNumber()); err != nil {
		return err
	}

	return nil
}
