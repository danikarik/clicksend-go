// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// EmailRecipient Recipient of an email, either To, Cc, or Bcc.
// swagger:discriminator EmailRecipient classType
type EmailRecipient interface {
	runtime.Validatable

	// Email of the recipient.
	// Required: true
	Email() *string
	SetEmail(*string)

	// Name of the recipient.
	Name() string
	SetName(string)
}

type emailRecipient struct {
	emailField *string

	nameField string
}

// Email gets the email of this polymorphic type
func (m *emailRecipient) Email() *string {
	return m.emailField
}

// SetEmail sets the email of this polymorphic type
func (m *emailRecipient) SetEmail(val *string) {
	m.emailField = val
}

// Name gets the name of this polymorphic type
func (m *emailRecipient) Name() string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *emailRecipient) SetName(val string) {
	m.nameField = val
}

// UnmarshalEmailRecipientSlice unmarshals polymorphic slices of EmailRecipient
func UnmarshalEmailRecipientSlice(reader io.Reader, consumer runtime.Consumer) ([]EmailRecipient, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []EmailRecipient
	for _, element := range elements {
		obj, err := unmarshalEmailRecipient(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalEmailRecipient unmarshals polymorphic EmailRecipient
func UnmarshalEmailRecipient(reader io.Reader, consumer runtime.Consumer) (EmailRecipient, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalEmailRecipient(data, consumer)
}

func unmarshalEmailRecipient(data []byte, consumer runtime.Consumer) (EmailRecipient, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "EmailRecipient":
		var result emailRecipient
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this email recipient
func (m *emailRecipient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *emailRecipient) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email()); err != nil {
		return err
	}

	return nil
}
