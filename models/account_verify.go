// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// AccountVerify Verifies an account by token that should have been sent to the user's phone
// swagger:discriminator AccountVerify classType
type AccountVerify interface {
	runtime.Validatable

	// Country code
	// Required: true
	Country() *string
	SetCountry(*string)

	// Type of verification
	// Required: true
	Type() *string
	SetType(*string)

	// User's phone number
	// Required: true
	UserPhone() *string
	SetUserPhone(*string)
}

type accountVerify struct {
	countryField *string

	typeField *string

	userPhoneField *string
}

// Country gets the country of this polymorphic type
func (m *accountVerify) Country() *string {
	return m.countryField
}

// SetCountry sets the country of this polymorphic type
func (m *accountVerify) SetCountry(val *string) {
	m.countryField = val
}

// Type gets the type of this polymorphic type
func (m *accountVerify) Type() *string {
	return m.typeField
}

// SetType sets the type of this polymorphic type
func (m *accountVerify) SetType(val *string) {
	m.typeField = val
}

// UserPhone gets the user phone of this polymorphic type
func (m *accountVerify) UserPhone() *string {
	return m.userPhoneField
}

// SetUserPhone sets the user phone of this polymorphic type
func (m *accountVerify) SetUserPhone(val *string) {
	m.userPhoneField = val
}

// UnmarshalAccountVerifySlice unmarshals polymorphic slices of AccountVerify
func UnmarshalAccountVerifySlice(reader io.Reader, consumer runtime.Consumer) ([]AccountVerify, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []AccountVerify
	for _, element := range elements {
		obj, err := unmarshalAccountVerify(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalAccountVerify unmarshals polymorphic AccountVerify
func UnmarshalAccountVerify(reader io.Reader, consumer runtime.Consumer) (AccountVerify, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalAccountVerify(data, consumer)
}

func unmarshalAccountVerify(data []byte, consumer runtime.Consumer) (AccountVerify, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "AccountVerify":
		var result accountVerify
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this account verify
func (m *accountVerify) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPhone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *accountVerify) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country()); err != nil {
		return err
	}

	return nil
}

func (m *accountVerify) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type()); err != nil {
		return err
	}

	return nil
}

func (m *accountVerify) validateUserPhone(formats strfmt.Registry) error {

	if err := validate.Required("user_phone", "body", m.UserPhone()); err != nil {
		return err
	}

	return nil
}
