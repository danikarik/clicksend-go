// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// DeliveryIssue Issues with message delivery
// swagger:discriminator DeliveryIssue classType
type DeliveryIssue interface {
	runtime.Validatable

	// The user's comments.
	ClientComments() string
	SetClientComments(string)

	// The description of the message.
	// Required: true
	Description() *string
	SetDescription(*string)

	// The user's email address.
	// Required: true
	EmailAddress() *string
	SetEmailAddress(*string)

	// The message id of the message.
	MessageID() string
	SetMessageID(string)

	// The type of message, must be one of the following values SMS, MMS, VOICE, EMAIL_MARKETING, EMAIL_TRANSACTIONAL, FAX, POST.
	// Required: true
	Type() *string
	SetType(*string)
}

type deliveryIssue struct {
	clientCommentsField string

	descriptionField *string

	emailAddressField *string

	messageIdField string

	typeField *string
}

// ClientComments gets the client comments of this polymorphic type
func (m *deliveryIssue) ClientComments() string {
	return m.clientCommentsField
}

// SetClientComments sets the client comments of this polymorphic type
func (m *deliveryIssue) SetClientComments(val string) {
	m.clientCommentsField = val
}

// Description gets the description of this polymorphic type
func (m *deliveryIssue) Description() *string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *deliveryIssue) SetDescription(val *string) {
	m.descriptionField = val
}

// EmailAddress gets the email address of this polymorphic type
func (m *deliveryIssue) EmailAddress() *string {
	return m.emailAddressField
}

// SetEmailAddress sets the email address of this polymorphic type
func (m *deliveryIssue) SetEmailAddress(val *string) {
	m.emailAddressField = val
}

// MessageID gets the message id of this polymorphic type
func (m *deliveryIssue) MessageID() string {
	return m.messageIdField
}

// SetMessageID sets the message id of this polymorphic type
func (m *deliveryIssue) SetMessageID(val string) {
	m.messageIdField = val
}

// Type gets the type of this polymorphic type
func (m *deliveryIssue) Type() *string {
	return m.typeField
}

// SetType sets the type of this polymorphic type
func (m *deliveryIssue) SetType(val *string) {
	m.typeField = val
}

// UnmarshalDeliveryIssueSlice unmarshals polymorphic slices of DeliveryIssue
func UnmarshalDeliveryIssueSlice(reader io.Reader, consumer runtime.Consumer) ([]DeliveryIssue, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []DeliveryIssue
	for _, element := range elements {
		obj, err := unmarshalDeliveryIssue(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalDeliveryIssue unmarshals polymorphic DeliveryIssue
func UnmarshalDeliveryIssue(reader io.Reader, consumer runtime.Consumer) (DeliveryIssue, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalDeliveryIssue(data, consumer)
}

func unmarshalDeliveryIssue(data []byte, consumer runtime.Consumer) (DeliveryIssue, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "DeliveryIssue":
		var result deliveryIssue
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this delivery issue
func (m *deliveryIssue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *deliveryIssue) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	return nil
}

func (m *deliveryIssue) validateEmailAddress(formats strfmt.Registry) error {

	if err := validate.Required("email_address", "body", m.EmailAddress()); err != nil {
		return err
	}

	return nil
}

func (m *deliveryIssue) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type()); err != nil {
		return err
	}

	return nil
}
