// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// MMSCampaign Campaign Model for MMS
// swagger:discriminator MmsCampaign classType
type MMSCampaign interface {
	runtime.Validatable

	// Your campaign message.
	// Required: true
	Body() *string
	SetBody(*string)

	// Your sender id - more info: http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number.
	From() string
	SetFrom(string)

	// Your list id.
	// Required: true
	ListID() *int32
	SetListID(*int32)

	// URL pointing to media file.
	// Required: true
	MediaFile() *string
	SetMediaFile(*string)

	// Your campaign name.
	// Required: true
	Name() *string
	SetName(*string)

	// Your schedule timestamp.
	Schedule() int32
	SetSchedule(int32)

	// Subject of MMS campaign.
	// Required: true
	Subject() *string
	SetSubject(*string)
}

type mmsCampaign struct {
	bodyField *string

	fromField string

	listIdField *int32

	mediaFileField *string

	nameField *string

	scheduleField int32

	subjectField *string
}

// Body gets the body of this polymorphic type
func (m *mmsCampaign) Body() *string {
	return m.bodyField
}

// SetBody sets the body of this polymorphic type
func (m *mmsCampaign) SetBody(val *string) {
	m.bodyField = val
}

// From gets the from of this polymorphic type
func (m *mmsCampaign) From() string {
	return m.fromField
}

// SetFrom sets the from of this polymorphic type
func (m *mmsCampaign) SetFrom(val string) {
	m.fromField = val
}

// ListID gets the list id of this polymorphic type
func (m *mmsCampaign) ListID() *int32 {
	return m.listIdField
}

// SetListID sets the list id of this polymorphic type
func (m *mmsCampaign) SetListID(val *int32) {
	m.listIdField = val
}

// MediaFile gets the media file of this polymorphic type
func (m *mmsCampaign) MediaFile() *string {
	return m.mediaFileField
}

// SetMediaFile sets the media file of this polymorphic type
func (m *mmsCampaign) SetMediaFile(val *string) {
	m.mediaFileField = val
}

// Name gets the name of this polymorphic type
func (m *mmsCampaign) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *mmsCampaign) SetName(val *string) {
	m.nameField = val
}

// Schedule gets the schedule of this polymorphic type
func (m *mmsCampaign) Schedule() int32 {
	return m.scheduleField
}

// SetSchedule sets the schedule of this polymorphic type
func (m *mmsCampaign) SetSchedule(val int32) {
	m.scheduleField = val
}

// Subject gets the subject of this polymorphic type
func (m *mmsCampaign) Subject() *string {
	return m.subjectField
}

// SetSubject sets the subject of this polymorphic type
func (m *mmsCampaign) SetSubject(val *string) {
	m.subjectField = val
}

// UnmarshalMMSCampaignSlice unmarshals polymorphic slices of MMSCampaign
func UnmarshalMMSCampaignSlice(reader io.Reader, consumer runtime.Consumer) ([]MMSCampaign, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []MMSCampaign
	for _, element := range elements {
		obj, err := unmarshalMMSCampaign(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalMMSCampaign unmarshals polymorphic MMSCampaign
func UnmarshalMMSCampaign(reader io.Reader, consumer runtime.Consumer) (MMSCampaign, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalMMSCampaign(data, consumer)
}

func unmarshalMMSCampaign(data []byte, consumer runtime.Consumer) (MMSCampaign, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "MmsCampaign":
		var result mmsCampaign
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this Mms campaign
func (m *mmsCampaign) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *mmsCampaign) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body()); err != nil {
		return err
	}

	return nil
}

func (m *mmsCampaign) validateListID(formats strfmt.Registry) error {

	if err := validate.Required("list_id", "body", m.ListID()); err != nil {
		return err
	}

	return nil
}

func (m *mmsCampaign) validateMediaFile(formats strfmt.Registry) error {

	if err := validate.Required("media_file", "body", m.MediaFile()); err != nil {
		return err
	}

	return nil
}

func (m *mmsCampaign) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

func (m *mmsCampaign) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject()); err != nil {
		return err
	}

	return nil
}
