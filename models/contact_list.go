// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// ContactList Your contact list.
// swagger:discriminator ContactList classType
type ContactList interface {
	runtime.Validatable

	// Your list name.
	// Required: true
	ListName() *string
	SetListName(*string)
}

type contactList struct {
	listNameField *string
}

// ListName gets the list name of this polymorphic type
func (m *contactList) ListName() *string {
	return m.listNameField
}

// SetListName sets the list name of this polymorphic type
func (m *contactList) SetListName(val *string) {
	m.listNameField = val
}

// UnmarshalContactListSlice unmarshals polymorphic slices of ContactList
func UnmarshalContactListSlice(reader io.Reader, consumer runtime.Consumer) ([]ContactList, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ContactList
	for _, element := range elements {
		obj, err := unmarshalContactList(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalContactList unmarshals polymorphic ContactList
func UnmarshalContactList(reader io.Reader, consumer runtime.Consumer) (ContactList, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalContactList(data, consumer)
}

func unmarshalContactList(data []byte, consumer runtime.Consumer) (ContactList, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "ContactList":
		var result contactList
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this contact list
func (m *contactList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateListName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *contactList) validateListName(formats strfmt.Registry) error {

	if err := validate.Required("list_name", "body", m.ListName()); err != nil {
		return err
	}

	return nil
}
