// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// ResellerAccountTransferCredit ResellerAccountTransferCredit model
// swagger:discriminator ResellerAccountTransferCredit classType
type ResellerAccountTransferCredit interface {
	runtime.Validatable

	// Balance to transfer
	// Required: true
	Balance() *int32
	SetBalance(*int32)

	// User ID of client
	// Required: true
	ClientUserID() *int32
	SetClientUserID(*int32)

	// Currency of balance to transfer
	// Required: true
	Currency() *string
	SetCurrency(*string)
}

type resellerAccountTransferCredit struct {
	balanceField *int32

	clientUserIdField *int32

	currencyField *string
}

// Balance gets the balance of this polymorphic type
func (m *resellerAccountTransferCredit) Balance() *int32 {
	return m.balanceField
}

// SetBalance sets the balance of this polymorphic type
func (m *resellerAccountTransferCredit) SetBalance(val *int32) {
	m.balanceField = val
}

// ClientUserID gets the client user id of this polymorphic type
func (m *resellerAccountTransferCredit) ClientUserID() *int32 {
	return m.clientUserIdField
}

// SetClientUserID sets the client user id of this polymorphic type
func (m *resellerAccountTransferCredit) SetClientUserID(val *int32) {
	m.clientUserIdField = val
}

// Currency gets the currency of this polymorphic type
func (m *resellerAccountTransferCredit) Currency() *string {
	return m.currencyField
}

// SetCurrency sets the currency of this polymorphic type
func (m *resellerAccountTransferCredit) SetCurrency(val *string) {
	m.currencyField = val
}

// UnmarshalResellerAccountTransferCreditSlice unmarshals polymorphic slices of ResellerAccountTransferCredit
func UnmarshalResellerAccountTransferCreditSlice(reader io.Reader, consumer runtime.Consumer) ([]ResellerAccountTransferCredit, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ResellerAccountTransferCredit
	for _, element := range elements {
		obj, err := unmarshalResellerAccountTransferCredit(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalResellerAccountTransferCredit unmarshals polymorphic ResellerAccountTransferCredit
func UnmarshalResellerAccountTransferCredit(reader io.Reader, consumer runtime.Consumer) (ResellerAccountTransferCredit, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalResellerAccountTransferCredit(data, consumer)
}

func unmarshalResellerAccountTransferCredit(data []byte, consumer runtime.Consumer) (ResellerAccountTransferCredit, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "ResellerAccountTransferCredit":
		var result resellerAccountTransferCredit
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this reseller account transfer credit
func (m *resellerAccountTransferCredit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *resellerAccountTransferCredit) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance()); err != nil {
		return err
	}

	return nil
}

func (m *resellerAccountTransferCredit) validateClientUserID(formats strfmt.Registry) error {

	if err := validate.Required("client_user_id", "body", m.ClientUserID()); err != nil {
		return err
	}

	return nil
}

func (m *resellerAccountTransferCredit) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency()); err != nil {
		return err
	}

	return nil
}
