// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// ContactListImport Contact list import model
// swagger:discriminator ContactListImport classType
type ContactListImport interface {
	runtime.Validatable

	// Order of fields in file
	// Required: true
	FieldOrder() []string
	SetFieldOrder([]string)

	// URL of file to process
	// Required: true
	FileURL() *string
	SetFileURL(*string)
}

type contactListImport struct {
	fieldOrderField []string

	fileUrlField *string
}

// FieldOrder gets the field order of this polymorphic type
func (m *contactListImport) FieldOrder() []string {
	return m.fieldOrderField
}

// SetFieldOrder sets the field order of this polymorphic type
func (m *contactListImport) SetFieldOrder(val []string) {
	m.fieldOrderField = val
}

// FileURL gets the file url of this polymorphic type
func (m *contactListImport) FileURL() *string {
	return m.fileUrlField
}

// SetFileURL sets the file url of this polymorphic type
func (m *contactListImport) SetFileURL(val *string) {
	m.fileUrlField = val
}

// UnmarshalContactListImportSlice unmarshals polymorphic slices of ContactListImport
func UnmarshalContactListImportSlice(reader io.Reader, consumer runtime.Consumer) ([]ContactListImport, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ContactListImport
	for _, element := range elements {
		obj, err := unmarshalContactListImport(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalContactListImport unmarshals polymorphic ContactListImport
func UnmarshalContactListImport(reader io.Reader, consumer runtime.Consumer) (ContactListImport, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalContactListImport(data, consumer)
}

func unmarshalContactListImport(data []byte, consumer runtime.Consumer) (ContactListImport, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "ContactListImport":
		var result contactListImport
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this contact list import
func (m *contactListImport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *contactListImport) validateFieldOrder(formats strfmt.Registry) error {

	if err := validate.Required("field_order", "body", m.FieldOrder()); err != nil {
		return err
	}

	return nil
}

func (m *contactListImport) validateFileURL(formats strfmt.Registry) error {

	if err := validate.Required("file_url", "body", m.FileURL()); err != nil {
		return err
	}

	return nil
}
