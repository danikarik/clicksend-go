// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// MMSMessageCollection Array of MmsMessage items
// swagger:discriminator MmsMessageCollection classType
type MMSMessageCollection interface {
	runtime.Validatable

	// Media file you want to send
	// Required: true
	MediaFile() *string
	SetMediaFile(*string)

	Messages() []MMSMessage
	SetMessages([]MMSMessage)
}

type mmsMessageCollection struct {
	mediaFileField *string

	messagesField []MMSMessage
}

// MediaFile gets the media file of this polymorphic type
func (m *mmsMessageCollection) MediaFile() *string {
	return m.mediaFileField
}

// SetMediaFile sets the media file of this polymorphic type
func (m *mmsMessageCollection) SetMediaFile(val *string) {
	m.mediaFileField = val
}

// Messages gets the messages of this polymorphic type
func (m *mmsMessageCollection) Messages() []MMSMessage {
	return m.messagesField
}

// SetMessages sets the messages of this polymorphic type
func (m *mmsMessageCollection) SetMessages(val []MMSMessage) {
	m.messagesField = val
}

// UnmarshalMMSMessageCollectionSlice unmarshals polymorphic slices of MMSMessageCollection
func UnmarshalMMSMessageCollectionSlice(reader io.Reader, consumer runtime.Consumer) ([]MMSMessageCollection, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []MMSMessageCollection
	for _, element := range elements {
		obj, err := unmarshalMMSMessageCollection(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalMMSMessageCollection unmarshals polymorphic MMSMessageCollection
func UnmarshalMMSMessageCollection(reader io.Reader, consumer runtime.Consumer) (MMSMessageCollection, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalMMSMessageCollection(data, consumer)
}

func unmarshalMMSMessageCollection(data []byte, consumer runtime.Consumer) (MMSMessageCollection, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "MmsMessageCollection":
		var result mmsMessageCollection
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this Mms message collection
func (m *mmsMessageCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMediaFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *mmsMessageCollection) validateMediaFile(formats strfmt.Registry) error {

	if err := validate.Required("media_file", "body", m.MediaFile()); err != nil {
		return err
	}

	return nil
}

func (m *mmsMessageCollection) validateMessages(formats strfmt.Registry) error {

	if err := validate.Required("messages", "body", m.Messages()()); err != nil {
		return err
	}

	for i := 0; i < len(m.Messages()()); i++ {

		if err := m.messagesField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messages" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}
