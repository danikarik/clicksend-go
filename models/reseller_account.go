// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// ResellerAccount ResellerAccount model
// swagger:discriminator ResellerAccount classType
type ResellerAccount interface {
	runtime.Validatable

	// Account name (usually company name)
	// Required: true
	AccountName() *string
	SetAccountName(*string)

	// Country of account holder
	// Required: true
	Country() *string
	SetCountry(*string)

	// Account password (unhashed)
	// Required: true
	Password() *string
	SetPassword(*string)

	// Account email
	// Required: true
	UserEmail() *string
	SetUserEmail(*string)

	// Account owner first name
	// Required: true
	UserFirstName() *string
	SetUserFirstName(*string)

	// Account owner last name
	// Required: true
	UserLastName() *string
	SetUserLastName(*string)

	// Account phone number
	// Required: true
	UserPhone() *string
	SetUserPhone(*string)

	// Account username
	// Required: true
	Username() *string
	SetUsername(*string)
}

type resellerAccount struct {
	accountNameField *string

	countryField *string

	passwordField *string

	userEmailField *string

	userFirstNameField *string

	userLastNameField *string

	userPhoneField *string

	usernameField *string
}

// AccountName gets the account name of this polymorphic type
func (m *resellerAccount) AccountName() *string {
	return m.accountNameField
}

// SetAccountName sets the account name of this polymorphic type
func (m *resellerAccount) SetAccountName(val *string) {
	m.accountNameField = val
}

// Country gets the country of this polymorphic type
func (m *resellerAccount) Country() *string {
	return m.countryField
}

// SetCountry sets the country of this polymorphic type
func (m *resellerAccount) SetCountry(val *string) {
	m.countryField = val
}

// Password gets the password of this polymorphic type
func (m *resellerAccount) Password() *string {
	return m.passwordField
}

// SetPassword sets the password of this polymorphic type
func (m *resellerAccount) SetPassword(val *string) {
	m.passwordField = val
}

// UserEmail gets the user email of this polymorphic type
func (m *resellerAccount) UserEmail() *string {
	return m.userEmailField
}

// SetUserEmail sets the user email of this polymorphic type
func (m *resellerAccount) SetUserEmail(val *string) {
	m.userEmailField = val
}

// UserFirstName gets the user first name of this polymorphic type
func (m *resellerAccount) UserFirstName() *string {
	return m.userFirstNameField
}

// SetUserFirstName sets the user first name of this polymorphic type
func (m *resellerAccount) SetUserFirstName(val *string) {
	m.userFirstNameField = val
}

// UserLastName gets the user last name of this polymorphic type
func (m *resellerAccount) UserLastName() *string {
	return m.userLastNameField
}

// SetUserLastName sets the user last name of this polymorphic type
func (m *resellerAccount) SetUserLastName(val *string) {
	m.userLastNameField = val
}

// UserPhone gets the user phone of this polymorphic type
func (m *resellerAccount) UserPhone() *string {
	return m.userPhoneField
}

// SetUserPhone sets the user phone of this polymorphic type
func (m *resellerAccount) SetUserPhone(val *string) {
	m.userPhoneField = val
}

// Username gets the username of this polymorphic type
func (m *resellerAccount) Username() *string {
	return m.usernameField
}

// SetUsername sets the username of this polymorphic type
func (m *resellerAccount) SetUsername(val *string) {
	m.usernameField = val
}

// UnmarshalResellerAccountSlice unmarshals polymorphic slices of ResellerAccount
func UnmarshalResellerAccountSlice(reader io.Reader, consumer runtime.Consumer) ([]ResellerAccount, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ResellerAccount
	for _, element := range elements {
		obj, err := unmarshalResellerAccount(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalResellerAccount unmarshals polymorphic ResellerAccount
func UnmarshalResellerAccount(reader io.Reader, consumer runtime.Consumer) (ResellerAccount, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalResellerAccount(data, consumer)
}

func unmarshalResellerAccount(data []byte, consumer runtime.Consumer) (ResellerAccount, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the classType property.
	var getType struct {
		ClassType string `json:"classType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("classType", "body", getType.ClassType); err != nil {
		return nil, err
	}

	// The value of classType is used to determine which type to create and unmarshal the data into
	switch getType.ClassType {
	case "ResellerAccount":
		var result resellerAccount
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid classType value: %q", getType.ClassType)

}

// Validate validates this reseller account
func (m *resellerAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *resellerAccount) validateAccountName(formats strfmt.Registry) error {

	if err := validate.Required("account_name", "body", m.AccountName()); err != nil {
		return err
	}

	return nil
}

func (m *resellerAccount) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country()); err != nil {
		return err
	}

	return nil
}

func (m *resellerAccount) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password()); err != nil {
		return err
	}

	return nil
}

func (m *resellerAccount) validateUserEmail(formats strfmt.Registry) error {

	if err := validate.Required("user_email", "body", m.UserEmail()); err != nil {
		return err
	}

	return nil
}

func (m *resellerAccount) validateUserFirstName(formats strfmt.Registry) error {

	if err := validate.Required("user_first_name", "body", m.UserFirstName()); err != nil {
		return err
	}

	return nil
}

func (m *resellerAccount) validateUserLastName(formats strfmt.Registry) error {

	if err := validate.Required("user_last_name", "body", m.UserLastName()); err != nil {
		return err
	}

	return nil
}

func (m *resellerAccount) validateUserPhone(formats strfmt.Registry) error {

	if err := validate.Required("user_phone", "body", m.UserPhone()); err != nil {
		return err
	}

	return nil
}

func (m *resellerAccount) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username()); err != nil {
		return err
	}

	return nil
}
